/*! jQuery v3.4.1 | (c) JS Foundation and other contributors | jquery.org/license */
function Curtains(e){var t;if(this.planes=[],this.renderTargets=[],this.shaderPasses=[],this._imageCache=[],this._drawStacks={opaque:{length:0,programs:[]},transparent:{length:0,programs:[]},renderPasses:[],scenePasses:[]},this._drawingEnabled=!0,this._forceRender=!1,"string"==typeof e&&(console.warn("Since v4.0 you should use an object to pass your container and other parameters. Please refer to the docs: https://www.curtainsjs.com/documentation.html"),e={container:t=e}),e.container?"string"==typeof e.container?this.container=document.getElementById(e.container):e.container instanceof Element&&(this.container=e.container):((t=document.createElement("div")).setAttribute("id","curtains-canvas"),document.body.appendChild(t),this.container=t),this._autoResize=e.autoResize,null!==this._autoResize&&void 0!==this._autoResize||(this._autoResize=!0),this._autoRender=e.autoRender,null!==this._autoRender&&void 0!==this._autoRender||(this._autoRender=!0),this._watchScroll=e.watchScroll,null!==this._watchScroll&&void 0!==this._watchScroll||(this._watchScroll=!0),this.pixelRatio=e.pixelRatio||window.devicePixelRatio||1,e.renderingScale=isNaN(e.renderingScale)?1:parseFloat(e.renderingScale),this._renderingScale=Math.max(.25,Math.min(1,e.renderingScale)),this.premultipliedAlpha=e.premultipliedAlpha||!1,this.alpha=e.alpha,null!==this.alpha&&void 0!==this.alpha||(this.alpha=!0),this.productionMode=e.production||!1,!this.container)return this.productionMode||console.warn("You must specify a valid container ID"),void(this._onErrorCallback&&this._onErrorCallback());this._init()}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,(function(e,t){"use strict";var i=[],n=e.document,r=Object.getPrototypeOf,o=i.slice,s=i.concat,a=i.push,l=i.indexOf,u={},c=u.toString,d=u.hasOwnProperty,h=d.toString,p=h.call(Object),f={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},m=function(e){return null!=e&&e===e.window},v={type:!0,src:!0,nonce:!0,noModule:!0};function y(e,t,i){var r,o,s=(i=i||n).createElement("script");if(s.text=e,t)for(r in v)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&s.setAttribute(r,o);i.head.appendChild(s).parentNode.removeChild(s)}function _(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?u[c.call(e)]||"object":typeof e}var x="3.4.1",b=function(e,t){return new b.fn.init(e,t)},w=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function T(e){var t=!!e&&"length"in e&&e.length,i=_(e);return!g(e)&&!m(e)&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}b.fn=b.prototype={jquery:x,constructor:b,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return b.each(this,e)},map:function(e){return this.pushStack(b.map(this,(function(t,i){return e.call(t,i,t)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:i.sort,splice:i.splice},b.extend=b.fn.extend=function(){var e,t,i,n,r,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||g(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=e[t],"__proto__"!==t&&s!==n&&(u&&n&&(b.isPlainObject(n)||(r=Array.isArray(n)))?(i=s[t],o=r&&!Array.isArray(i)?[]:r||b.isPlainObject(i)?i:{},r=!1,s[t]=b.extend(u,o,n)):void 0!==n&&(s[t]=n));return s},b.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==c.call(e)||(t=r(e))&&("function"!=typeof(i=d.call(t,"constructor")&&t.constructor)||h.call(i)!==p))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){y(e,{nonce:t&&t.nonce})},each:function(e,t){var i,n=0;if(T(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},trim:function(e){return null==e?"":(e+"").replace(w,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(T(Object(e))?b.merge(i,"string"==typeof e?[e]:e):a.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:l.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,r=e.length;n<i;n++)e[r++]=t[n];return e.length=r,e},grep:function(e,t,i){for(var n=[],r=0,o=e.length,s=!i;r<o;r++)!t(e[r],r)!==s&&n.push(e[r]);return n},map:function(e,t,i){var n,r,o=0,a=[];if(T(e))for(n=e.length;o<n;o++)null!=(r=t(e[o],o,i))&&a.push(r);else for(o in e)null!=(r=t(e[o],o,i))&&a.push(r);return s.apply([],a)},guid:1,support:f}),"function"==typeof Symbol&&(b.fn[Symbol.iterator]=i[Symbol.iterator]),b.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){u["[object "+t+"]"]=t.toLowerCase()}));var C=function(e){var t,i,n,r,o,s,a,l,u,c,d,h,p,f,g,m,v,y,_,x="sizzle"+1*new Date,b=e.document,w=0,T=0,C=le(),S=le(),k=le(),P=le(),E=function(e,t){return e===t&&(d=!0),0},A={}.hasOwnProperty,D=[],R=D.pop,M=D.push,O=D.push,L=D.slice,N=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},$="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",I="[\\x20\\t\\r\\n\\f]",j="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",F="\\["+I+"*("+j+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+I+"*\\]",B=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",H=new RegExp(I+"+","g"),z=new RegExp("^"+I+"+|((?:^|[^\\\\])(?:\\\\.)*)"+I+"+$","g"),q=new RegExp("^"+I+"*,"+I+"*"),U=new RegExp("^"+I+"*([>+~]|"+I+")"+I+"*"),W=new RegExp(I+"|>"),V=new RegExp(B),X=new RegExp("^"+j+"$"),Y={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+I+"*(even|odd|(([+-]|)(\\d*)n|)"+I+"*(?:([+-]|)"+I+"*(\\d+)|))"+I+"*\\)|)","i"),bool:new RegExp("^(?:"+$+")$","i"),needsContext:new RegExp("^"+I+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+I+"*((?:-\\d)?\\d*)"+I+"*\\)|)(?=[^-]|$)","i")},G=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+I+"?|("+I+")|.)","ig"),ie=function(e,t,i){var n="0x"+t-65536;return n!=n||i?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},ne=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){h()},se=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{O.apply(D=L.call(b.childNodes),b.childNodes),D[b.childNodes.length].nodeType}catch(t){O={apply:D.length?function(e,t){M.apply(e,L.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function ae(e,t,n,r){var o,a,u,c,d,f,v,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return n;if(!r&&((t?t.ownerDocument||t:b)!==p&&h(t),t=t||p,g)){if(11!==w&&(d=Z.exec(e)))if(o=d[1]){if(9===w){if(!(u=t.getElementById(o)))return n;if(u.id===o)return n.push(u),n}else if(y&&(u=y.getElementById(o))&&_(t,u)&&u.id===o)return n.push(u),n}else{if(d[2])return O.apply(n,t.getElementsByTagName(e)),n;if((o=d[3])&&i.getElementsByClassName&&t.getElementsByClassName)return O.apply(n,t.getElementsByClassName(o)),n}if(i.qsa&&!P[e+" "]&&(!m||!m.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===w&&W.test(e)){for((c=t.getAttribute("id"))?c=c.replace(ne,re):t.setAttribute("id",c=x),a=(f=s(e)).length;a--;)f[a]="#"+c+" "+_e(f[a]);v=f.join(","),y=ee.test(e)&&ve(t.parentNode)||t}try{return O.apply(n,y.querySelectorAll(v)),n}catch(t){P(e,!0)}finally{c===x&&t.removeAttribute("id")}}}return l(e.replace(z,"$1"),t,n,r)}function le(){var e=[];return function t(i,r){return e.push(i+" ")>n.cacheLength&&delete t[e.shift()],t[i+" "]=r}}function ue(e){return e[x]=!0,e}function ce(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var i=e.split("|"),r=i.length;r--;)n.attrHandle[i[r]]=t}function he(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var i=t.nodeName.toLowerCase();return("input"===i||"button"===i)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ue((function(t){return t=+t,ue((function(i,n){for(var r,o=e([],i.length,t),s=o.length;s--;)i[r=o[s]]&&(i[r]=!(n[r]=i[r]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in i=ae.support={},o=ae.isXML=function(e){var t=e.namespaceURI,i=(e.ownerDocument||e).documentElement;return!G.test(t||i&&i.nodeName||"HTML")},h=ae.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:b;return s!==p&&9===s.nodeType&&s.documentElement&&(f=(p=s).documentElement,g=!o(p),b!==p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",oe,!1):r.attachEvent&&r.attachEvent("onunload",oe)),i.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),i.getElementsByTagName=ce((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),i.getElementsByClassName=J.test(p.getElementsByClassName),i.getById=ce((function(e){return f.appendChild(e).id=x,!p.getElementsByName||!p.getElementsByName(x).length})),i.getById?(n.filter.ID=function(e){var t=e.replace(te,ie);return function(e){return e.getAttribute("id")===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var i=t.getElementById(e);return i?[i]:[]}}):(n.filter.ID=function(e){var t=e.replace(te,ie);return function(e){var i=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return i&&i.value===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var i,n,r,o=t.getElementById(e);if(o){if((i=o.getAttributeNode("id"))&&i.value===e)return[o];for(r=t.getElementsByName(e),n=0;o=r[n++];)if((i=o.getAttributeNode("id"))&&i.value===e)return[o]}return[]}}),n.find.TAG=i.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):i.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;i=o[r++];)1===i.nodeType&&n.push(i);return n}return o},n.find.CLASS=i.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(i.qsa=J.test(p.querySelectorAll))&&(ce((function(e){f.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+I+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+I+"*(?:value|"+$+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+I+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(i.matchesSelector=J.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ce((function(e){i.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",B)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=J.test(f.compareDocumentPosition),_=t||J.test(f.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},E=t?function(e,t){if(e===t)return d=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!i.sortDetached&&t.compareDocumentPosition(e)===n?e===p||e.ownerDocument===b&&_(b,e)?-1:t===p||t.ownerDocument===b&&_(b,t)?1:c?N(c,e)-N(c,t):0:4&n?-1:1)}:function(e,t){if(e===t)return d=!0,0;var i,n=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e===p?-1:t===p?1:r?-1:o?1:c?N(c,e)-N(c,t):0;if(r===o)return he(e,t);for(i=e;i=i.parentNode;)s.unshift(i);for(i=t;i=i.parentNode;)a.unshift(i);for(;s[n]===a[n];)n++;return n?he(s[n],a[n]):s[n]===b?-1:a[n]===b?1:0}),p},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&h(e),i.matchesSelector&&g&&!P[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var n=y.call(e,t);if(n||i.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){P(t,!0)}return 0<ae(t,p,null,[e]).length},ae.contains=function(e,t){return(e.ownerDocument||e)!==p&&h(e),_(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!==p&&h(e);var r=n.attrHandle[t.toLowerCase()],o=r&&A.call(n.attrHandle,t.toLowerCase())?r(e,t,!g):void 0;return void 0!==o?o:i.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},ae.escape=function(e){return(e+"").replace(ne,re)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,n=[],r=0,o=0;if(d=!i.detectDuplicates,c=!i.sortStable&&e.slice(0),e.sort(E),d){for(;t=e[o++];)t===e[o]&&(r=n.push(o));for(;r--;)e.splice(n[r],1)}return c=null,e},r=ae.getText=function(e){var t,i="",n=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[n++];)i+=r(t);return i},(n=ae.selectors={cacheLength:50,createPseudo:ue,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ie),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ie),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&V.test(i)&&(t=s(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ie).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|"+I+")"+e+"("+I+"|$)"))&&C(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,i){return function(n){var r=ae.attr(n,e);return null==r?"!="===t:!t||(r+="","="===t?r===i:"!="===t?r!==i:"^="===t?i&&0===r.indexOf(i):"*="===t?i&&-1<r.indexOf(i):"$="===t?i&&r.slice(-i.length)===i:"~="===t?-1<(" "+r.replace(H," ")+" ").indexOf(i):"|="===t&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,i,n,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===n&&0===r?function(e){return!!e.parentNode}:function(t,i,l){var u,c,d,h,p,f,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,_=!1;if(m){if(o){for(;g;){for(h=t;h=h[g];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=g="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?m.firstChild:m.lastChild],s&&y){for(_=(p=(u=(c=(d=(h=m)[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===w&&u[1])&&u[2],h=p&&m.childNodes[p];h=++p&&h&&h[g]||(_=p=0)||f.pop();)if(1===h.nodeType&&++_&&h===t){c[e]=[w,p,_];break}}else if(y&&(_=p=(u=(c=(d=(h=t)[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===w&&u[1]),!1===_)for(;(h=++p&&h&&h[g]||(_=p=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++_||(y&&((c=(d=h[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]=[w,_]),h!==t)););return(_-=r)===n||_%n==0&&0<=_/n}}},PSEUDO:function(e,t){var i,r=n.pseudos[e]||n.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return r[x]?r(t):1<r.length?(i=[e,e,"",t],n.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,i){for(var n,o=r(e,t),s=o.length;s--;)e[n=N(e,o[s])]=!(i[n]=o[s])})):function(e){return r(e,0,i)}):r}},pseudos:{not:ue((function(e){var t=[],i=[],n=a(e.replace(z,"$1"));return n[x]?ue((function(e,t,i,r){for(var o,s=n(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))})):function(e,r,o){return t[0]=e,n(t,null,o,i),t[0]=null,!i.pop()}})),has:ue((function(e){return function(t){return 0<ae(e,t).length}})),contains:ue((function(e){return e=e.replace(te,ie),function(t){return-1<(t.textContent||r(t)).indexOf(e)}})),lang:ue((function(e){return X.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ie).toLowerCase(),function(t){var i;do{if(i=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(i=i.toLowerCase())===e||0===i.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!n.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,i){return[i<0?i+t:i]})),even:me((function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e})),odd:me((function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e})),lt:me((function(e,t,i){for(var n=i<0?i+t:t<i?t:i;0<=--n;)e.push(n);return e})),gt:me((function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e}))}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})n.pseudos[t]=fe(t);function ye(){}function _e(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function xe(e,t,i){var n=t.dir,r=t.next,o=r||n,s=i&&"parentNode"===o,a=T++;return t.first?function(t,i,r){for(;t=t[n];)if(1===t.nodeType||s)return e(t,i,r);return!1}:function(t,i,l){var u,c,d,h=[w,a];if(l){for(;t=t[n];)if((1===t.nodeType||s)&&e(t,i,l))return!0}else for(;t=t[n];)if(1===t.nodeType||s)if(c=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[n]||t;else{if((u=c[o])&&u[0]===w&&u[1]===a)return h[2]=u[2];if((c[o]=h)[2]=e(t,i,l))return!0}return!1}}function be(e){return 1<e.length?function(t,i,n){for(var r=e.length;r--;)if(!e[r](t,i,n))return!1;return!0}:e[0]}function we(e,t,i,n,r){for(var o,s=[],a=0,l=e.length,u=null!=t;a<l;a++)(o=e[a])&&(i&&!i(o,n,r)||(s.push(o),u&&t.push(a)));return s}function Te(e,t,i,n,r,o){return n&&!n[x]&&(n=Te(n)),r&&!r[x]&&(r=Te(r,o)),ue((function(o,s,a,l){var u,c,d,h=[],p=[],f=s.length,g=o||function(e,t,i){for(var n=0,r=t.length;n<r;n++)ae(e,t[n],i);return i}(t||"*",a.nodeType?[a]:a,[]),m=!e||!o&&t?g:we(g,h,e,a,l),v=i?r||(o?e:f||n)?[]:s:m;if(i&&i(m,v,a,l),n)for(u=we(v,p),n(u,[],a,l),c=u.length;c--;)(d=u[c])&&(v[p[c]]=!(m[p[c]]=d));if(o){if(r||e){if(r){for(u=[],c=v.length;c--;)(d=v[c])&&u.push(m[c]=d);r(null,v=[],u,l)}for(c=v.length;c--;)(d=v[c])&&-1<(u=r?N(o,d):h[c])&&(o[u]=!(s[u]=d))}}else v=we(v===s?v.splice(f,v.length):v),r?r(null,s,v,l):O.apply(s,v)}))}function Ce(e){for(var t,i,r,o=e.length,s=n.relative[e[0].type],a=s||n.relative[" "],l=s?1:0,c=xe((function(e){return e===t}),a,!0),d=xe((function(e){return-1<N(t,e)}),a,!0),h=[function(e,i,n){var r=!s&&(n||i!==u)||((t=i).nodeType?c(e,i,n):d(e,i,n));return t=null,r}];l<o;l++)if(i=n.relative[e[l].type])h=[xe(be(h),i)];else{if((i=n.filter[e[l].type].apply(null,e[l].matches))[x]){for(r=++l;r<o&&!n.relative[e[r].type];r++);return Te(1<l&&be(h),1<l&&_e(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(z,"$1"),i,l<r&&Ce(e.slice(l,r)),r<o&&Ce(e=e.slice(r)),r<o&&_e(e))}h.push(i)}return be(h)}return ye.prototype=n.filters=n.pseudos,n.setFilters=new ye,s=ae.tokenize=function(e,t){var i,r,o,s,a,l,u,c=S[e+" "];if(c)return t?0:c.slice(0);for(a=e,l=[],u=n.preFilter;a;){for(s in i&&!(r=q.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=U.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(z," ")}),a=a.slice(i.length)),n.filter)!(r=Y[s].exec(a))||u[s]&&!(r=u[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return t?a.length:a?ae.error(e):S(e,l).slice(0)},a=ae.compile=function(e,t){var i,r,o,a,l,c,d=[],f=[],m=k[e+" "];if(!m){for(t||(t=s(e)),i=t.length;i--;)(m=Ce(t[i]))[x]?d.push(m):f.push(m);(m=k(e,(r=f,a=0<(o=d).length,l=0<r.length,c=function(e,t,i,s,c){var d,f,m,v=0,y="0",_=e&&[],x=[],b=u,T=e||l&&n.find.TAG("*",c),C=w+=null==b?1:Math.random()||.1,S=T.length;for(c&&(u=t===p||t||c);y!==S&&null!=(d=T[y]);y++){if(l&&d){for(f=0,t||d.ownerDocument===p||(h(d),i=!g);m=r[f++];)if(m(d,t||p,i)){s.push(d);break}c&&(w=C)}a&&((d=!m&&d)&&v--,e&&_.push(d))}if(v+=y,a&&y!==v){for(f=0;m=o[f++];)m(_,x,t,i);if(e){if(0<v)for(;y--;)_[y]||x[y]||(x[y]=R.call(s));x=we(x)}O.apply(s,x),c&&!e&&0<x.length&&1<v+o.length&&ae.uniqueSort(s)}return c&&(w=C,u=b),_},a?ue(c):c))).selector=e}return m},l=ae.select=function(e,t,i,r){var o,l,u,c,d,h="function"==typeof e&&e,p=!r&&s(e=h.selector||e);if(i=i||[],1===p.length){if(2<(l=p[0]=p[0].slice(0)).length&&"ID"===(u=l[0]).type&&9===t.nodeType&&g&&n.relative[l[1].type]){if(!(t=(n.find.ID(u.matches[0].replace(te,ie),t)||[])[0]))return i;h&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=Y.needsContext.test(e)?0:l.length;o--&&(u=l[o],!n.relative[c=u.type]);)if((d=n.find[c])&&(r=d(u.matches[0].replace(te,ie),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(o,1),!(e=r.length&&_e(l)))return O.apply(i,r),i;break}}return(h||a(e,p))(r,t,!g,i,!t||ee.test(e)&&ve(t.parentNode)||t),i},i.sortStable=x.split("").sort(E).join("")===x,i.detectDuplicates=!!d,h(),i.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),i.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||de($,(function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null})),ae}(e);b.find=C,b.expr=C.selectors,b.expr[":"]=b.expr.pseudos,b.uniqueSort=b.unique=C.uniqueSort,b.text=C.getText,b.isXMLDoc=C.isXML,b.contains=C.contains,b.escapeSelector=C.escape;var S=function(e,t,i){for(var n=[],r=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&b(e).is(i))break;n.push(e)}return n},k=function(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i},P=b.expr.match.needsContext;function E(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(e,t,i){return g(t)?b.grep(e,(function(e,n){return!!t.call(e,n,e)!==i})):t.nodeType?b.grep(e,(function(e){return e===t!==i})):"string"!=typeof t?b.grep(e,(function(e){return-1<l.call(t,e)!==i})):b.filter(t,e,i)}b.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?b.find.matchesSelector(n,e)?[n]:[]:b.find.matches(e,b.grep(t,(function(e){return 1===e.nodeType})))},b.fn.extend({find:function(e){var t,i,n=this.length,r=this;if("string"!=typeof e)return this.pushStack(b(e).filter((function(){for(t=0;t<n;t++)if(b.contains(r[t],this))return!0})));for(i=this.pushStack([]),t=0;t<n;t++)b.find(e,r[t],i);return 1<n?b.uniqueSort(i):i},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,"string"==typeof e&&P.test(e)?b(e):e||[],!1).length}});var R,M=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(b.fn.init=function(e,t,i){var r,o;if(!e)return this;if(i=i||R,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:M.exec(e))||!r[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof b?t[0]:t,b.merge(this,b.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:n,!0)),A.test(r[1])&&b.isPlainObject(t))for(r in t)g(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=n.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==i.ready?i.ready(e):e(b):b.makeArray(e,this)}).prototype=b.fn,R=b(n);var O=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function N(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}b.fn.extend({has:function(e){var t=b(e,this),i=t.length;return this.filter((function(){for(var e=0;e<i;e++)if(b.contains(this,t[e]))return!0}))},closest:function(e,t){var i,n=0,r=this.length,o=[],s="string"!=typeof e&&b(e);if(!P.test(e))for(;n<r;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(s?-1<s.index(i):1===i.nodeType&&b.find.matchesSelector(i,e))){o.push(i);break}return this.pushStack(1<o.length?b.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?l.call(b(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(b.uniqueSort(b.merge(this.get(),b(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,i){return S(e,"parentNode",i)},next:function(e){return N(e,"nextSibling")},prev:function(e){return N(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,i){return S(e,"nextSibling",i)},prevUntil:function(e,t,i){return S(e,"previousSibling",i)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(E(e,"template")&&(e=e.content||e),b.merge([],e.childNodes))}},(function(e,t){b.fn[e]=function(i,n){var r=b.map(this,t,i);return"Until"!==e.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=b.filter(n,r)),1<this.length&&(L[e]||b.uniqueSort(r),O.test(e)&&r.reverse()),this.pushStack(r)}}));var $=/[^\x20\t\r\n\f]+/g;function I(e){return e}function j(e){throw e}function F(e,t,i,n){var r;try{e&&g(r=e.promise)?r.call(e).done(t).fail(i):e&&g(r=e.then)?r.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}b.Callbacks=function(e){var t,i;e="string"==typeof e?(t=e,i={},b.each(t.match($)||[],(function(e,t){i[t]=!0})),i):b.extend({},e);var n,r,o,s,a=[],l=[],u=-1,c=function(){for(s=s||e.once,o=n=!0;l.length;u=-1)for(r=l.shift();++u<a.length;)!1===a[u].apply(r[0],r[1])&&e.stopOnFalse&&(u=a.length,r=!1);e.memory||(r=!1),n=!1,s&&(a=r?[]:"")},d={add:function(){return a&&(r&&!n&&(u=a.length-1,l.push(r)),function t(i){b.each(i,(function(i,n){g(n)?e.unique&&d.has(n)||a.push(n):n&&n.length&&"string"!==_(n)&&t(n)}))}(arguments),r&&!n&&c()),this},remove:function(){return b.each(arguments,(function(e,t){for(var i;-1<(i=b.inArray(t,a,i));)a.splice(i,1),i<=u&&u--})),this},has:function(e){return e?-1<b.inArray(e,a):0<a.length},empty:function(){return a&&(a=[]),this},disable:function(){return s=l=[],a=r="",this},disabled:function(){return!a},lock:function(){return s=l=[],r||n||(a=r=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],l.push(t),n||c()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!o}};return d},b.extend({Deferred:function(t){var i=[["notify","progress",b.Callbacks("memory"),b.Callbacks("memory"),2],["resolve","done",b.Callbacks("once memory"),b.Callbacks("once memory"),0,"resolved"],["reject","fail",b.Callbacks("once memory"),b.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return b.Deferred((function(t){b.each(i,(function(i,n){var r=g(e[n[4]])&&e[n[4]];o[n[1]]((function(){var e=r&&r.apply(this,arguments);e&&g(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[n[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(t,n,r){var o=0;function s(t,i,n,r){return function(){var a=this,l=arguments,u=function(){var e,u;if(!(t<o)){if((e=n.apply(a,l))===i.promise())throw new TypeError("Thenable self-resolution");u=e&&("object"==typeof e||"function"==typeof e)&&e.then,g(u)?r?u.call(e,s(o,i,I,r),s(o,i,j,r)):(o++,u.call(e,s(o,i,I,r),s(o,i,j,r),s(o,i,I,i.notifyWith))):(n!==I&&(a=void 0,l=[e]),(r||i.resolveWith)(a,l))}},c=r?u:function(){try{u()}catch(e){b.Deferred.exceptionHook&&b.Deferred.exceptionHook(e,c.stackTrace),o<=t+1&&(n!==j&&(a=void 0,l=[e]),i.rejectWith(a,l))}};t?c():(b.Deferred.getStackHook&&(c.stackTrace=b.Deferred.getStackHook()),e.setTimeout(c))}}return b.Deferred((function(e){i[0][3].add(s(0,e,g(r)?r:I,e.notifyWith)),i[1][3].add(s(0,e,g(t)?t:I)),i[2][3].add(s(0,e,g(n)?n:j))})).promise()},promise:function(e){return null!=e?b.extend(e,r):r}},o={};return b.each(i,(function(e,t){var s=t[2],a=t[5];r[t[1]]=s.add,a&&s.add((function(){n=a}),i[3-e][2].disable,i[3-e][3].disable,i[0][2].lock,i[0][3].lock),s.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=s.fireWith})),r.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,i=t,n=Array(i),r=o.call(arguments),s=b.Deferred(),a=function(e){return function(i){n[e]=this,r[e]=1<arguments.length?o.call(arguments):i,--t||s.resolveWith(n,r)}};if(t<=1&&(F(e,s.done(a(i)).resolve,s.reject,!t),"pending"===s.state()||g(r[i]&&r[i].then)))return s.then();for(;i--;)F(r[i],a(i),s.reject);return s.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;b.Deferred.exceptionHook=function(t,i){e.console&&e.console.warn&&t&&B.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,i)},b.readyException=function(t){e.setTimeout((function(){throw t}))};var H=b.Deferred();function z(){n.removeEventListener("DOMContentLoaded",z),e.removeEventListener("load",z),b.ready()}b.fn.ready=function(e){return H.then(e).catch((function(e){b.readyException(e)})),this},b.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--b.readyWait:b.isReady)||(b.isReady=!0)!==e&&0<--b.readyWait||H.resolveWith(n,[b])}}),b.ready.then=H.then,"complete"===n.readyState||"loading"!==n.readyState&&!n.documentElement.doScroll?e.setTimeout(b.ready):(n.addEventListener("DOMContentLoaded",z),e.addEventListener("load",z));var q=function(e,t,i,n,r,o,s){var a=0,l=e.length,u=null==i;if("object"===_(i))for(a in r=!0,i)q(e,t,a,i[a],!0,o,s);else if(void 0!==n&&(r=!0,g(n)||(s=!0),u&&(s?(t.call(e,n),t=null):(u=t,t=function(e,t,i){return u.call(b(e),i)})),t))for(;a<l;a++)t(e[a],i,s?n:n.call(e[a],a,t(e[a],i)));return r?e:u?t.call(e):l?t(e[0],i):o},U=/^-ms-/,W=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function X(e){return e.replace(U,"ms-").replace(W,V)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function G(){this.expando=b.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,r=this.cache(e);if("string"==typeof t)r[X(t)]=i;else for(n in t)r[X(n)]=t[n];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(X):(t=X(t))in n?[t]:t.match($)||[]).length;for(;i--;)delete n[t[i]]}(void 0===t||b.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!b.isEmptyObject(t)}};var K=new G,Q=new G,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function ee(e,t,i){var n,r;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i="true"===(r=i)||"false"!==r&&("null"===r?null:r===+r+""?+r:J.test(r)?JSON.parse(r):r)}catch(e){}Q.set(e,t,i)}else i=void 0;return i}b.extend({hasData:function(e){return Q.hasData(e)||K.hasData(e)},data:function(e,t,i){return Q.access(e,t,i)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,i){return K.access(e,t,i)},_removeData:function(e,t){K.remove(e,t)}}),b.fn.extend({data:function(e,t){var i,n,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=Q.get(o),1===o.nodeType&&!K.get(o,"hasDataAttrs"))){for(i=s.length;i--;)s[i]&&0===(n=s[i].name).indexOf("data-")&&(n=X(n.slice(5)),ee(o,n,r[n]));K.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){Q.set(this,e)})):q(this,(function(t){var i;if(o&&void 0===t)return void 0!==(i=Q.get(o,e))?i:void 0!==(i=ee(o,e))?i:void 0;this.each((function(){Q.set(this,e,t)}))}),null,t,1<arguments.length,null,!0)},removeData:function(e){return this.each((function(){Q.remove(this,e)}))}}),b.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=K.get(e,t),i&&(!n||Array.isArray(i)?n=K.access(e,t,b.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=b.queue(e,t),n=i.length,r=i.shift(),o=b._queueHooks(e,t);"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===t&&i.unshift("inprogress"),delete o.stop,r.call(e,(function(){b.dequeue(e,t)}),o)),!n&&o&&o.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return K.get(e,i)||K.access(e,i,{empty:b.Callbacks("once memory").add((function(){K.remove(e,[t+"queue",i])}))})}}),b.fn.extend({queue:function(e,t){var i=2;return"string"!=typeof e&&(t=e,e="fx",i--),arguments.length<i?b.queue(this[0],e):void 0===t?this:this.each((function(){var i=b.queue(this,e,t);b._queueHooks(this,e),"fx"===e&&"inprogress"!==i[0]&&b.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){b.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,r=b.Deferred(),o=this,s=this.length,a=function(){--n||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(i=K.get(o[s],e+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],re=n.documentElement,oe=function(e){return b.contains(e.ownerDocument,e)},se={composed:!0};re.getRootNode&&(oe=function(e){return b.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===b.css(e,"display")},le=function(e,t,i,n){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in r=i.apply(e,n||[]),t)e.style[o]=s[o];return r};function ue(e,t,i,n){var r,o,s=20,a=n?function(){return n.cur()}:function(){return b.css(e,t,"")},l=a(),u=i&&i[3]||(b.cssNumber[t]?"":"px"),c=e.nodeType&&(b.cssNumber[t]||"px"!==u&&+l)&&ie.exec(b.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;s--;)b.style(e,t,c+u),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),c/=o;c*=2,b.style(e,t,c+u),i=i||[]}return i&&(c=+c||+l||0,r=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=c,n.end=r)),r}var ce={};function de(e,t){for(var i,n,r,o,s,a,l,u=[],c=0,d=e.length;c<d;c++)(n=e[c]).style&&(i=n.style.display,t?("none"===i&&(u[c]=K.get(n,"display")||null,u[c]||(n.style.display="")),""===n.style.display&&ae(n)&&(u[c]=(l=s=o=void 0,s=(r=n).ownerDocument,a=r.nodeName,(l=ce[a])||(o=s.body.appendChild(s.createElement(a)),l=b.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),ce[a]=l)))):"none"!==i&&(u[c]="none",K.set(n,"display",i)));for(c=0;c<d;c++)null!=u[c]&&(e[c].style.display=u[c]);return e}b.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ae(this)?b(this).show():b(this).hide()}))}});var he=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var i;return i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&E(e,t)?b.merge([e],i):i}function ve(e,t){for(var i=0,n=e.length;i<n;i++)K.set(e[i],"globalEval",!t||K.get(t[i],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var ye,_e,xe=/<|&#?\w+;/;function be(e,t,i,n,r){for(var o,s,a,l,u,c,d=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((o=e[p])||0===o)if("object"===_(o))b.merge(h,o.nodeType?[o]:o);else if(xe.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(pe.exec(o)||["",""])[1].toLowerCase(),l=ge[a]||ge._default,s.innerHTML=l[1]+b.htmlPrefilter(o)+l[2],c=l[0];c--;)s=s.lastChild;b.merge(h,s.childNodes),(s=d.firstChild).textContent=""}else h.push(t.createTextNode(o));for(d.textContent="",p=0;o=h[p++];)if(n&&-1<b.inArray(o,n))r&&r.push(o);else if(u=oe(o),s=me(d.appendChild(o),"script"),u&&ve(s),i)for(c=0;o=s[c++];)fe.test(o.type||"")&&i.push(o);return d}ye=n.createDocumentFragment().appendChild(n.createElement("div")),(_e=n.createElement("input")).setAttribute("type","radio"),_e.setAttribute("checked","checked"),_e.setAttribute("name","t"),ye.appendChild(_e),f.checkClone=ye.cloneNode(!0).cloneNode(!0).lastChild.checked,ye.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!ye.cloneNode(!0).lastChild.defaultValue;var we=/^key/,Te=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function ke(){return!1}function Pe(e,t){return e===function(){try{return n.activeElement}catch(e){}}()==("focus"===t)}function Ee(e,t,i,n,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof i&&(n=n||i,i=void 0),t)Ee(e,a,i,n,t[a],o);return e}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),!1===r)r=ke;else if(!r)return e;return 1===o&&(s=r,(r=function(e){return b().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=b.guid++)),e.each((function(){b.event.add(this,t,r,n,i)}))}function Ae(e,t,i){i?(K.set(e,t,!1),b.event.add(e,t,{namespace:!1,handler:function(e){var n,r,s=K.get(this,t);if(1&e.isTrigger&&this[t]){if(s.length)(b.event.special[t]||{}).delegateType&&e.stopPropagation();else if(s=o.call(arguments),K.set(this,t,s),n=i(this,t),this[t](),s!==(r=K.get(this,t))||n?K.set(this,t,!1):r={},s!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else s.length&&(K.set(this,t,{value:b.event.trigger(b.extend(s[0],b.Event.prototype),s.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,t)&&b.event.add(e,t,Se)}b.event={global:{},add:function(e,t,i,n,r){var o,s,a,l,u,c,d,h,p,f,g,m=K.get(e);if(m)for(i.handler&&(i=(o=i).handler,r=o.selector),r&&b.find.matchesSelector(re,r),i.guid||(i.guid=b.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==b&&b.event.triggered!==t.type?b.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match($)||[""]).length;u--;)p=g=(a=Ce.exec(t[u])||[])[1],f=(a[2]||"").split(".").sort(),p&&(d=b.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=b.event.special[p]||{},c=b.extend({type:p,origType:g,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&b.expr.match.needsContext.test(r),namespace:f.join(".")},o),(h=l[p])||((h=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,n,f,s)||e.addEventListener&&e.addEventListener(p,s)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=i.guid)),r?h.splice(h.delegateCount++,0,c):h.push(c),b.event.global[p]=!0)},remove:function(e,t,i,n,r){var o,s,a,l,u,c,d,h,p,f,g,m=K.hasData(e)&&K.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match($)||[""]).length;u--;)if(p=g=(a=Ce.exec(t[u])||[])[1],f=(a[2]||"").split(".").sort(),p){for(d=b.event.special[p]||{},h=l[p=(n?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=h.length;o--;)c=h[o],!r&&g!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,d.remove&&d.remove.call(e,c));s&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,f,m.handle)||b.removeEvent(e,p,m.handle),delete l[p])}else for(p in l)b.event.remove(e,p+t[u],i,n,!0);b.isEmptyObject(l)&&K.remove(e,"handle events")}},dispatch:function(e){var t,i,n,r,o,s,a=b.event.fix(e),l=new Array(arguments.length),u=(K.get(this,"events")||{})[a.type]||[],c=b.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=b.event.handlers.call(this,a,u),t=0;(r=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,i=0;(o=r.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==o.namespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(n=((b.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(a.result=n)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var i,n,r,o,s,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],s={},i=0;i<l;i++)void 0===s[r=(n=t[i]).selector+" "]&&(s[r]=n.needsContext?-1<b(r,this).index(u):b.find(r,this,null,[u]).length),s[r]&&o.push(n);o.length&&a.push({elem:u,handlers:o})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(b.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[b.expando]?e:new b.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return he.test(t.type)&&t.click&&E(t,"input")&&Ae(t,"click",Se),!1},trigger:function(e){var t=this||e;return he.test(t.type)&&t.click&&E(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return he.test(t.type)&&t.click&&E(t,"input")&&K.get(t,"click")||E(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},b.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},b.Event=function(e,t){if(!(this instanceof b.Event))return new b.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&b.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[b.expando]=!0},b.Event.prototype={constructor:b.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},b.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},b.event.addProp),b.each({focus:"focusin",blur:"focusout"},(function(e,t){b.event.special[e]={setup:function(){return Ae(this,e,Pe),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}})),b.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||b.contains(this,n))||(e.type=r.origType,i=r.handler.apply(this,arguments),e.type=t),i}}})),b.fn.extend({on:function(e,t,i,n){return Ee(this,e,t,i,n)},one:function(e,t,i,n){return Ee(this,e,t,i,n,1)},off:function(e,t,i){var n,r;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,b(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=ke),this.each((function(){b.event.remove(this,e,i,t)}))}});var De=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Re=/<script|<style|<link/i,Me=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e,t){return E(e,"table")&&E(11!==t.nodeType?t:t.firstChild,"tr")&&b(e).children("tbody")[0]||e}function Ne(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function $e(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ie(e,t){var i,n,r,o,s,a,l,u;if(1===t.nodeType){if(K.hasData(e)&&(o=K.access(e),s=K.set(t,o),u=o.events))for(r in delete s.handle,s.events={},u)for(i=0,n=u[r].length;i<n;i++)b.event.add(t,r,u[r][i]);Q.hasData(e)&&(a=Q.access(e),l=b.extend({},a),Q.set(t,l))}}function je(e,t,i,n){t=s.apply([],t);var r,o,a,l,u,c,d=0,h=e.length,p=h-1,m=t[0],v=g(m);if(v||1<h&&"string"==typeof m&&!f.checkClone&&Me.test(m))return e.each((function(r){var o=e.eq(r);v&&(t[0]=m.call(this,r,o.html())),je(o,t,i,n)}));if(h&&(o=(r=be(t,e[0].ownerDocument,!1,e,n)).firstChild,1===r.childNodes.length&&(r=o),o||n)){for(l=(a=b.map(me(r,"script"),Ne)).length;d<h;d++)u=r,d!==p&&(u=b.clone(u,!0,!0),l&&b.merge(a,me(u,"script"))),i.call(e[d],u,d);if(l)for(c=a[a.length-1].ownerDocument,b.map(a,$e),d=0;d<l;d++)u=a[d],fe.test(u.type||"")&&!K.access(u,"globalEval")&&b.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?b._evalUrl&&!u.noModule&&b._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):y(u.textContent.replace(Oe,""),u,c))}return e}function Fe(e,t,i){for(var n,r=t?b.filter(t,e):e,o=0;null!=(n=r[o]);o++)i||1!==n.nodeType||b.cleanData(me(n)),n.parentNode&&(i&&oe(n)&&ve(me(n,"script")),n.parentNode.removeChild(n));return e}b.extend({htmlPrefilter:function(e){return e.replace(De,"<$1></$2>")},clone:function(e,t,i){var n,r,o,s,a,l,u,c=e.cloneNode(!0),d=oe(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(s=me(c),n=0,r=(o=me(e)).length;n<r;n++)a=o[n],"input"===(u=(l=s[n]).nodeName.toLowerCase())&&he.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(t)if(i)for(o=o||me(e),s=s||me(c),n=0,r=o.length;n<r;n++)Ie(o[n],s[n]);else Ie(e,c);return 0<(s=me(c,"script")).length&&ve(s,!d&&me(e,"script")),c},cleanData:function(e){for(var t,i,n,r=b.event.special,o=0;void 0!==(i=e[o]);o++)if(Y(i)){if(t=i[K.expando]){if(t.events)for(n in t.events)r[n]?b.event.remove(i,n):b.removeEvent(i,n,t.handle);i[K.expando]=void 0}i[Q.expando]&&(i[Q.expando]=void 0)}}}),b.fn.extend({detach:function(e){return Fe(this,e,!0)},remove:function(e){return Fe(this,e)},text:function(e){return q(this,(function(e){return void 0===e?b.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return je(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)}))},prepend:function(){return je(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(b.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return b.clone(this,e,t)}))},html:function(e){return q(this,(function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Re.test(e)&&!ge[(pe.exec(e)||["",""])[1].toLowerCase()]){e=b.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(b.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,(function(t){var i=this.parentNode;b.inArray(this,e)<0&&(b.cleanData(me(this)),i&&i.replaceChild(t,this))}),e)}}),b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){b.fn[e]=function(e){for(var i,n=[],r=b(e),o=r.length-1,s=0;s<=o;s++)i=s===o?this:this.clone(!0),b(r[s])[t](i),a.apply(n,i.get());return this.pushStack(n)}}));var Be=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),He=function(t){var i=t.ownerDocument.defaultView;return i&&i.opener||(i=e),i.getComputedStyle(t)},ze=new RegExp(ne.join("|"),"i");function qe(e,t,i){var n,r,o,s,a=e.style;return(i=i||He(e))&&(""!==(s=i.getPropertyValue(t)||i[t])||oe(e)||(s=b.style(e,t)),!f.pixelBoxStyles()&&Be.test(s)&&ze.test(t)&&(n=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=i.width,a.width=n,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",re.appendChild(u).appendChild(c);var t=e.getComputedStyle(c);r="1%"!==t.top,l=12===i(t.marginLeft),c.style.right="60%",a=36===i(t.right),o=36===i(t.width),c.style.position="absolute",s=12===i(c.offsetWidth/3),re.removeChild(u),c=null}}function i(e){return Math.round(parseFloat(e))}var r,o,s,a,l,u=n.createElement("div"),c=n.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===c.style.backgroundClip,b.extend(f,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),s}}))}();var We=["Webkit","Moz","ms"],Ve=n.createElement("div").style,Xe={};function Ye(e){return b.cssProps[e]||Xe[e]||(e in Ve?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),i=We.length;i--;)if((e=We[i]+t)in Ve)return e}(e)||e)}var Ge=/^(none|table(?!-c[ea]).+)/,Ke=/^--/,Qe={position:"absolute",visibility:"hidden",display:"block"},Je={letterSpacing:"0",fontWeight:"400"};function Ze(e,t,i){var n=ie.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function et(e,t,i,n,r,o){var s="width"===t?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;s<4;s+=2)"margin"===i&&(l+=b.css(e,i+ne[s],!0,r)),n?("content"===i&&(l-=b.css(e,"padding"+ne[s],!0,r)),"margin"!==i&&(l-=b.css(e,"border"+ne[s]+"Width",!0,r))):(l+=b.css(e,"padding"+ne[s],!0,r),"padding"!==i?l+=b.css(e,"border"+ne[s]+"Width",!0,r):a+=b.css(e,"border"+ne[s]+"Width",!0,r));return!n&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))||0),l}function tt(e,t,i){var n=He(e),r=(!f.boxSizingReliable()||i)&&"border-box"===b.css(e,"boxSizing",!1,n),o=r,s=qe(e,t,n),a="offset"+t[0].toUpperCase()+t.slice(1);if(Be.test(s)){if(!i)return s;s="auto"}return(!f.boxSizingReliable()&&r||"auto"===s||!parseFloat(s)&&"inline"===b.css(e,"display",!1,n))&&e.getClientRects().length&&(r="border-box"===b.css(e,"boxSizing",!1,n),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+et(e,t,i||(r?"border":"content"),o,n,s)+"px"}function it(e,t,i,n,r){return new it.prototype.init(e,t,i,n,r)}b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=qe(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=X(t),l=Ke.test(t),u=e.style;if(l||(t=Ye(a)),s=b.cssHooks[t]||b.cssHooks[a],void 0===i)return s&&"get"in s&&void 0!==(r=s.get(e,!1,n))?r:u[t];"string"==(o=typeof i)&&(r=ie.exec(i))&&r[1]&&(i=ue(e,t,r),o="number"),null!=i&&i==i&&("number"!==o||l||(i+=r&&r[3]||(b.cssNumber[a]?"":"px")),f.clearCloneStyle||""!==i||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(i=s.set(e,i,n))||(l?u.setProperty(t,i):u[t]=i))}},css:function(e,t,i,n){var r,o,s,a=X(t);return Ke.test(t)||(t=Ye(a)),(s=b.cssHooks[t]||b.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,i)),void 0===r&&(r=qe(e,t,n)),"normal"===r&&t in Je&&(r=Je[t]),""===i||i?(o=parseFloat(r),!0===i||isFinite(o)?o||0:r):r}}),b.each(["height","width"],(function(e,t){b.cssHooks[t]={get:function(e,i,n){if(i)return!Ge.test(b.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?tt(e,t,n):le(e,Qe,(function(){return tt(e,t,n)}))},set:function(e,i,n){var r,o=He(e),s=!f.scrollboxSize()&&"absolute"===o.position,a=(s||n)&&"border-box"===b.css(e,"boxSizing",!1,o),l=n?et(e,t,n,a,o):0;return a&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-et(e,t,"border",!1,o)-.5)),l&&(r=ie.exec(i))&&"px"!==(r[3]||"px")&&(e.style[t]=i,i=b.css(e,t)),Ze(0,i,l)}}})),b.cssHooks.marginLeft=Ue(f.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(qe(e,"marginLeft"))||e.getBoundingClientRect().left-le(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),b.each({margin:"",padding:"",border:"Width"},(function(e,t){b.cssHooks[e+t]={expand:function(i){for(var n=0,r={},o="string"==typeof i?i.split(" "):[i];n<4;n++)r[e+ne[n]+t]=o[n]||o[n-2]||o[0];return r}},"margin"!==e&&(b.cssHooks[e+t].set=Ze)})),b.fn.extend({css:function(e,t){return q(this,(function(e,t,i){var n,r,o={},s=0;if(Array.isArray(t)){for(n=He(e),r=t.length;s<r;s++)o[t[s]]=b.css(e,t[s],!1,n);return o}return void 0!==i?b.style(e,t,i):b.css(e,t)}),e,t,1<arguments.length)}}),((b.Tween=it).prototype={constructor:it,init:function(e,t,i,n,r,o){this.elem=e,this.prop=i,this.easing=r||b.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=o||(b.cssNumber[i]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,i=it.propHooks[this.prop];return this.options.duration?this.pos=t=b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):it.propHooks._default.set(this),this}}).init.prototype=it.prototype,(it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=b.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):1!==e.elem.nodeType||!b.cssHooks[e.prop]&&null==e.elem.style[Ye(e.prop)]?e.elem[e.prop]=e.now:b.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},b.fx=it.prototype.init,b.fx.step={};var nt,rt,ot,st,at=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ut(){rt&&(!1===n.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(ut):e.setTimeout(ut,b.fx.interval),b.fx.tick())}function ct(){return e.setTimeout((function(){nt=void 0})),nt=Date.now()}function dt(e,t){var i,n=0,r={height:e};for(t=t?1:0;n<4;n+=2-t)r["margin"+(i=ne[n])]=r["padding"+i]=e;return t&&(r.opacity=r.width=e),r}function ht(e,t,i){for(var n,r=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,s=r.length;o<s;o++)if(n=r[o].call(i,t,e))return n}function pt(e,t,i){var n,r,o=0,s=pt.prefilters.length,a=b.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=nt||ct(),i=Math.max(0,u.startTime+u.duration-t),n=1-(i/u.duration||0),o=0,s=u.tweens.length;o<s;o++)u.tweens[o].run(n);return a.notifyWith(e,[u,n,i]),n<1&&s?i:(s||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:b.extend({},t),opts:b.extend(!0,{specialEasing:{},easing:b.easing._default},i),originalProperties:t,originalOptions:i,startTime:nt||ct(),duration:i.duration,tweens:[],createTween:function(t,i){var n=b.Tween(e,u.opts,t,i,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(n),n},stop:function(t){var i=0,n=t?u.tweens.length:0;if(r)return this;for(r=!0;i<n;i++)u.tweens[i].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),c=u.props;for(function(e,t){var i,n,r,o,s;for(i in e)if(r=t[n=X(i)],o=e[i],Array.isArray(o)&&(r=o[1],o=e[i]=o[0]),i!==n&&(e[n]=o,delete e[i]),(s=b.cssHooks[n])&&"expand"in s)for(i in o=s.expand(o),delete e[n],o)i in e||(e[i]=o[i],t[i]=r);else t[n]=r}(c,u.opts.specialEasing);o<s;o++)if(n=pt.prefilters[o].call(u,e,c,u.opts))return g(n.stop)&&(b._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return b.map(c,ht,u),g(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),b.fx.timer(b.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}b.Animation=b.extend(pt,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return ue(i.elem,e,ie.exec(t),i),i}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match($);for(var i,n=0,r=e.length;n<r;n++)i=e[n],pt.tweeners[i]=pt.tweeners[i]||[],pt.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,r,o,s,a,l,u,c,d="width"in t||"height"in t,h=this,p={},f=e.style,g=e.nodeType&&ae(e),m=K.get(e,"fxshow");for(n in i.queue||(null==(s=b._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,h.always((function(){h.always((function(){s.unqueued--,b.queue(e,"fx").length||s.empty.fire()}))}))),t)if(r=t[n],at.test(r)){if(delete t[n],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[n])continue;g=!0}p[n]=m&&m[n]||b.style(e,n)}if((l=!b.isEmptyObject(t))||!b.isEmptyObject(p))for(n in d&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=m&&m.display)&&(u=K.get(e,"display")),"none"===(c=b.css(e,"display"))&&(u?c=u:(de([e],!0),u=e.style.display||u,c=b.css(e,"display"),de([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===b.css(e,"float")&&(l||(h.done((function(){f.display=u})),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=K.access(e,"fxshow",{display:u}),o&&(m.hidden=!g),g&&de([e],!0),h.done((function(){for(n in g||de([e]),K.remove(e,"fxshow"),p)b.style(e,n,p[n])}))),l=ht(g?m[n]:0,n,h),n in m||(m[n]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),b.speed=function(e,t,i){var n=e&&"object"==typeof e?b.extend({},e):{complete:i||!i&&t||g(e)&&e,duration:e,easing:i&&t||t&&!g(t)&&t};return b.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in b.fx.speeds?n.duration=b.fx.speeds[n.duration]:n.duration=b.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){g(n.old)&&n.old.call(this),n.queue&&b.dequeue(this,n.queue)},n},b.fn.extend({fadeTo:function(e,t,i,n){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(e,t,i,n){var r=b.isEmptyObject(e),o=b.speed(t,i,n),s=function(){var t=pt(this,b.extend({},e),o);(r||K.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,i){var n=function(e){var t=e.stop;delete e.stop,t(i)};return"string"!=typeof e&&(i=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",o=b.timers,s=K.get(this);if(r)s[r]&&s[r].stop&&n(s[r]);else for(r in s)s[r]&&s[r].stop&&lt.test(r)&&n(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(i),t=!1,o.splice(r,1));!t&&i||b.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,i=K.get(this),n=i[e+"queue"],r=i[e+"queueHooks"],o=b.timers,s=n?n.length:0;for(i.finish=!0,b.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete i.finish}))}}),b.each(["toggle","show","hide"],(function(e,t){var i=b.fn[t];b.fn[t]=function(e,n,r){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(dt(t,!0),e,n,r)}})),b.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){b.fn[e]=function(e,i,n){return this.animate(t,e,i,n)}})),b.timers=[],b.fx.tick=function(){var e,t=0,i=b.timers;for(nt=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||b.fx.stop(),nt=void 0},b.fx.timer=function(e){b.timers.push(e),b.fx.start()},b.fx.interval=13,b.fx.start=function(){rt||(rt=!0,ut())},b.fx.stop=function(){rt=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fn.delay=function(t,i){return t=b.fx&&b.fx.speeds[t]||t,i=i||"fx",this.queue(i,(function(i,n){var r=e.setTimeout(i,t);n.stop=function(){e.clearTimeout(r)}}))},ot=n.createElement("input"),st=n.createElement("select").appendChild(n.createElement("option")),ot.type="checkbox",f.checkOn=""!==ot.value,f.optSelected=st.selected,(ot=n.createElement("input")).value="t",ot.type="radio",f.radioValue="t"===ot.value;var ft,gt=b.expr.attrHandle;b.fn.extend({attr:function(e,t){return q(this,b.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each((function(){b.removeAttr(this,e)}))}}),b.extend({attr:function(e,t,i){var n,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?b.prop(e,t,i):(1===o&&b.isXMLDoc(e)||(r=b.attrHooks[t.toLowerCase()]||(b.expr.match.bool.test(t)?ft:void 0)),void 0!==i?null===i?void b.removeAttr(e,t):r&&"set"in r&&void 0!==(n=r.set(e,i,t))?n:(e.setAttribute(t,i+""),i):r&&"get"in r&&null!==(n=r.get(e,t))?n:null==(n=b.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&"radio"===t&&E(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,r=t&&t.match($);if(r&&1===e.nodeType)for(;i=r[n++];)e.removeAttribute(i)}}),ft={set:function(e,t,i){return!1===t?b.removeAttr(e,i):e.setAttribute(i,i),i}},b.each(b.expr.match.bool.source.match(/\w+/g),(function(e,t){var i=gt[t]||b.find.attr;gt[t]=function(e,t,n){var r,o,s=t.toLowerCase();return n||(o=gt[s],gt[s]=r,r=null!=i(e,t,n)?s:null,gt[s]=o),r}}));var mt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function yt(e){return(e.match($)||[]).join(" ")}function _t(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match($)||[]}b.fn.extend({prop:function(e,t){return q(this,b.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each((function(){delete this[b.propFix[e]||e]}))}}),b.extend({prop:function(e,t,i){var n,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&b.isXMLDoc(e)||(t=b.propFix[t]||t,r=b.propHooks[t]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(e,i,t))?n:e[t]=i:r&&"get"in r&&null!==(n=r.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=b.find.attr(e,"tabindex");return t?parseInt(t,10):mt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(b.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),b.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){b.propFix[this.toLowerCase()]=this})),b.fn.extend({addClass:function(e){var t,i,n,r,o,s,a,l=0;if(g(e))return this.each((function(t){b(this).addClass(e.call(this,t,_t(this)))}));if((t=xt(e)).length)for(;i=this[l++];)if(r=_t(i),n=1===i.nodeType&&" "+yt(r)+" "){for(s=0;o=t[s++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");r!==(a=yt(n))&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,n,r,o,s,a,l=0;if(g(e))return this.each((function(t){b(this).removeClass(e.call(this,t,_t(this)))}));if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)for(;i=this[l++];)if(r=_t(i),n=1===i.nodeType&&" "+yt(r)+" "){for(s=0;o=t[s++];)for(;-1<n.indexOf(" "+o+" ");)n=n.replace(" "+o+" "," ");r!==(a=yt(n))&&i.setAttribute("class",a)}return this},toggleClass:function(e,t){var i=typeof e,n="string"===i||Array.isArray(e);return"boolean"==typeof t&&n?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(i){b(this).toggleClass(e.call(this,i,_t(this),t),t)})):this.each((function(){var t,r,o,s;if(n)for(r=0,o=b(this),s=xt(e);t=s[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==i||((t=_t(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))}))},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&-1<(" "+yt(_t(i))+" ").indexOf(t))return!0;return!1}});var bt=/\r/g;b.fn.extend({val:function(e){var t,i,n,r=this[0];return arguments.length?(n=g(e),this.each((function(i){var r;1===this.nodeType&&(null==(r=n?e.call(this,i,b(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=b.map(r,(function(e){return null==e?"":e+""}))),(t=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=b.valHooks[r.type]||b.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(i=t.get(r,"value"))?i:"string"==typeof(i=r.value)?i.replace(bt,""):null==i?"":i:void 0}}),b.extend({valHooks:{option:{get:function(e){var t=b.find.attr(e,"value");return null!=t?t:yt(b.text(e))}},select:{get:function(e){var t,i,n,r=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?o+1:r.length;for(n=o<0?l:s?o:0;n<l;n++)if(((i=r[n]).selected||n===o)&&!i.disabled&&(!i.parentNode.disabled||!E(i.parentNode,"optgroup"))){if(t=b(i).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var i,n,r=e.options,o=b.makeArray(t),s=r.length;s--;)((n=r[s]).selected=-1<b.inArray(b.valHooks.option.get(n),o))&&(i=!0);return i||(e.selectedIndex=-1),o}}}}),b.each(["radio","checkbox"],(function(){b.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<b.inArray(b(e).val(),t)}},f.checkOn||(b.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),f.focusin="onfocusin"in e;var wt=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};b.extend(b.event,{trigger:function(t,i,r,o){var s,a,l,u,c,h,p,f,v=[r||n],y=d.call(t,"type")?t.type:t,_=d.call(t,"namespace")?t.namespace.split("."):[];if(a=f=l=r=r||n,3!==r.nodeType&&8!==r.nodeType&&!wt.test(y+b.event.triggered)&&(-1<y.indexOf(".")&&(y=(_=y.split(".")).shift(),_.sort()),c=y.indexOf(":")<0&&"on"+y,(t=t[b.expando]?t:new b.Event(y,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=_.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+_.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),i=null==i?[t]:b.makeArray(i,[t]),p=b.event.special[y]||{},o||!p.trigger||!1!==p.trigger.apply(r,i))){if(!o&&!p.noBubble&&!m(r)){for(u=p.delegateType||y,wt.test(u+y)||(a=a.parentNode);a;a=a.parentNode)v.push(a),l=a;l===(r.ownerDocument||n)&&v.push(l.defaultView||l.parentWindow||e)}for(s=0;(a=v[s++])&&!t.isPropagationStopped();)f=a,t.type=1<s?u:p.bindType||y,(h=(K.get(a,"events")||{})[t.type]&&K.get(a,"handle"))&&h.apply(a,i),(h=c&&a[c])&&h.apply&&Y(a)&&(t.result=h.apply(a,i),!1===t.result&&t.preventDefault());return t.type=y,o||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(v.pop(),i)||!Y(r)||c&&g(r[y])&&!m(r)&&((l=r[c])&&(r[c]=null),b.event.triggered=y,t.isPropagationStopped()&&f.addEventListener(y,Tt),r[y](),t.isPropagationStopped()&&f.removeEventListener(y,Tt),b.event.triggered=void 0,l&&(r[c]=l)),t.result}},simulate:function(e,t,i){var n=b.extend(new b.Event,i,{type:e,isSimulated:!0});b.event.trigger(n,null,t)}}),b.fn.extend({trigger:function(e,t){return this.each((function(){b.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var i=this[0];if(i)return b.event.trigger(e,t,i,!0)}}),f.focusin||b.each({focus:"focusin",blur:"focusout"},(function(e,t){var i=function(e){b.event.simulate(t,e.target,b.event.fix(e))};b.event.special[t]={setup:function(){var n=this.ownerDocument||this,r=K.access(n,t);r||n.addEventListener(e,i,!0),K.access(n,t,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=K.access(n,t)-1;r?K.access(n,t,r):(n.removeEventListener(e,i,!0),K.remove(n,t))}}}));var Ct=e.location,St=Date.now(),kt=/\?/;b.parseXML=function(t){var i;if(!t||"string"!=typeof t)return null;try{i=(new e.DOMParser).parseFromString(t,"text/xml")}catch(t){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||b.error("Invalid XML: "+t),i};var Pt=/\[\]$/,Et=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;function Rt(e,t,i,n){var r;if(Array.isArray(t))b.each(t,(function(t,r){i||Pt.test(e)?n(e,r):Rt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,i,n)}));else if(i||"object"!==_(t))n(e,t);else for(r in t)Rt(e+"["+r+"]",t[r],i,n)}b.param=function(e,t){var i,n=[],r=function(e,t){var i=g(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,(function(){r(this.name,this.value)}));else for(i in e)Rt(i,e[i],t,r);return n.join("&")},b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=b.prop(this,"elements");return e?b.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!b(this).is(":disabled")&&Dt.test(this.nodeName)&&!At.test(e)&&(this.checked||!he.test(e))})).map((function(e,t){var i=b(this).val();return null==i?null:Array.isArray(i)?b.map(i,(function(e){return{name:t.name,value:e.replace(Et,"\r\n")}})):{name:t.name,value:i.replace(Et,"\r\n")}})).get()}});var Mt=/%20/g,Ot=/#.*$/,Lt=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,$t=/^(?:GET|HEAD)$/,It=/^\/\//,jt={},Ft={},Bt="*/".concat("*"),Ht=n.createElement("a");function zt(e){return function(t,i){"string"!=typeof t&&(i=t,t="*");var n,r=0,o=t.toLowerCase().match($)||[];if(g(i))for(;n=o[r++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(i)):(e[n]=e[n]||[]).push(i)}}function qt(e,t,i,n){var r={},o=e===Ft;function s(a){var l;return r[a]=!0,b.each(e[a]||[],(function(e,a){var u=a(t,i,n);return"string"!=typeof u||o||r[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),s(u),!1)})),l}return s(t.dataTypes[0])||!r["*"]&&s("*")}function Ut(e,t){var i,n,r=b.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((r[i]?e:n||(n={}))[i]=t[i]);return n&&b.extend(!0,e,n),e}Ht.href=Ct.href,b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ut(Ut(e,b.ajaxSettings),t):Ut(b.ajaxSettings,e)},ajaxPrefilter:zt(jt),ajaxTransport:zt(Ft),ajax:function(t,i){"object"==typeof t&&(i=t,t=void 0),i=i||{};var r,o,s,a,l,u,c,d,h,p,f=b.ajaxSetup({},i),g=f.context||f,m=f.context&&(g.nodeType||g.jquery)?b(g):b.event,v=b.Deferred(),y=b.Callbacks("once memory"),_=f.statusCode||{},x={},w={},T="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Nt.exec(s);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)C.always(e[C.status]);else for(t in e)_[t]=[_[t],e[t]];return this},abort:function(e){var t=e||T;return r&&r.abort(t),S(0,t),this}};if(v.promise(C),f.url=((t||f.url||Ct.href)+"").replace(It,Ct.protocol+"//"),f.type=i.method||i.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match($)||[""],null==f.crossDomain){u=n.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=Ht.protocol+"//"+Ht.host!=u.protocol+"//"+u.host}catch(t){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=b.param(f.data,f.traditional)),qt(jt,f,i,C),c)return C;for(h in(d=b.event&&f.global)&&0==b.active++&&b.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!$t.test(f.type),o=f.url.replace(Ot,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Mt,"+")):(p=f.url.slice(o.length),f.data&&(f.processData||"string"==typeof f.data)&&(o+=(kt.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(Lt,"$1"),p=(kt.test(o)?"&":"?")+"_="+St+++p),f.url=o+p),f.ifModified&&(b.lastModified[o]&&C.setRequestHeader("If-Modified-Since",b.lastModified[o]),b.etag[o]&&C.setRequestHeader("If-None-Match",b.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||i.contentType)&&C.setRequestHeader("Content-Type",f.contentType),C.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Bt+"; q=0.01":""):f.accepts["*"]),f.headers)C.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(g,C,f)||c))return C.abort();if(T="abort",y.add(f.complete),C.done(f.success),C.fail(f.error),r=qt(Ft,f,i,C)){if(C.readyState=1,d&&m.trigger("ajaxSend",[C,f]),c)return C;f.async&&0<f.timeout&&(l=e.setTimeout((function(){C.abort("timeout")}),f.timeout));try{c=!1,r.send(x,S)}catch(t){if(c)throw t;S(-1,t)}}else S(-1,"No Transport");function S(t,i,n,a){var u,h,p,x,w,T=i;c||(c=!0,l&&e.clearTimeout(l),r=void 0,s=a||"",C.readyState=0<t?4:0,u=200<=t&&t<300||304===t,n&&(x=function(e,t,i){for(var n,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(r in a)if(a[r]&&a[r].test(n)){l.unshift(r);break}if(l[0]in i)o=l[0];else{for(r in i){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),i[o]}(f,C,n)),x=function(e,t,i,n){var r,o,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(i[e.responseFields[o]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=u[l+" "+o]||u["* "+o]))for(r in u)if((a=r.split(" "))[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[r]:!0!==u[r]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(f,x,C,u),u?(f.ifModified&&((w=C.getResponseHeader("Last-Modified"))&&(b.lastModified[o]=w),(w=C.getResponseHeader("etag"))&&(b.etag[o]=w)),204===t||"HEAD"===f.type?T="nocontent":304===t?T="notmodified":(T=x.state,h=x.data,u=!(p=x.error))):(p=T,!t&&T||(T="error",t<0&&(t=0))),C.status=t,C.statusText=(i||T)+"",u?v.resolveWith(g,[h,T,C]):v.rejectWith(g,[C,T,p]),C.statusCode(_),_=void 0,d&&m.trigger(u?"ajaxSuccess":"ajaxError",[C,f,u?h:p]),y.fireWith(g,[C,T]),d&&(m.trigger("ajaxComplete",[C,f]),--b.active||b.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,i){return b.get(e,t,i,"json")},getScript:function(e,t){return b.get(e,void 0,t,"script")}}),b.each(["get","post"],(function(e,t){b[t]=function(e,i,n,r){return g(i)&&(r=r||n,n=i,i=void 0),b.ajax(b.extend({url:e,type:t,dataType:r,data:i,success:n},b.isPlainObject(e)&&e))}})),b._evalUrl=function(e,t){return b.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){b.globalEval(e,t)}})},b.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=b(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){b(this).wrapInner(e.call(this,t))})):this.each((function(){var t=b(this),i=t.contents();i.length?i.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(i){b(this).wrapAll(t?e.call(this,i):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){b(this).replaceWith(this.childNodes)})),this}}),b.expr.pseudos.hidden=function(e){return!b.expr.pseudos.visible(e)},b.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},b.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},Vt=b.ajaxSettings.xhr();f.cors=!!Vt&&"withCredentials"in Vt,f.ajax=Vt=!!Vt,b.ajaxTransport((function(t){var i,n;if(f.cors||Vt&&!t.crossDomain)return{send:function(r,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);i=function(e){return function(){i&&(i=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Wt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),n=a.onerror=a.ontimeout=i("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout((function(){i&&n()}))},i=i("abort");try{a.send(t.hasContent&&t.data||null)}catch(r){if(i)throw r}},abort:function(){i&&i()}}})),b.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),b.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),b.ajaxTransport("script",(function(e){var t,i;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=b("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",i=function(e){t.remove(),i=null,e&&o("error"===e.type?404:200,e.type)}),n.head.appendChild(t[0])},abort:function(){i&&i()}}}));var Xt,Yt=[],Gt=/(=)\?(?=&|$)|\?\?/;b.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||b.expando+"_"+St++;return this[e]=!0,e}}),b.ajaxPrefilter("json jsonp",(function(t,i,n){var r,o,s,a=!1!==t.jsonp&&(Gt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=g(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Gt,"$1"+r):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||b.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){s=arguments},n.always((function(){void 0===o?b(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=i.jsonpCallback,Yt.push(r)),s&&g(o)&&o(s[0]),s=o=void 0})),"script"})),f.createHTMLDocument=((Xt=n.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xt.childNodes.length),b.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(f.createHTMLDocument?((r=(t=n.implementation.createHTMLDocument("")).createElement("base")).href=n.location.href,t.head.appendChild(r)):t=n),s=!i&&[],(o=A.exec(e))?[t.createElement(o[1])]:(o=be([e],t,s),s&&s.length&&b(s).remove(),b.merge([],o.childNodes)));var r,o,s},b.fn.load=function(e,t,i){var n,r,o,s=this,a=e.indexOf(" ");return-1<a&&(n=yt(e.slice(a)),e=e.slice(0,a)),g(t)?(i=t,t=void 0):t&&"object"==typeof t&&(r="POST"),0<s.length&&b.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){o=arguments,s.html(n?b("<div>").append(b.parseHTML(e)).find(n):e)})).always(i&&function(e,t){s.each((function(){i.apply(this,o||[e.responseText,t,e])}))}),this},b.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){b.fn[t]=function(e){return this.on(t,e)}})),b.expr.pseudos.animated=function(e){return b.grep(b.timers,(function(t){return e===t.elem})).length},b.offset={setOffset:function(e,t,i){var n,r,o,s,a,l,u=b.css(e,"position"),c=b(e),d={};"static"===u&&(e.style.position="relative"),a=c.offset(),o=b.css(e,"top"),l=b.css(e,"left"),("absolute"===u||"fixed"===u)&&-1<(o+l).indexOf("auto")?(s=(n=c.position()).top,r=n.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),g(t)&&(t=t.call(e,i,b.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+r),"using"in t?t.using.call(e,d):c.css(d)}},b.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){b.offset.setOffset(this,e,t)}));var t,i,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],r={top:0,left:0};if("fixed"===b.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===b.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((r=b(e).offset()).top+=b.css(e,"borderTopWidth",!0),r.left+=b.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-b.css(n,"marginTop",!0),left:t.left-r.left-b.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===b.css(e,"position");)e=e.offsetParent;return e||re}))}}),b.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var i="pageYOffset"===t;b.fn[e]=function(n){return q(this,(function(e,n,r){var o;if(m(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[n];o?o.scrollTo(i?o.pageXOffset:r,i?r:o.pageYOffset):e[n]=r}),e,n,arguments.length)}})),b.each(["top","left"],(function(e,t){b.cssHooks[t]=Ue(f.pixelPosition,(function(e,i){if(i)return i=qe(e,t),Be.test(i)?b(e).position()[t]+"px":i}))})),b.each({Height:"height",Width:"width"},(function(e,t){b.each({padding:"inner"+e,content:t,"":"outer"+e},(function(i,n){b.fn[n]=function(r,o){var s=arguments.length&&(i||"boolean"!=typeof r),a=i||(!0===r||!0===o?"margin":"border");return q(this,(function(t,i,r){var o;return m(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?b.css(t,i,a):b.style(t,i,r,a)}),t,s?r:void 0,s)}}))})),b.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){b.fn[t]=function(e,i){return 0<arguments.length?this.on(t,null,e,i):this.trigger(t)}})),b.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),b.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)}}),b.proxy=function(e,t){var i,n,r;if("string"==typeof t&&(i=e[t],t=e,e=i),g(e))return n=o.call(arguments,2),(r=function(){return e.apply(t||this,n.concat(o.call(arguments)))}).guid=e.guid=e.guid||b.guid++,r},b.holdReady=function(e){e?b.readyWait++:b.ready(!0)},b.isArray=Array.isArray,b.parseJSON=JSON.parse,b.nodeName=E,b.isFunction=g,b.isWindow=m,b.camelCase=X,b.type=_,b.now=Date.now,b.isNumeric=function(e){var t=b.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],(function(){return b}));var Kt=e.jQuery,Qt=e.$;return b.noConflict=function(t){return e.$===b&&(e.$=Qt),t&&e.jQuery===b&&(e.jQuery=Kt),b},t||(e.jQuery=e.$=b),b})),
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.7
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Popper=t()}(this,(function(){"use strict";for(var e="undefined"!=typeof window&&"undefined"!=typeof document,t=["Edge","Trident","Firefox"],i=0,n=0;n<t.length;n+=1)if(e&&navigator.userAgent.indexOf(t[n])>=0){i=1;break}var r=e&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),i))}};function o(e){return e&&"[object Function]"==={}.toString.call(e)}function s(e,t){if(1!==e.nodeType)return[];var i=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?i[t]:i}function a(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function l(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=s(e),i=t.overflow,n=t.overflowX,r=t.overflowY;return/(auto|scroll|overlay)/.test(i+r+n)?e:l(a(e))}var u=e&&!(!window.MSInputMethodContext||!document.documentMode),c=e&&/MSIE 10/.test(navigator.userAgent);function d(e){return 11===e?u:10===e?c:u||c}function h(e){if(!e)return document.documentElement;for(var t=d(10)?document.body:null,i=e.offsetParent||null;i===t&&e.nextElementSibling;)i=(e=e.nextElementSibling).offsetParent;var n=i&&i.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TH","TD","TABLE"].indexOf(i.nodeName)&&"static"===s(i,"position")?h(i):i:e?e.ownerDocument.documentElement:document.documentElement}function p(e){return null!==e.parentNode?p(e.parentNode):e}function f(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var i=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,n=i?e:t,r=i?t:e,o=document.createRange();o.setStart(n,0),o.setEnd(r,0);var s,a,l=o.commonAncestorContainer;if(e!==l&&t!==l||n.contains(r))return"BODY"===(a=(s=l).nodeName)||"HTML"!==a&&h(s.firstElementChild)!==s?h(l):l;var u=p(e);return u.host?f(u.host,t):f(e,p(t).host)}function g(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",i="top"===t?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement,o=e.ownerDocument.scrollingElement||r;return o[i]}return e[i]}function m(e,t){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=g(t,"top"),r=g(t,"left"),o=i?-1:1;return e.top+=n*o,e.bottom+=n*o,e.left+=r*o,e.right+=r*o,e}function v(e,t){var i="x"===t?"Left":"Top",n="Left"===i?"Right":"Bottom";return parseFloat(e["border"+i+"Width"],10)+parseFloat(e["border"+n+"Width"],10)}function y(e,t,i,n){return Math.max(t["offset"+e],t["scroll"+e],i["client"+e],i["offset"+e],i["scroll"+e],d(10)?parseInt(i["offset"+e])+parseInt(n["margin"+("Height"===e?"Top":"Left")])+parseInt(n["margin"+("Height"===e?"Bottom":"Right")]):0)}function _(e){var t=e.body,i=e.documentElement,n=d(10)&&getComputedStyle(i);return{height:y("Height",t,i,n),width:y("Width",t,i,n)}}var x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},b=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),w=function(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e},T=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n])}return e};function C(e){return T({},e,{right:e.left+e.width,bottom:e.top+e.height})}function S(e){var t={};try{if(d(10)){t=e.getBoundingClientRect();var i=g(e,"top"),n=g(e,"left");t.top+=i,t.left+=n,t.bottom+=i,t.right+=n}else t=e.getBoundingClientRect()}catch(e){}var r={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?_(e.ownerDocument):{},a=o.width||e.clientWidth||r.right-r.left,l=o.height||e.clientHeight||r.bottom-r.top,u=e.offsetWidth-a,c=e.offsetHeight-l;if(u||c){var h=s(e);u-=v(h,"x"),c-=v(h,"y"),r.width-=u,r.height-=c}return C(r)}function k(e,t){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=d(10),r="HTML"===t.nodeName,o=S(e),a=S(t),u=l(e),c=s(t),h=parseFloat(c.borderTopWidth,10),p=parseFloat(c.borderLeftWidth,10);i&&r&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var f=C({top:o.top-a.top-h,left:o.left-a.left-p,width:o.width,height:o.height});if(f.marginTop=0,f.marginLeft=0,!n&&r){var g=parseFloat(c.marginTop,10),v=parseFloat(c.marginLeft,10);f.top-=h-g,f.bottom-=h-g,f.left-=p-v,f.right-=p-v,f.marginTop=g,f.marginLeft=v}return(n&&!i?t.contains(u):t===u&&"BODY"!==u.nodeName)&&(f=m(f,t)),f}function P(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=e.ownerDocument.documentElement,n=k(e,i),r=Math.max(i.clientWidth,window.innerWidth||0),o=Math.max(i.clientHeight,window.innerHeight||0),s=t?0:g(i),a=t?0:g(i,"left"),l={top:s-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:r,height:o};return C(l)}function E(e){var t=e.nodeName;if("BODY"===t||"HTML"===t)return!1;if("fixed"===s(e,"position"))return!0;var i=a(e);return!!i&&E(i)}function A(e){if(!e||!e.parentElement||d())return document.documentElement;for(var t=e.parentElement;t&&"none"===s(t,"transform");)t=t.parentElement;return t||document.documentElement}function D(e,t,i,n){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},s=r?A(e):f(e,t);if("viewport"===n)o=P(s,r);else{var u=void 0;"scrollParent"===n?"BODY"===(u=l(a(t))).nodeName&&(u=e.ownerDocument.documentElement):u="window"===n?e.ownerDocument.documentElement:n;var c=k(u,s,r);if("HTML"!==u.nodeName||E(s))o=c;else{var d=_(e.ownerDocument),h=d.height,p=d.width;o.top+=c.top-c.marginTop,o.bottom=h+c.top,o.left+=c.left-c.marginLeft,o.right=p+c.left}}var g="number"==typeof(i=i||0);return o.left+=g?i:i.left||0,o.top+=g?i:i.top||0,o.right-=g?i:i.right||0,o.bottom-=g?i:i.bottom||0,o}function R(e){return e.width*e.height}function M(e,t,i,n,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var s=D(i,n,o,r),a={top:{width:s.width,height:t.top-s.top},right:{width:s.right-t.right,height:s.height},bottom:{width:s.width,height:s.bottom-t.bottom},left:{width:t.left-s.left,height:s.height}},l=Object.keys(a).map((function(e){return T({key:e},a[e],{area:R(a[e])})})).sort((function(e,t){return t.area-e.area})),u=l.filter((function(e){var t=e.width,n=e.height;return t>=i.clientWidth&&n>=i.clientHeight})),c=u.length>0?u[0].key:l[0].key,d=e.split("-")[1];return c+(d?"-"+d:"")}function O(e,t,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,r=n?A(t):f(t,i);return k(i,r,n)}function L(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),i=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),n=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+n,height:e.offsetHeight+i}}function N(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function $(e,t,i){i=i.split("-")[0];var n=L(e),r={width:n.width,height:n.height},o=-1!==["right","left"].indexOf(i),s=o?"top":"left",a=o?"left":"top",l=o?"height":"width",u=o?"width":"height";return r[s]=t[s]+t[l]/2-n[l]/2,r[a]=i===a?t[a]-n[u]:t[N(a)],r}function I(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function j(e,t,i){return(void 0===i?e:e.slice(0,function(e,t,i){if(Array.prototype.findIndex)return e.findIndex((function(e){return e[t]===i}));var n=I(e,(function(e){return e[t]===i}));return e.indexOf(n)}(e,"name",i))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var i=e.function||e.fn;e.enabled&&o(i)&&(t.offsets.popper=C(t.offsets.popper),t.offsets.reference=C(t.offsets.reference),t=i(t,e))})),t}function F(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=O(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=M(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=$(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=j(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function B(e,t){return e.some((function(e){var i=e.name;return e.enabled&&i===t}))}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],i=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<t.length;n++){var r=t[n],o=r?""+r+i:e;if(void 0!==document.body.style[o])return o}return null}function z(){return this.state.isDestroyed=!0,B(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function q(e){var t=e.ownerDocument;return t?t.defaultView:window}function U(e,t,i,n){i.updateBound=n,q(e).addEventListener("resize",i.updateBound,{passive:!0});var r=l(e);return function e(t,i,n,r){var o="BODY"===t.nodeName,s=o?t.ownerDocument.defaultView:t;s.addEventListener(i,n,{passive:!0}),o||e(l(s.parentNode),i,n,r),r.push(s)}(r,"scroll",i.updateBound,i.scrollParents),i.scrollElement=r,i.eventsEnabled=!0,i}function W(){this.state.eventsEnabled||(this.state=U(this.reference,this.options,this.state,this.scheduleUpdate))}function V(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,q(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function X(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function Y(e,t){Object.keys(t).forEach((function(i){var n="";-1!==["width","height","top","right","bottom","left"].indexOf(i)&&X(t[i])&&(n="px"),e.style[i]=t[i]+n}))}var G=e&&/Firefox/i.test(navigator.userAgent);function K(e,t,i){var n=I(e,(function(e){return e.name===t})),r=!!n&&e.some((function(e){return e.name===i&&e.enabled&&e.order<n.order}));if(!r){var o="`"+t+"`",s="`"+i+"`";console.warn(s+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}var Q=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],J=Q.slice(3);function Z(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=J.indexOf(e),n=J.slice(i+1).concat(J.slice(0,i));return t?n.reverse():n}var ee="flip",te="clockwise",ie="counterclockwise";function ne(e,t,i,n){var r=[0,0],o=-1!==["right","left"].indexOf(n),s=e.split(/(\+|\-)/).map((function(e){return e.trim()})),a=s.indexOf(I(s,(function(e){return-1!==e.search(/,|\s/)})));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,u=-1!==a?[s.slice(0,a).concat([s[a].split(l)[0]]),[s[a].split(l)[1]].concat(s.slice(a+1))]:[s];return(u=u.map((function(e,n){var r=(1===n?!o:o)?"height":"width",s=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,s=!0,e):s?(e[e.length-1]+=t,s=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,i,n){var r=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],s=r[2];if(!o)return e;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=i;break;case"%":case"%r":default:a=n}return C(a)[t]/100*o}if("vh"===s||"vw"===s){return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}(e,r,t,i)}))}))).forEach((function(e,t){e.forEach((function(i,n){X(i)&&(r[t]+=i*("-"===e[n-1]?-1:1))}))})),r}var re={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,i=t.split("-")[0],n=t.split("-")[1];if(n){var r=e.offsets,o=r.reference,s=r.popper,a=-1!==["bottom","top"].indexOf(i),l=a?"left":"top",u=a?"width":"height",c={start:w({},l,o[l]),end:w({},l,o[l]+o[u]-s[u])};e.offsets.popper=T({},s,c[n])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var i=t.offset,n=e.placement,r=e.offsets,o=r.popper,s=r.reference,a=n.split("-")[0],l=void 0;return l=X(+i)?[+i,0]:ne(i,o,s,a),"left"===a?(o.top+=l[0],o.left-=l[1]):"right"===a?(o.top+=l[0],o.left+=l[1]):"top"===a?(o.left+=l[0],o.top-=l[1]):"bottom"===a&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var i=t.boundariesElement||h(e.instance.popper);e.instance.reference===i&&(i=h(i));var n=H("transform"),r=e.instance.popper.style,o=r.top,s=r.left,a=r[n];r.top="",r.left="",r[n]="";var l=D(e.instance.popper,e.instance.reference,t.padding,i,e.positionFixed);r.top=o,r.left=s,r[n]=a,t.boundaries=l;var u=t.priority,c=e.offsets.popper,d={primary:function(e){var i=c[e];return c[e]<l[e]&&!t.escapeWithReference&&(i=Math.max(c[e],l[e])),w({},e,i)},secondary:function(e){var i="right"===e?"left":"top",n=c[i];return c[e]>l[e]&&!t.escapeWithReference&&(n=Math.min(c[i],l[e]-("right"===e?c.width:c.height))),w({},i,n)}};return u.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=T({},c,d[t](e))})),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,i=t.popper,n=t.reference,r=e.placement.split("-")[0],o=Math.floor,s=-1!==["top","bottom"].indexOf(r),a=s?"right":"bottom",l=s?"left":"top",u=s?"width":"height";return i[a]<o(n[l])&&(e.offsets.popper[l]=o(n[l])-i[u]),i[l]>o(n[a])&&(e.offsets.popper[l]=o(n[a])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var i;if(!K(e.instance.modifiers,"arrow","keepTogether"))return e;var n=t.element;if("string"==typeof n){if(!(n=e.instance.popper.querySelector(n)))return e}else if(!e.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var r=e.placement.split("-")[0],o=e.offsets,a=o.popper,l=o.reference,u=-1!==["left","right"].indexOf(r),c=u?"height":"width",d=u?"Top":"Left",h=d.toLowerCase(),p=u?"left":"top",f=u?"bottom":"right",g=L(n)[c];l[f]-g<a[h]&&(e.offsets.popper[h]-=a[h]-(l[f]-g)),l[h]+g>a[f]&&(e.offsets.popper[h]+=l[h]+g-a[f]),e.offsets.popper=C(e.offsets.popper);var m=l[h]+l[c]/2-g/2,v=s(e.instance.popper),y=parseFloat(v["margin"+d],10),_=parseFloat(v["border"+d+"Width"],10),x=m-e.offsets.popper[h]-y-_;return x=Math.max(Math.min(a[c]-g,x),0),e.arrowElement=n,e.offsets.arrow=(w(i={},h,Math.round(x)),w(i,p,""),i),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(B(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var i=D(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),n=e.placement.split("-")[0],r=N(n),o=e.placement.split("-")[1]||"",s=[];switch(t.behavior){case ee:s=[n,r];break;case te:s=Z(n);break;case ie:s=Z(n,!0);break;default:s=t.behavior}return s.forEach((function(a,l){if(n!==a||s.length===l+1)return e;n=e.placement.split("-")[0],r=N(n);var u=e.offsets.popper,c=e.offsets.reference,d=Math.floor,h="left"===n&&d(u.right)>d(c.left)||"right"===n&&d(u.left)<d(c.right)||"top"===n&&d(u.bottom)>d(c.top)||"bottom"===n&&d(u.top)<d(c.bottom),p=d(u.left)<d(i.left),f=d(u.right)>d(i.right),g=d(u.top)<d(i.top),m=d(u.bottom)>d(i.bottom),v="left"===n&&p||"right"===n&&f||"top"===n&&g||"bottom"===n&&m,y=-1!==["top","bottom"].indexOf(n),_=!!t.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&f||!y&&"start"===o&&g||!y&&"end"===o&&m);(h||v||_)&&(e.flipped=!0,(h||v)&&(n=s[l+1]),_&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=n+(o?"-"+o:""),e.offsets.popper=T({},e.offsets.popper,$(e.instance.popper,e.offsets.reference,e.placement)),e=j(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,i=t.split("-")[0],n=e.offsets,r=n.popper,o=n.reference,s=-1!==["left","right"].indexOf(i),a=-1===["top","left"].indexOf(i);return r[s?"left":"top"]=o[i]-(a?r[s?"width":"height"]:0),e.placement=N(t),e.offsets.popper=C(r),e}},hide:{order:800,enabled:!0,fn:function(e){if(!K(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,i=I(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<i.top||t.left>i.right||t.top>i.bottom||t.right<i.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var i=t.x,n=t.y,r=e.offsets.popper,o=I(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==o?o:t.gpuAcceleration,a=h(e.instance.popper),l=S(a),u={position:r.position},c=function(e,t){var i=e.offsets,n=i.popper,r=i.reference,o=Math.round,s=Math.floor,a=function(e){return e},l=o(r.width),u=o(n.width),c=-1!==["left","right"].indexOf(e.placement),d=-1!==e.placement.indexOf("-"),h=t?c||d||l%2==u%2?o:s:a,p=t?o:a;return{left:h(l%2==1&&u%2==1&&!d&&t?n.left-1:n.left),top:p(n.top),bottom:p(n.bottom),right:h(n.right)}}(e,window.devicePixelRatio<2||!G),d="bottom"===i?"top":"bottom",p="right"===n?"left":"right",f=H("transform"),g=void 0,m=void 0;if(m="bottom"===d?"HTML"===a.nodeName?-a.clientHeight+c.bottom:-l.height+c.bottom:c.top,g="right"===p?"HTML"===a.nodeName?-a.clientWidth+c.right:-l.width+c.right:c.left,s&&f)u[f]="translate3d("+g+"px, "+m+"px, 0)",u[d]=0,u[p]=0,u.willChange="transform";else{var v="bottom"===d?-1:1,y="right"===p?-1:1;u[d]=m*v,u[p]=g*y,u.willChange=d+", "+p}var _={"x-placement":e.placement};return e.attributes=T({},_,e.attributes),e.styles=T({},u,e.styles),e.arrowStyles=T({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,i;return Y(e.instance.popper,e.styles),t=e.instance.popper,i=e.attributes,Object.keys(i).forEach((function(e){!1!==i[e]?t.setAttribute(e,i[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&Y(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,i,n,r){var o=O(r,t,e,i.positionFixed),s=M(i.placement,o,t,e,i.modifiers.flip.boundariesElement,i.modifiers.flip.padding);return t.setAttribute("x-placement",s),Y(t,{position:i.positionFixed?"fixed":"absolute"}),i},gpuAcceleration:void 0}}},oe=function(){function e(t,i){var n=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=r(this.update.bind(this)),this.options=T({},e.Defaults,s),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=i&&i.jquery?i[0]:i,this.options.modifiers={},Object.keys(T({},e.Defaults.modifiers,s.modifiers)).forEach((function(t){n.options.modifiers[t]=T({},e.Defaults.modifiers[t]||{},s.modifiers?s.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return T({name:e},n.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&o(e.onLoad)&&e.onLoad(n.reference,n.popper,n.options,e,n.state)})),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return b(e,[{key:"update",value:function(){return F.call(this)}},{key:"destroy",value:function(){return z.call(this)}},{key:"enableEventListeners",value:function(){return W.call(this)}},{key:"disableEventListeners",value:function(){return V.call(this)}}]),e}();return oe.Utils=("undefined"!=typeof window?window:global).PopperUtils,oe.placements=Q,oe.Defaults=re,oe})),Curtains.prototype._init=function(){this.glCanvas=document.createElement("canvas");var e={alpha:this.alpha,premultipliedAlpha:this.premultipliedAlpha};if(this.gl=this.glCanvas.getContext("webgl2",e),this._isWebGL2=!!this.gl,this.gl||(this.gl=this.glCanvas.getContext("webgl",e)||this.glCanvas.getContext("experimental-webgl",e)),!this.gl)return this.productionMode||console.warn("WebGL context could not be created"),void(this._onErrorCallback&&this._onErrorCallback());this._getExtensions(),this._glState={currentProgramID:null,programs:[],currentBuffersID:0,setDepth:null,frameBufferID:null,scenePassIndex:null},this._contextLostHandler=this._contextLost.bind(this),this.glCanvas.addEventListener("webglcontextlost",this._contextLostHandler,!1),this._contextRestoredHandler=this._contextRestored.bind(this),this.glCanvas.addEventListener("webglcontextrestored",this._contextRestoredHandler,!1),this._scrollManager={handler:this._scroll.bind(this,!0),shouldWatch:this._watchScroll,xOffset:window.pageXOffset,yOffset:window.pageYOffset,lastXDelta:0,lastYDelta:0},this._watchScroll&&window.addEventListener("scroll",this._scrollManager.handler,{passive:!0}),this.setPixelRatio(this.pixelRatio,!1),this._resizeHandler=null,this._autoResize&&(this._resizeHandler=this.resize.bind(this,!0),window.addEventListener("resize",this._resizeHandler,!1)),this._readyToDraw()},Curtains.prototype._getExtensions=function(){this._extensions=[],this._isWebGL2?(this._extensions.EXT_color_buffer_float=this.gl.getExtension("EXT_color_buffer_float"),this._extensions.OES_texture_float_linear=this.gl.getExtension("OES_texture_float_linear"),this._extensions.WEBGL_lose_context=this.gl.getExtension("WEBGL_lose_context")):(this._extensions.OES_vertex_array_object=this.gl.getExtension("OES_vertex_array_object"),this._extensions.OES_texture_float=this.gl.getExtension("OES_texture_float"),this._extensions.OES_texture_float_linear=this.gl.getExtension("OES_texture_float_linear"),this._extensions.OES_texture_half_float=this.gl.getExtension("OES_texture_half_float"),this._extensions.OES_texture_half_float_linear=this.gl.getExtension("OES_texture_half_float_linear"),this._extensions.OES_element_index_uint=this.gl.getExtension("OES_element_index_uint"),this._extensions.OES_standard_derivatives=this.gl.getExtension("OES_standard_derivatives"),this._extensions.EXT_sRGB=this.gl.getExtension("EXT_sRGB"),this._extensions.WEBGL_depth_texture=this.gl.getExtension("WEBGL_depth_texture"),this._extensions.WEBGL_draw_buffers=this.gl.getExtension("WEBGL_draw_buffers"),this._extensions.WEBGL_lose_context=this.gl.getExtension("WEBGL_lose_context"))},Curtains.prototype.setPixelRatio=function(e,t){this.pixelRatio=parseFloat(Math.max(e,1))||1,this.resize(t)},Curtains.prototype._setSize=function(){var e=this.container.getBoundingClientRect();this._boundingRect={width:e.width*this.pixelRatio,height:e.height*this.pixelRatio,top:e.top*this.pixelRatio,left:e.left*this.pixelRatio};var t=!!navigator.userAgent.match(/Version\/[\d\.]+.*Safari/),i=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream;t&&i&&(this._boundingRect.top=function(e){for(var t=0;e&&!isNaN(e.offsetTop);)t+=e.offsetTop-e.scrollTop,e=e.offsetParent;return t}(this.container)*this.pixelRatio),this.glCanvas.style.width=Math.floor(this._boundingRect.width/this.pixelRatio)+"px",this.glCanvas.style.height=Math.floor(this._boundingRect.height/this.pixelRatio)+"px",this.glCanvas.width=Math.floor(this._boundingRect.width*this._renderingScale/this.pixelRatio),this.glCanvas.height=Math.floor(this._boundingRect.height*this._renderingScale/this.pixelRatio),this.gl.viewport(0,0,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight),this._scrollManager.shouldWatch&&(this._scrollManager.xOffset=window.pageXOffset,this._scrollManager.yOffset=window.pageYOffset)},Curtains.prototype.getBoundingRect=function(){return this._boundingRect},Curtains.prototype.resize=function(e){this._setSize();for(var t=0;t<this.planes.length;t++)this.planes[t]._canDraw&&this.planes[t].planeResize();for(t=0;t<this.shaderPasses.length;t++)this.shaderPasses[t]._canDraw&&this.shaderPasses[t].planeResize();for(t=0;t<this.renderTargets.length;t++)this.renderTargets[t].resize();this.needRender();var i=this;setTimeout((function(){i._onAfterResizeCallback&&e&&i._onAfterResizeCallback()}),0)},Curtains.prototype._scroll=function(){var e={x:window.pageXOffset,y:window.pageYOffset};if(this.updateScrollValues(e.x,e.y),this._scrollManager.shouldWatch){for(var t=0;t<this.planes.length;t++)this.planes[t].watchScroll&&this.planes[t].updateScrollPosition();this.needRender()}var i=this;setTimeout((function(){i._onScrollCallback&&i._onScrollCallback()}),0)},Curtains.prototype.updateScrollValues=function(e,t){var i=this._scrollManager.xOffset;this._scrollManager.xOffset=e,this._scrollManager.lastXDelta=i-this._scrollManager.xOffset;var n=this._scrollManager.yOffset;this._scrollManager.yOffset=t,this._scrollManager.lastYDelta=n-this._scrollManager.yOffset},Curtains.prototype.getScrollDeltas=function(){return{x:this._scrollManager.lastXDelta,y:this._scrollManager.lastYDelta}},Curtains.prototype.getScrollValues=function(){return{x:this._scrollManager.xOffset,y:this._scrollManager.yOffset}},Curtains.prototype.enableDrawing=function(){this._drawingEnabled=!0},Curtains.prototype.disableDrawing=function(){this._drawingEnabled=!1},Curtains.prototype.needRender=function(){this._forceRender=!0},Curtains.prototype._contextLost=function(e){e.preventDefault(),this._glState={currentProgramID:null,programs:[],currentBuffersID:0,setDepth:null,frameBufferID:null,scenePassIndex:null},this._animationFrameID&&window.cancelAnimationFrame(this._animationFrameID);var t=this;setTimeout((function(){t._onContextLostCallback&&t._onContextLostCallback()}),0)},Curtains.prototype.restoreContext=function(){this.gl&&this._extensions.WEBGL_lose_context?this._extensions.WEBGL_lose_context.restoreContext():this.productionMode||(this.gl?this._extensions.WEBGL_lose_context||console.warn("Could not restore context because the restore context extension is not defined"):console.warn("Could not restore context because the context is not defined"))},Curtains.prototype._contextRestored=function(){var e=this._drawingEnabled;this._drawingEnabled=!1,this._getExtensions(),this._setBlendFunc(),this._setDepth(!0),this._drawStacks={opaque:{length:0,programs:[]},transparent:{length:0,programs:[]},renderPasses:[],scenePasses:[]},this._imageCache=[];for(var t=0;t<this.renderTargets.length;t++)this.renderTargets[t]._restoreContext();for(t=0;t<this.planes.length;t++)this.planes[t]._restoreContext();for(t=0;t<this.shaderPasses.length;t++)this.shaderPasses[t]._restoreContext();this._onContextRestoredCallback&&this._onContextRestoredCallback(),this._drawingEnabled=e,this._autoRender&&this._animate()},Curtains.prototype.dispose=function(){for(this._isDestroying=!0;this.planes.length>0;)this.removePlane(this.planes[0]);for(;this.shaderPasses.length>0;)this.removeShaderPass(this.shaderPasses[0]);for(;this.renderTargets.length>0;)this.removeRenderTarget(this.renderTargets[0]);for(var e=0;e<this._glState.programs.length;e++){var t=this._glState.programs[e];this.gl.deleteShader(t.fragmentShader),this.gl.deleteShader(t.vertexShader),this.gl.deleteProgram(t.program)}this._glState={currentProgramID:null,programs:[],currentBuffersID:0,setDepth:null,frameBufferID:null,scenePassIndex:null};var i=this,n=setInterval((function(){0===i.planes.length&&0===i.shaderPasses.length&&0===i.renderTargets.length&&(clearInterval(n),i._clear(),i._animationFrameID&&window.cancelAnimationFrame(i._animationFrameID),this._resizeHandler&&window.removeEventListener("resize",i._resizeHandler,!1),this._watchScroll&&window.removeEventListener("scroll",this._scrollManager.handler,{passive:!0}),i.glCanvas.removeEventListener("webgllost",i._contextLostHandler,!1),i.glCanvas.removeEventListener("webglrestored",i._contextRestoredHandler,!1),i.gl&&i._extensions.WEBGL_lose_context&&i._extensions.WEBGL_lose_context.loseContext(),i.glCanvas.width=i.glCanvas.width,i.gl=null,i.container.removeChild(i.glCanvas),i.container=null,i.glCanvas=null)}),100)},Curtains.prototype._createShader=function(e,t){var i=this.gl.createShader(t);if(this.gl.shaderSource(i,e),this.gl.compileShader(i),!this.productionMode&&!this.gl.getShaderParameter(i,this.gl.COMPILE_STATUS)){for(var n=t===this.gl.VERTEX_SHADER?"vertex shader":"fragment shader",r=this.gl.getShaderSource(i).split("\n"),o=0;o<r.length;o++)r[o]=o+1+": "+r[o];return r=r.join("\n"),console.warn("Errors occurred while compiling the",n,":\n",this.gl.getShaderInfoLog(i)),console.error(r),null}return i},Curtains.prototype._isEqualShader=function(e,t){var i=!1;return 0===e.localeCompare(t)&&(i=!0),i},Curtains.prototype._setupProgram=function(e,t,i){for(var n={},r=0;r<this._glState.programs.length;r++)if(this._isEqualShader(this._glState.programs[r].vsCode,e)&&this._isEqualShader(this._glState.programs[r].fsCode,t)){n=this._glState.programs[r];break}if(n.program){if(i.shareProgram)return n;var o=this._useExistingShaders(n);return this._createProgram(o,i._type,i)}return!!(o=this._useNewShaders(e,t))&&this._createProgram(o,i._type,i)},Curtains.prototype._useExistingShaders=function(e){return{vs:{vertexShader:e.vertexShader,vsCode:e.vsCode},fs:{fragmentShader:e.fragmentShader,fsCode:e.fsCode}}},Curtains.prototype._useNewShaders=function(e,t){var i=!0,n=this._createShader(e,this.gl.VERTEX_SHADER),r=this._createShader(t,this.gl.FRAGMENT_SHADER);return n&&r||(this.productionMode||console.warn("Unable to find or compile the vertex or fragment shader"),i=!1),i?{vs:{vertexShader:n,vsCode:e},fs:{fragmentShader:r,fsCode:t}}:i},Curtains.prototype._createProgram=function(e,t,i){var n=this.gl,r=!0,o=n.createProgram();if(r&&(n.attachShader(o,e.vs.vertexShader),n.attachShader(o,e.fs.fragmentShader),n.linkProgram(o),this.productionMode||n.getProgramParameter(o,n.LINK_STATUS)||(console.warn("Unable to initialize the shader program."),r=!1)),r){var s={id:this._glState.programs.length,vsCode:e.vs.vsCode,vertexShader:e.vs.vertexShader,fsCode:e.fs.fsCode,fragmentShader:e.fs.fragmentShader,program:o,type:t};return"Plane"===t&&(this._drawStacks.opaque.programs["program-"+s.id]=[],this._drawStacks.transparent.programs["program-"+s.id]=[]),this._glState.programs.push(s),s}return r},Curtains.prototype._useProgram=function(e){null!==this._glState.currentProgramID&&this._glState.currentProgramID===e.id||(this.gl.useProgram(e.program),this._glState.currentProgramID=e.id)},Curtains.prototype.addPlane=function(e,t){if(this.gl){if(!e||0===e.length)return this.productionMode||console.warn("The html element you specified does not currently exists in the DOM"),this._onErrorCallback&&this._onErrorCallback(),!1;var i=new Curtains.Plane(this,e,t);return i._usedProgram?this.planes.push(i):i=!1,i}return this.productionMode||console.warn("Unable to create a plane. The WebGl context couldn't be created"),this._onErrorCallback&&this._onErrorCallback(),null},Curtains.prototype.removePlane=function(e){var t;e._canDraw=!1,e&&e._dispose();for(var i=0;i<this.planes.length;i++)e._uuid===this.planes[i]._uuid&&(t=i);for(e=null,this.planes[t]=null,this.planes.splice(t,1),i=0;i<this._glState.programs.length;i++)this._drawStacks.opaque.programs["program-"+this._glState.programs[i].id]=[],this._drawStacks.transparent.programs["program-"+ +this._glState.programs[i].id]=[];for(this._drawStacks.opaque.length=0,this._drawStacks.transparent.length=0,i=0;i<this.planes.length;i++)this.planes[i].index=i,this._stackPlane(this.planes[i]);this.gl&&this._clear(),this._glState.currentBuffersID=0},Curtains.prototype._stackPlane=function(e){var t=e._transparent?"transparent":"opaque";"transparent"===t?this._drawStacks[t].programs["program-"+e._usedProgram.id].unshift(e.index):this._drawStacks[t].programs["program-"+e._usedProgram.id].push(e.index),this._drawStacks[t].length++},Curtains.prototype.addRenderTarget=function(e){return this.gl?new Curtains.RenderTarget(this,e):(this.productionMode||console.warn("Unable to create a render target. The WebGl context couldn't be created"),this._onErrorCallback&&this._onErrorCallback(),null)},Curtains.prototype.removeRenderTarget=function(e){if(e._shaderPass)this.productionMode||console.warn("You're trying to remove a render target attached to a shader pass. You should remove that shader pass instead:",e._shaderPass);else{for(var t=0;t<this.planes.length;t++)this.planes[t].target&&this.planes[t].target._uuid===e._uuid&&(this.planes[t].target=null);var i;for(t=0;t<this.renderTargets.length;t++)e._uuid===this.renderTargets[t]._uuid&&(i=t);this.renderTargets[i]=null,this.renderTargets.splice(i,1),e&&e._dispose(),e=null,this.gl&&this._clear(),this._glState.currentBuffersID=0}},Curtains.prototype.addShaderPass=function(e){if(this.gl){var t=new Curtains.ShaderPass(this,e);return t._usedProgram?(e.renderTarget?this._drawStacks.renderPasses.push(t.index):this._drawStacks.scenePasses.push(t.index),this.shaderPasses.push(t)):t=!1,t}return this.productionMode||console.warn("Unable to create a shader pass. The WebGl context couldn't be created"),this._onErrorCallback&&this._onErrorCallback(),null},Curtains.prototype.removeShaderPass=function(e){var t;e._canDraw=!1,e.target&&(e.target._shaderPass=null,this.removeRenderTarget(e.target),e.target=null);for(var i=0;i<this.shaderPasses.length;i++)e._uuid===this.shaderPasses[i]._uuid&&(t=i);for(this.shaderPasses.splice(t,1),this._drawStacks.scenePasses=[],this._drawStacks.renderPasses=[],i=0;i<this.shaderPasses.length;i++)this.shaderPasses[i].index=i,this.shaderPasses[i]._isScenePass?this._drawStacks.scenePasses.push(this.shaderPasses[i].index):this._drawStacks.renderPasses.push(this.shaderPasses[i].index);0===this._drawStacks.scenePasses.length&&(this._glState.scenePassIndex=null),e&&e._dispose(),e=null,this.gl&&this._clear(),this._glState.currentBuffersID=0},Curtains.prototype._clear=function(){this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT)},Curtains.prototype._bindFrameBuffer=function(e,t){var i=null;e?(i=e.index)!==this._glState.frameBufferID&&(this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,e._frameBuffer),this.gl.viewport(0,0,e._size.width,e._size.height),e._shouldClear&&!t&&this._clear()):null!==this._glState.frameBufferID&&(this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null),this.gl.viewport(0,0,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight)),this._glState.frameBufferID=i},Curtains.prototype._setDepth=function(e){e&&!this._glState.depthTest?(this._glState.depthTest=e,this.gl.enable(this.gl.DEPTH_TEST)):!e&&this._glState.depthTest&&(this._glState.depthTest=e,this.gl.disable(this.gl.DEPTH_TEST))},Curtains.prototype._setBlendFunc=function(){this.gl.enable(this.gl.BLEND),this.premultipliedAlpha?this.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA):this.gl.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA)},Curtains.prototype._generateUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16).toUpperCase()}))},Curtains.prototype._multiplyMatrix=function(e,t){var i=new Float32Array(16);return i[0]=t[0]*e[0]+t[1]*e[4]+t[2]*e[8]+t[3]*e[12],i[1]=t[0]*e[1]+t[1]*e[5]+t[2]*e[9]+t[3]*e[13],i[2]=t[0]*e[2]+t[1]*e[6]+t[2]*e[10]+t[3]*e[14],i[3]=t[0]*e[3]+t[1]*e[7]+t[2]*e[11]+t[3]*e[15],i[4]=t[4]*e[0]+t[5]*e[4]+t[6]*e[8]+t[7]*e[12],i[5]=t[4]*e[1]+t[5]*e[5]+t[6]*e[9]+t[7]*e[13],i[6]=t[4]*e[2]+t[5]*e[6]+t[6]*e[10]+t[7]*e[14],i[7]=t[4]*e[3]+t[5]*e[7]+t[6]*e[11]+t[7]*e[15],i[8]=t[8]*e[0]+t[9]*e[4]+t[10]*e[8]+t[11]*e[12],i[9]=t[8]*e[1]+t[9]*e[5]+t[10]*e[9]+t[11]*e[13],i[10]=t[8]*e[2]+t[9]*e[6]+t[10]*e[10]+t[11]*e[14],i[11]=t[8]*e[3]+t[9]*e[7]+t[10]*e[11]+t[11]*e[15],i[12]=t[12]*e[0]+t[13]*e[4]+t[14]*e[8]+t[15]*e[12],i[13]=t[12]*e[1]+t[13]*e[5]+t[14]*e[9]+t[15]*e[13],i[14]=t[12]*e[2]+t[13]*e[6]+t[14]*e[10]+t[15]*e[14],i[15]=t[12]*e[3]+t[13]*e[7]+t[14]*e[11]+t[15]*e[15],i},Curtains.prototype._scaleMatrix=function(e,t,i,n){var r=new Float32Array(16);return r[0]=t*e[0],r[1]=t*e[1],r[2]=t*e[2],r[3]=t*e[3],r[4]=i*e[4],r[5]=i*e[5],r[6]=i*e[6],r[7]=i*e[7],r[8]=n*e[8],r[9]=n*e[9],r[10]=n*e[10],r[11]=n*e[11],e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},Curtains.prototype._applyTransformationsMatrixFromOrigin=function(e,t,i,n){var r=new Float32Array(16),o=new Float32Array(4),s=.5*t[0],a=.5*t[1],l=.5*t[2],u=Math.sin(s),c=Math.cos(s),d=Math.sin(a),h=Math.cos(a),p=Math.sin(l),f=Math.cos(l);o[0]=u*h*f-c*d*p,o[1]=c*d*f+u*h*p,o[2]=c*h*p-u*d*f,o[3]=c*h*f+u*d*p;var g=o[0],m=o[1],v=o[2],y=o[3],_=g+g,x=m+m,b=v+v,w=g*_,T=g*x,C=g*b,S=m*x,k=m*b,P=v*b,E=y*_,A=y*x,D=y*b,R=i[0],M=i[1],O=i[2],L=n[0],N=n[1],$=n[2],I=(1-(S+P))*R,j=(T+D)*R,F=(C-A)*R,B=(T-D)*M,H=(1-(w+P))*M,z=(k+E)*M,q=(C+A)*O,U=(k-E)*O,W=(1-(w+S))*O;return r[0]=I,r[1]=j,r[2]=F,r[3]=0,r[4]=B,r[5]=H,r[6]=z,r[7]=0,r[8]=q,r[9]=U,r[10]=W,r[11]=0,r[12]=e[0]+L-(I*L+B*N+q*$),r[13]=e[1]+N-(j*L+H*N+U*$),r[14]=e[2]+$-(F*L+z*N+W*$),r[15]=1,r},Curtains.prototype._applyMatrixToPoint=function(e,t){var i=e[0],n=e[1],r=e[2],o=1/(t[3]*i+t[7]*n+t[11]*r+t[15]);return e[0]=(t[0]*i+t[4]*n+t[8]*r+t[12])*o,e[1]=(t[1]*i+t[5]*n+t[9]*r+t[13])*o,e[2]=(t[2]*i+t[6]*n+t[10]*r+t[14])*o,e},Curtains.prototype._readyToDraw=function(){this.container.appendChild(this.glCanvas),this._setBlendFunc(),this._setDepth(!0),console.log("curtains.js - v5.2"),this._animationFrameID=null,this._autoRender&&this._animate()},Curtains.prototype._animate=function(){this.render(),this._animationFrameID=window.requestAnimationFrame(this._animate.bind(this))},Curtains.prototype._drawPlaneStack=function(e){for(var t in this._drawStacks[e].programs)for(var i=this._drawStacks[e].programs[t],n=0;n<i.length;n++){var r=this.planes[i[n]];r&&r._drawPlane()}},Curtains.prototype.render=function(){if(this._drawingEnabled||this._forceRender){this._forceRender&&(this._forceRender=!1),this._onRenderCallback&&this._onRenderCallback(),this._clear(),this._drawStacks.scenePasses.length>0&&0===this._drawStacks.renderPasses.length&&(this._glState.scenePassIndex=0,this._bindFrameBuffer(this.shaderPasses[this._drawStacks.scenePasses[0]].target)),this._drawPlaneStack("opaque"),this._drawStacks.transparent.length&&(this.gl.clearDepth(1),this.gl.clear(this.gl.DEPTH_BUFFER_BIT),this._drawPlaneStack("transparent")),this._drawStacks.scenePasses.length>0&&this._drawStacks.renderPasses.length>0&&(this._glState.scenePassIndex=0,this._bindFrameBuffer(this.shaderPasses[this._drawStacks.scenePasses[0]].target));for(var e=0;e<this._drawStacks.renderPasses.length;e++)this.shaderPasses[this._drawStacks.renderPasses[e]]._drawPlane();if(this._drawStacks.scenePasses.length>0)for(e=0;e<this._drawStacks.scenePasses.length;e++)this.shaderPasses[this._drawStacks.scenePasses[e]]._drawPlane()}},Curtains.prototype.onAfterResize=function(e){return e&&(this._onAfterResizeCallback=e),this},Curtains.prototype.onError=function(e){return e&&(this._onErrorCallback=e),this},Curtains.prototype.onContextLost=function(e){return e&&(this._onContextLostCallback=e),this},Curtains.prototype.onContextRestored=function(e){return e&&(this._onContextRestoredCallback=e),this},Curtains.prototype.onRender=function(e){return e&&(this._onRenderCallback=e),this},Curtains.prototype.onScroll=function(e){return e&&(this._onScrollCallback=e),this},Curtains.BasePlane=function(e,t,i){this._type=this._type||"BasicPlane",this._curtains=e,this.htmlElement=t,this._uuid=this._curtains._generateUUID(),this._initBasePlane(i)},Curtains.BasePlane.prototype._initBasePlane=function(e){e||(e={}),this._canDraw=!1,this.shareProgram=e.shareProgram||!1,this._updatePerspectiveMatrix=!1,this._updateMVMatrix=!1,this._definition={width:parseInt(e.widthSegments)||1,height:parseInt(e.heightSegments)||1},this._definition.buffersID=this._definition.width*this._definition.height+this._definition.width,this._depthTest=e.depthTest,null!==this._depthTest&&void 0!==this._depthTest||(this._depthTest=!0),this._loadingManager={sourcesLoaded:0,initSourcesToLoad:0,complete:!1};var t=this._setupShaders(e);if(this._usedProgram=this._curtains._setupProgram(t.vertexShaderCode,t.fragmentShaderCode,this),this.images=[],this.videos=[],this.canvases=[],this.textures=[],this.crossOrigin=e.crossOrigin||"anonymous",e.uniforms||(e.uniforms={}),this.uniforms={},e.uniforms)for(var i in e.uniforms){var n=e.uniforms[i];this.uniforms[i]={name:n.name,type:n.type,value:n.value,lastValue:n.value}}return this.userData={},!!this._usedProgram&&(this._shouldDraw=!0,this.visible=!0,this._setAttributes(),this._setDocumentSizes(),this._setUniforms(this.uniforms),this._initializeBuffers(),this._canDraw=!0,this)},Curtains.BasePlane.prototype._getDefaultVS=function(){return this._curtains.productionMode||console.warn("No vertex shader provided, will use a default one"),"precision mediump float;\nattribute vec3 aVertexPosition;attribute vec2 aTextureCoord;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;varying vec3 vVertexPosition;varying vec2 vTextureCoord;void main() {vTextureCoord = aTextureCoord;vVertexPosition = aVertexPosition;gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);}"},Curtains.BasePlane.prototype._getDefaultFS=function(){return"precision mediump float;\nvarying vec3 vVertexPosition;varying vec2 vTextureCoord;void main( void ) {gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);}"},Curtains.BasePlane.prototype._setupShaders=function(e){var t,i,n=e.vertexShaderID||this.htmlElement.getAttribute("data-vs-id"),r=e.fragmentShaderID||this.htmlElement.getAttribute("data-fs-id");return e.vertexShader||(t=n&&document.getElementById(n)?document.getElementById(n).innerHTML:this._getDefaultVS()),e.fragmentShader||(r&&document.getElementById(r)?i=document.getElementById(r).innerHTML:(this._curtains.productionMode||console.warn("No fragment shader provided, will use a default one"),i=this._getDefaultFS())),{vertexShaderCode:e.vertexShader||t,fragmentShaderCode:e.fragmentShader||i}},Curtains.BasePlane.prototype._handleUniformSetting=function(e,t,i){var n=this._curtains.gl;switch(e){case"1i":n.uniform1i(t,i);break;case"1iv":n.uniform1iv(t,i);break;case"1f":n.uniform1f(t,i);break;case"1fv":n.uniform1fv(t,i);break;case"2i":n.uniform2i(t,i[0],i[1]);break;case"2iv":n.uniform2iv(t,i);break;case"2f":n.uniform2f(t,i[0],i[1]);break;case"2fv":n.uniform2fv(t,i);break;case"3i":n.uniform3i(t,i[0],i[1],i[2]);break;case"3iv":n.uniform3iv(t,i);break;case"3f":n.uniform3f(t,i[0],i[1],i[2]);break;case"3fv":n.uniform3fv(t,i);break;case"4i":n.uniform4i(t,i[0],i[1],i[2],i[3]);break;case"4iv":n.uniform4iv(t,i);break;case"4f":n.uniform4f(t,i[0],i[1],i[2],i[3]);break;case"4fv":n.uniform4fv(t,i);break;case"mat2":n.uniformMatrix2fv(t,!1,i);break;case"mat3":n.uniformMatrix3fv(t,!1,i);break;case"mat4":n.uniformMatrix4fv(t,!1,i);break;default:this._curtains.productionMode||console.warn("This uniform type is not handled : ",e)}},Curtains.BasePlane.prototype._setUniforms=function(e){var t=this._curtains,i=t.gl;if(t._useProgram(this._usedProgram),e)for(var n in e){var r=e[n];r.location=i.getUniformLocation(this._usedProgram.program,r.name),r.type||(Array.isArray(r.value)?4===r.value.length?(r.type="4f",t.productionMode||console.warn("No uniform type declared for "+r.name+", applied a 4f (array of 4 floats) uniform type")):3===r.value.length?(r.type="3f",t.productionMode||console.warn("No uniform type declared for "+r.name+", applied a 3f (array of 3 floats) uniform type")):2===r.value.length&&(r.type="2f",t.productionMode||console.warn("No uniform type declared for "+r.name+", applied a 2f (array of 2 floats) uniform type")):r.value.constructor===Float32Array?16===r.value.length?(r.type="mat4",t.productionMode||console.warn("No uniform type declared for "+r.name+", applied a mat4 (4x4 matrix array) uniform type")):9===r.value.length?(r.type="mat3",t.productionMode||console.warn("No uniform type declared for "+r.name+", applied a mat3 (3x3 matrix array) uniform type")):4===r.value.length&&(r.type="mat2",t.productionMode||console.warn("No uniform type declared for "+r.name+", applied a mat2 (2x2 matrix array) uniform type")):(r.type="1f",t.productionMode||console.warn("No uniform type declared for "+r.name+", applied a 1f (float) uniform type"))),this._handleUniformSetting(r.type,r.location,r.value)}},Curtains.BasePlane.prototype._updateUniforms=function(){if(this.uniforms)for(var e in this.uniforms){var t=this.uniforms[e];this.shareProgram?this._handleUniformSetting(t.type,t.location,t.value):(t.value.length||t.value===t.lastValue?JSON.stringify(t.value)!==JSON.stringify(t.lastValue)&&this._handleUniformSetting(t.type,t.location,t.value):this._handleUniformSetting(t.type,t.location,t.value),t.lastValue=t.value)}},Curtains.BasePlane.prototype._setAttributes=function(){this._attributes||(this._attributes={}),this._attributes.vertexPosition={name:"aVertexPosition",location:this._curtains.gl.getAttribLocation(this._usedProgram.program,"aVertexPosition")},this._attributes.textureCoord={name:"aTextureCoord",location:this._curtains.gl.getAttribLocation(this._usedProgram.program,"aTextureCoord")}},Curtains.BasePlane.prototype._setPlaneVertices=function(){this._geometry={vertices:[]},this._material={uvs:[]};for(var e=0;e<this._definition.height;++e)for(var t=e/this._definition.height,i=0;i<this._definition.width;++i){var n=i/this._definition.width;this._material.uvs.push(n),this._material.uvs.push(t),this._material.uvs.push(0),this._geometry.vertices.push(2*(n-.5)),this._geometry.vertices.push(2*(t-.5)),this._geometry.vertices.push(0),this._material.uvs.push(n+1/this._definition.width),this._material.uvs.push(t),this._material.uvs.push(0),this._geometry.vertices.push(2*(n+1/this._definition.width-.5)),this._geometry.vertices.push(2*(t-.5)),this._geometry.vertices.push(0),this._material.uvs.push(n),this._material.uvs.push(t+1/this._definition.height),this._material.uvs.push(0),this._geometry.vertices.push(2*(n-.5)),this._geometry.vertices.push(2*(t+1/this._definition.height-.5)),this._geometry.vertices.push(0),this._material.uvs.push(n),this._material.uvs.push(t+1/this._definition.height),this._material.uvs.push(0),this._geometry.vertices.push(2*(n-.5)),this._geometry.vertices.push(2*(t+1/this._definition.height-.5)),this._geometry.vertices.push(0),this._material.uvs.push(n+1/this._definition.width),this._material.uvs.push(t),this._material.uvs.push(0),this._geometry.vertices.push(2*(n+1/this._definition.width-.5)),this._geometry.vertices.push(2*(t-.5)),this._geometry.vertices.push(0),this._material.uvs.push(n+1/this._definition.width),this._material.uvs.push(t+1/this._definition.height),this._material.uvs.push(0),this._geometry.vertices.push(2*(n+1/this._definition.width-.5)),this._geometry.vertices.push(2*(t+1/this._definition.height-.5)),this._geometry.vertices.push(0)}},Curtains.BasePlane.prototype._initializeBuffers=function(){var e=this._curtains.gl;this._geometry||this._material||this._setPlaneVertices(),this._attributes&&(this._geometry.bufferInfos={id:e.createBuffer(),itemSize:3,numberOfItems:this._geometry.vertices.length/3},this._material.bufferInfos={id:e.createBuffer(),itemSize:3,numberOfItems:this._material.uvs.length/3},this._curtains._isWebGL2?(this._vao=e.createVertexArray(),e.bindVertexArray(this._vao)):this._curtains._extensions.OES_vertex_array_object&&(this._vao=this._curtains._extensions.OES_vertex_array_object.createVertexArrayOES(),this._curtains._extensions.OES_vertex_array_object.bindVertexArrayOES(this._vao)),e.enableVertexAttribArray(this._attributes.vertexPosition.location),e.bindBuffer(e.ARRAY_BUFFER,this._geometry.bufferInfos.id),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this._geometry.vertices),e.STATIC_DRAW),e.vertexAttribPointer(this._attributes.vertexPosition.location,this._geometry.bufferInfos.itemSize,e.FLOAT,!1,0,0),e.enableVertexAttribArray(this._attributes.textureCoord.location),e.bindBuffer(e.ARRAY_BUFFER,this._material.bufferInfos.id),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this._material.uvs),e.STATIC_DRAW),e.vertexAttribPointer(this._attributes.textureCoord.location,this._material.bufferInfos.itemSize,e.FLOAT,!1,0,0),this._curtains._glState.currentBuffersID=this._definition.buffersID)},Curtains.BasePlane.prototype._restoreContext=function(){var e=this._curtains;if(this._canDraw=!1,this._matrices&&(this._matrices=null),this._attributes=null,this._geometry.bufferInfos=null,this._material.bufferInfos=null,this._usedProgram=e._setupProgram(this._usedProgram.vsCode,this._usedProgram.fsCode,this),this._usedProgram){if(this._setAttributes(),this._setUniforms(this.uniforms),this._initializeBuffers(),"ShaderPass"===this._type)if(this._isScenePass)this.target._frameBuffer=null,this.target._depthBuffer=null,e.renderTargets.splice(this.target.index,1),this.textures.splice(0,1),this._createFrameBuffer(),e._drawStacks.scenePasses.push(this.index);else{var t=e.renderTargets[this.target.index];this.setRenderTarget(t),this.target._shaderPass=t,this.textures[0]._canDraw=!1,this.textures[0]._setTextureUniforms(),this.textures[0].setFromTexture(t.textures[0]),e._drawStacks.renderPasses.push(this.index)}else this.target&&this.setRenderTarget(e.renderTargets[this.target.index]);for(var i="ShaderPass"===this._type?1:0;i<this.textures.length;i++)this.textures[i]._restoreContext();"Plane"===this._type&&(this._initMatrices(),this.setPerspective(this._fov,.1,2*this._fov),this._applyCSSPositions(),e._stackPlane(this)),this._canDraw=!0}},Curtains.BasePlane.prototype._setDocumentSizes=function(){var e=this.htmlElement.getBoundingClientRect();0===e.width&&0===e.height&&(e=this._curtains._boundingRect),this._boundingRect||(this._boundingRect={}),this._boundingRect.document={width:e.width*this._curtains.pixelRatio,height:e.height*this._curtains.pixelRatio,top:e.top*this._curtains.pixelRatio,left:e.left*this._curtains.pixelRatio}},Curtains.BasePlane.prototype.getBoundingRect=function(){return{width:this._boundingRect.document.width,height:this._boundingRect.document.height,top:this._boundingRect.document.top,left:this._boundingRect.document.left,right:this._boundingRect.document.left+this._boundingRect.document.width,bottom:this._boundingRect.document.top+this._boundingRect.document.height}},Curtains.BasePlane.prototype.getWebGLBoundingRect=function(){var e=this._matrices.mVPMatrix;if(e){for(var t=[this._curtains._applyMatrixToPoint([-1,1,0],e),this._curtains._applyMatrixToPoint([1,1,0],e),this._curtains._applyMatrixToPoint([1,-1,0],e),this._curtains._applyMatrixToPoint([-1,-1,0],e)],i=1e6,n=-1e6,r=1e6,o=-1e6,s=0;s<t.length;s++){var a=t[s];a[0]=(a[0]+1)/2,a[1]=1-(a[1]+1)/2,a[0]<i&&(i=a[0]),a[0]>n&&(n=a[0]),a[1]<r&&(r=a[1]),a[1]>o&&(o=a[1])}return{width:(n-i)*this._curtains._boundingRect.width,height:(o-r)*this._curtains._boundingRect.height,top:r*this._curtains._boundingRect.height+this._curtains._boundingRect.top,left:i*this._curtains._boundingRect.width+this._curtains._boundingRect.left,right:i*this._curtains._boundingRect.width+this._curtains._boundingRect.left+(n-i)*this._curtains._boundingRect.width,bottom:r*this._curtains._boundingRect.height+this._curtains._boundingRect.top+(o-r)*this._curtains._boundingRect.height}}return this._boundingRect.document},Curtains.BasePlane.prototype.planeResize=function(){this._setDocumentSizes(),"Plane"===this._type&&(this.setPerspective(this._fov,.1,2*this._fov),this._applyCSSPositions());for(var e=0;e<this.textures.length;e++)this.textures[e].resize();var t=this;setTimeout((function(){t._onAfterResizeCallback&&t._onAfterResizeCallback()}),0)},Curtains.BasePlane.prototype.createTexture=function(e){"string"==typeof e&&(e={sampler:e},this._curtains.productionMode||console.warn("Since v5.1 you should use an object to pass your sampler name with the createTexture() method. Please refer to the docs: https://www.curtainsjs.com/documentation.html (texture concerned: ",e.sampler,")")),e||(e={});var t=new Curtains.Texture(this,{index:this.textures.length,sampler:e.sampler||null,fromTexture:e.fromTexture||null,isFBOTexture:e.isFBOTexture||!1});return this.textures.push(t),t},Curtains.BasePlane.prototype._isPlaneReady=function(){if(!this._loadingManager.complete&&this._loadingManager.sourcesLoaded>=this._loadingManager.initSourcesToLoad){this._loadingManager.complete=!0,this._curtains.needRender();var e=this;setTimeout((function(){e._onReadyCallback&&e._onReadyCallback()}),0)}},Curtains.BasePlane.prototype.loadSources=function(e){for(var t=0;t<e.length;t++)this.loadSource(e[t])},Curtains.BasePlane.prototype.loadSource=function(e){"IMG"===e.tagName.toUpperCase()?this.loadImage(e):"VIDEO"===e.tagName.toUpperCase()?this.loadVideo(e):"CANVAS"===e.tagName.toUpperCase()?this.loadCanvas(e):this._curtains.productionMode||console.warn("this HTML tag could not be converted into a texture:",e.tagName)},Curtains.BasePlane.prototype._sourceLoadError=function(e){this._curtains.productionMode||console.warn("There has been an error loading this source:",e)},Curtains.BasePlane.prototype._getTextureFromCache=function(e){var t=!1;if(this._curtains._imageCache.length>0)for(var i=0;i<this._curtains._imageCache.length;i++){var n=this._curtains._imageCache[i];n.source&&"image"===n.type&&n.source.src===e.src&&(t=n)}return t},Curtains.BasePlane.prototype.loadImage=function(e){var t=e;t.crossOrigin=this.crossOrigin||"anonymous",t.sampler=e.getAttribute("data-sampler")||null;var i=this._getTextureFromCache(e);if(i)return this.createTexture({sampler:t.sampler,fromTexture:i}),void this.images.push(i.source);var n=this.createTexture({sampler:t.sampler});n._onSourceLoadedHandler=n._onSourceLoaded.bind(n,t),t.complete?n._onSourceLoaded(t):(t.addEventListener("load",n._onSourceLoadedHandler,!1),t.addEventListener("error",this._sourceLoadError.bind(this,t),!1)),this.images.push(t)},Curtains.BasePlane.prototype.loadVideo=function(e){var t=e;t.preload=!0,t.muted=!0,t.loop=!0,t.sampler=e.getAttribute("data-sampler")||null,t.crossOrigin=this.crossOrigin||"anonymous";var i=this.createTexture({sampler:t.sampler});i._onSourceLoadedHandler=i._onVideoLoadedData.bind(i,t),t.addEventListener("canplaythrough",i._onSourceLoadedHandler,!1),t.addEventListener("error",this._sourceLoadError.bind(this,t),!1),t.readyState>=t.HAVE_FUTURE_DATA&&i._onSourceLoaded(t),t.load(),this.videos.push(t)},Curtains.BasePlane.prototype.loadCanvas=function(e){var t=e;t.sampler=e.getAttribute("data-sampler")||null;var i=this.createTexture({sampler:t.sampler});this.canvases.push(t),i._onSourceLoaded(t)},Curtains.BasePlane.prototype.loadImages=function(e){for(var t=0;t<e.length;t++)this.loadImage(e[t])},Curtains.BasePlane.prototype.loadVideos=function(e){for(var t=0;t<e.length;t++)this.loadVideo(e[t])},Curtains.BasePlane.prototype.loadCanvases=function(e){for(var t=0;t<e.length;t++)this.loadCanvas(e[t])},Curtains.BasePlane.prototype.playVideos=function(){for(var e=0;e<this.textures.length;e++){var t=this.textures[e];if("video"===t.type){var i=t.source.play(),n=this;void 0!==i&&i.catch((function(e){n._curtains.productionMode||console.warn("Could not play the video : ",e)}))}}},Curtains.BasePlane.prototype.mouseToPlaneCoords=function(e,t){var i=this.scale?this.scale:{x:1,y:1},n=(this._boundingRect.document.width-this._boundingRect.document.width*i.x)/2,r=(this._boundingRect.document.height-this._boundingRect.document.height*i.y)/2,o=this._boundingRect.document.width*i.x/this._curtains.pixelRatio,s=this._boundingRect.document.height*i.y/this._curtains.pixelRatio,a=(this._boundingRect.document.top+r)/this._curtains.pixelRatio;return{x:(e-(this._boundingRect.document.left+n)/this._curtains.pixelRatio)/o*2-1,y:1-(t-a)/s*2}},Curtains.BasePlane.prototype._bindPlaneBuffers=function(){var e=this._curtains,t=e.gl;this._vao?e._isWebGL2?e.gl.bindVertexArray(this._vao):e._extensions.OES_vertex_array_object.bindVertexArrayOES(this._vao):(t.enableVertexAttribArray(this._attributes.vertexPosition.location),t.bindBuffer(t.ARRAY_BUFFER,this._geometry.bufferInfos.id),t.vertexAttribPointer(this._attributes.vertexPosition.location,this._geometry.bufferInfos.itemSize,t.FLOAT,!1,0,0),t.enableVertexAttribArray(this._attributes.textureCoord.location),t.bindBuffer(t.ARRAY_BUFFER,this._material.bufferInfos.id),t.vertexAttribPointer(this._attributes.textureCoord.location,this._material.bufferInfos.itemSize,t.FLOAT,!1,0,0)),e._glState.currentBuffersID=this._definition.buffersID},Curtains.BasePlane.prototype._bindPlaneTexture=function(e){var t=this._curtains.gl;e._canDraw&&(t.activeTexture(t.TEXTURE0+e.index),t.bindTexture(t.TEXTURE_2D,e._sampler.texture))},Curtains.BasePlane.prototype.setRenderTarget=function(e){e&&e._type&&"RenderTarget"===e._type?this.target=e:this._curtains.productionMode||console.warn("Could not set the render target because the argument passed is not a RenderTarget class object",e)},Curtains.BasePlane.prototype._drawPlane=function(){var e=this._curtains,t=e.gl;if(this._canDraw&&(e._setDepth(this._depthTest),this._onRenderCallback&&this._onRenderCallback(),"ShaderPass"===this._type?this._isScenePass?e._glState.scenePassIndex+1<e._drawStacks.scenePasses.length?(e._bindFrameBuffer(e.shaderPasses[e._drawStacks.scenePasses[e._glState.scenePassIndex+1]].target),e._glState.scenePassIndex++):e._bindFrameBuffer(null):null===e._glState.scenePassIndex&&e._bindFrameBuffer(null):(this.target?e._bindFrameBuffer(this.target):null===e._glState.scenePassIndex&&e._bindFrameBuffer(null),this._setPerspectiveMatrix(),this._setMVMatrix()),this._shouldDraw&&this.visible)){e._useProgram(this._usedProgram),this._updateUniforms(),(e._glState.currentBuffersID!==this._definition.buffersID||this.target)&&this._bindPlaneBuffers();for(var i=0;i<this.textures.length;i++)this.textures[i]._drawTexture();t.drawArrays(t.TRIANGLES,0,this._geometry.bufferInfos.numberOfItems),this._onAfterRenderCallback&&this._onAfterRenderCallback()}},Curtains.BasePlane.prototype._dispose=function(){var e=this._curtains.gl;if(e){this._vao&&(this._curtains._isWebGL2?e.deleteVertexArray(this._vao):this._curtains._extensions.OES_vertex_array_object.deleteVertexArrayOES(this._vao)),this._geometry&&(e.bindBuffer(e.ARRAY_BUFFER,this._geometry.bufferInfos.id),e.bufferData(e.ARRAY_BUFFER,1,e.STATIC_DRAW),e.deleteBuffer(this._geometry.bufferInfos.id),this._geometry=null),this._material&&(e.bindBuffer(e.ARRAY_BUFFER,this._material.bufferInfos.id),e.bufferData(e.ARRAY_BUFFER,1,e.STATIC_DRAW),e.deleteBuffer(this._material.bufferInfos.id),this._material=null),this.target&&"ShaderPass"===this._type&&(this._curtains.removeRenderTarget(this.target),this.textures.shift());for(var t=0;t<this.textures.length;t++)this.textures[t]._dispose();this.textures=null}},Curtains.BasePlane.prototype.onAfterResize=function(e){return e&&(this._onAfterResizeCallback=e),this},Curtains.BasePlane.prototype.onLoading=function(e){return e&&(this._onPlaneLoadingCallback=e),this},Curtains.BasePlane.prototype.onReady=function(e){return e&&(this._onReadyCallback=e),this},Curtains.BasePlane.prototype.onRender=function(e){return e&&(this._onRenderCallback=e),this},Curtains.BasePlane.prototype.onAfterRender=function(e){return e&&(this._onAfterRenderCallback=e),this},Curtains.Plane=function(e,t,i){this._type="Plane",Curtains.BasePlane.call(this,e,t,i),this.index=this._curtains.planes.length,this._canDraw=!1,this.target=null,i||(i={}),this._setInitParams(i),this._usedProgram?(this._curtains._stackPlane(this),this._initPositions(),this._initSources()):this._curtains._onErrorCallback&&this._curtains._onErrorCallback()},Curtains.Plane.prototype=Object.create(Curtains.BasePlane.prototype),Curtains.Plane.prototype.constructor=Curtains.Plane,Curtains.Plane.prototype._setInitParams=function(e){this.alwaysDraw=e.alwaysDraw||!1,this._transparent=e.transparent||!1;var t={top:0,right:0,bottom:0,left:0};e.drawCheckMargins&&(t=e.drawCheckMargins),this.drawCheckMargins=t,this._initTransformValues(),this.autoloadSources=e.autoloadSources,null!==this.autoloadSources&&void 0!==this.autoloadSources||(this.autoloadSources=!0),this._fov=e.fov||75,this._nearPlane=.1,this._farPlane=2*this._fov,null===e.watchScroll||void 0===e.watchScroll?this.watchScroll=this._curtains._watchScroll:this.watchScroll=e.watchScroll||!1,this.watchScroll&&(this._curtains._scrollManager.shouldWatch=!0)},Curtains.Plane.prototype._initTransformValues=function(e){this.rotation={x:0,y:0,z:0},this.relativeTranslation={x:0,y:0},this._translation={x:0,y:0,z:0},this.scale={x:1,y:1},this.transformOrigin={x:.5,y:.5}},Curtains.Plane.prototype._initPositions=function(){this._initMatrices(),this.setPerspective(this._fov,.1,2*this._fov),this._applyCSSPositions()},Curtains.Plane.prototype._initSources=function(){if(this.autoloadSources){for(var e=[],t=0;t<this.htmlElement.getElementsByTagName("img").length;t++)e.push(this.htmlElement.getElementsByTagName("img")[t]);e.length>0&&this.loadSources(e);var i=[];for(t=0;t<this.htmlElement.getElementsByTagName("video").length;t++)i.push(this.htmlElement.getElementsByTagName("video")[t]);i.length>0&&this.loadSources(i);var n=[];for(t=0;t<this.htmlElement.getElementsByTagName("canvas").length;t++)n.push(this.htmlElement.getElementsByTagName("canvas")[t]);n.length>0&&this.loadSources(n),this._loadingManager.initSourcesToLoad=e.length+i.length+n.length}0===this._loadingManager.initSourcesToLoad&&(this._isPlaneReady(),this._curtains.productionMode||console.warn("This plane does not contain any image, video or canvas element. You may want to add some later with the loadSource() or loadSources() method.")),this._canDraw=!0,this._curtains.needRender(),this.alwaysDraw||this._shouldDrawCheck()},Curtains.Plane.prototype._initMatrices=function(){var e=this._curtains.gl;this._matrices={mvMatrix:{name:"uMVMatrix",matrix:new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),location:e.getUniformLocation(this._usedProgram.program,"uMVMatrix")},pMatrix:{name:"uPMatrix",matrix:new Float32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),location:e.getUniformLocation(this._usedProgram.program,"uPMatrix")}}},Curtains.Plane.prototype.resetPlane=function(e){this._initTransformValues(),null!==e&&e?(this.htmlElement=e,this.updatePosition()):e||this._curtains.productionMode||console.warn("You are trying to reset a plane with a HTML element that does not exist. The old HTML element will be kept instead.")},Curtains.Plane.prototype._setComputedSizes=function(){var e=this._curtains,t=this._boundingRect.document.width/2+this._boundingRect.document.left,i=this._boundingRect.document.height/2+this._boundingRect.document.top,n=e._boundingRect.width/2+e._boundingRect.left,r=e._boundingRect.height/2+e._boundingRect.top;this._boundingRect.computed={width:this._boundingRect.document.width/e._boundingRect.width,height:this._boundingRect.document.height/e._boundingRect.height,top:(r-i)/e._boundingRect.height,left:(t-n)/e._boundingRect.height}},Curtains.Plane.prototype._setPerspectiveMatrix=function(){if(this._updatePerspectiveMatrix){var e=this._curtains._boundingRect.width/this._curtains._boundingRect.height;this._matrices.pMatrix.matrix=[this._fov/e,0,0,0,0,this._fov,0,0,0,0,(this._nearPlane+this._farPlane)*(1/(this._nearPlane-this._farPlane)),-1,0,0,this._nearPlane*this._farPlane*(1/(this._nearPlane-this._farPlane))*2,0]}(this.shareProgram||!this.shareProgram&&this._updatePerspectiveMatrix)&&(this._curtains._useProgram(this._usedProgram),this._curtains.gl.uniformMatrix4fv(this._matrices.pMatrix.location,!1,this._matrices.pMatrix.matrix)),this._updatePerspectiveMatrix=!1},Curtains.Plane.prototype.setPerspective=function(e,t,i){var n;(n=null===e||"number"!=typeof e?75:parseInt(e))<1?n=1:n>180&&(n=180),n!==this._fov&&(this._fov=n);var r=parseFloat(t)||.1;r!==this._nearPlane&&(this._nearPlane=r);var o=parseFloat(i)||2*n;o!==this._farPlane&&(this._farPlane=o),this._updatePerspectiveMatrix=!0,this._updateMVMatrix=!0},Curtains.Plane.prototype._setMVMatrix=function(){if(this._updateMVMatrix){var e={x:this._curtains._boundingRect.width/this._curtains._boundingRect.height*this._boundingRect.computed.width/2,y:this._boundingRect.computed.height/2},t=[this._translation.x,this._translation.y,this._translation.z-this._fov/2],i=[this.rotation.x,this.rotation.y,this.rotation.z],n=[this.scale.x,this.scale.y,1],r={x:2*this.transformOrigin.x-1,y:-(2*this.transformOrigin.y-1)},o=[r.x*e.x,r.y*e.y,0],s=this._curtains._applyTransformationsMatrixFromOrigin(t,i,n,o),a=new Float32Array([e.x,0,0,0,0,e.y,0,0,0,0,1,0,0,0,0,1]);this._matrices.mvMatrix.matrix=this._curtains._multiplyMatrix(s,a),this._matrices.mVPMatrix=this._curtains._multiplyMatrix(this._matrices.pMatrix.matrix,this._matrices.mvMatrix.matrix),this.alwaysDraw||this._shouldDrawCheck()}(this.shareProgram||!this.shareProgram&&this._updateMVMatrix)&&(this._curtains._useProgram(this._usedProgram),this._curtains.gl.uniformMatrix4fv(this._matrices.mvMatrix.location,!1,this._matrices.mvMatrix.matrix)),this._updateMVMatrix=!1},Curtains.Plane.prototype.setScale=function(e,t){if(e=isNaN(e)?1:parseFloat(e),t=isNaN(t)?1:parseFloat(t),e!==this.scale.x||t!==this.scale.y){this.scale={x:e,y:t};for(var i=0;i<this.textures.length;i++)this.textures[i].resize();this._updateMVMatrix=!0}},Curtains.Plane.prototype.setRotation=function(e,t,i){e=isNaN(e)?0:parseFloat(e),t=isNaN(t)?0:parseFloat(t),i=isNaN(i)?0:parseFloat(i),e===this.rotation.x&&t===this.rotation.y&&i===this.rotation.z||(this.rotation={x:e,y:t,z:i},this._updateMVMatrix=!0)},Curtains.Plane.prototype.setTransformOrigin=function(e,t){e=isNaN(e)?.5:parseFloat(e),t=isNaN(t)?.5:parseFloat(t),e===this.transformOrigin.x&&t===this.transformOrigin.y||(this.transformOrigin={x:e,y:t},this._updateMVMatrix=!0)},Curtains.Plane.prototype._setTranslation=function(){var e={x:0,y:0};0===this.relativeTranslation.x&&0===this.relativeTranslation.y||(e=this._documentToPlaneSpace(this.relativeTranslation.x,this.relativeTranslation.y)),this._translation.x=this._boundingRect.computed.left+e.x,this._translation.y=this._boundingRect.computed.top+e.y,this._updateMVMatrix=!0},Curtains.Plane.prototype.setRelativePosition=function(e,t){e=isNaN(e)?0:parseFloat(e),t=isNaN(t)?0:parseFloat(t),e===this.relativeTranslation.x&&t===this.relativeTranslation.y||(this.relativeTranslation={x:e,y:t},this._setTranslation())},Curtains.Plane.prototype._documentToPlaneSpace=function(e,t){return{x:e/(this._curtains._boundingRect.width/this._curtains.pixelRatio)*(this._curtains._boundingRect.width/this._curtains._boundingRect.height),y:-t/(this._curtains._boundingRect.height/this._curtains.pixelRatio)}},Curtains.Plane.prototype._shouldDrawCheck=function(){var e=this.getWebGLBoundingRect(),t=this;Math.round(e.right)<=this._curtains._boundingRect.left-this.drawCheckMargins.right||Math.round(e.left)>=this._curtains._boundingRect.left+this._curtains._boundingRect.width+this.drawCheckMargins.left||Math.round(e.bottom)<=this._curtains._boundingRect.top-this.drawCheckMargins.bottom||Math.round(e.top)>=this._curtains._boundingRect.top+this._curtains._boundingRect.height+this.drawCheckMargins.top?this._shouldDraw&&(this._shouldDraw=!1,setTimeout((function(){t._onLeaveViewCallback&&t._onLeaveViewCallback()}),0)):(this._shouldDraw||setTimeout((function(){t._onReEnterViewCallback&&t._onReEnterViewCallback()}),0),this._shouldDraw=!0)},Curtains.Plane.prototype._applyCSSPositions=function(){this._setComputedSizes(),this._setTranslation()},Curtains.Plane.prototype.updatePosition=function(){this._setDocumentSizes(),this._applyCSSPositions()},Curtains.Plane.prototype.updateScrollPosition=function(){(this._curtains._scrollManager.lastXDelta||this._curtains._scrollManager.lastYDelta)&&(this._boundingRect.document.top+=this._curtains._scrollManager.lastYDelta*this._curtains.pixelRatio,this._boundingRect.document.left+=this._curtains._scrollManager.lastXDelta*this._curtains.pixelRatio,this._applyCSSPositions())},Curtains.Plane.prototype.enableDepthTest=function(e){this._depthTest=e},Curtains.Plane.prototype.moveToFront=function(){this.enableDepthTest(!1);for(var e=this._transparent?"transparent":"opaque",t=this._curtains._drawStacks[e].programs["program-"+this._usedProgram.id],i=0;i<t.length;i++)this.index===t[i]&&t.splice(i,1);for(var n in"transparent"===e?t.unshift(this.index):t.push(this.index),this._curtains._drawStacks[e])n==="program-"+this._usedProgram.id&&delete this._curtains._drawStacks[e][n];this._curtains._drawStacks[e].programs["program-"+this._usedProgram.id]=t},Curtains.Plane.prototype.onReEnterView=function(e){return e&&(this._onReEnterViewCallback=e),this},Curtains.Plane.prototype.onLeaveView=function(e){return e&&(this._onLeaveViewCallback=e),this},Curtains.RenderTarget=function(e,t){t||(t={}),this._curtains=e,this.index=this._curtains.renderTargets.length,this._type="RenderTarget",this._shaderPass=t.shaderPass||null,this._depth=t.depth||!1,this._shouldClear=t.clear,null!==this._shouldClear&&void 0!==this._shouldClear||(this._shouldClear=!0),this._minSize={width:t.minWidth||1024*this._curtains.pixelRatio,height:t.minHeight||1024*this._curtains.pixelRatio},this.userData={},this._uuid=this._curtains._generateUUID(),this._curtains.renderTargets.push(this),this._initRenderTarget()},Curtains.RenderTarget.prototype._initRenderTarget=function(){this._setSize(),this.textures=[],this._createFrameBuffer()},Curtains.RenderTarget.prototype._setSize=function(){this._shaderPass&&this._shaderPass._isScenePass?this._size={width:this._curtains._boundingRect.width,height:this._curtains._boundingRect.height}:this._size={width:Math.max(this._minSize.width,this._curtains._boundingRect.width),height:Math.max(this._minSize.height,this._curtains._boundingRect.height)}},Curtains.RenderTarget.prototype.resize=function(){this._shaderPass&&this._shaderPass._isScenePass&&(this._setSize(),this._curtains._bindFrameBuffer(this,!0),this._depth&&this._bindDepthBuffer(),this._curtains._bindFrameBuffer(null))},Curtains.RenderTarget.prototype._bindDepthBuffer=function(){var e=this._curtains.gl;this._depthBuffer&&(e.bindRenderbuffer(e.RENDERBUFFER,this._depthBuffer),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,this._size.width,this._size.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,this._depthBuffer))},Curtains.RenderTarget.prototype._createFBOTexture=function(){var e=this._curtains.gl;if(this.textures.length>0)this.textures[0]._canDraw=!1,this.textures[0]._init();else{var t=new Curtains.Texture(this._shaderPass?this._shaderPass:this,{index:this.textures.length,sampler:"uRenderTexture",isFBOTexture:!0});this.textures.push(t)}e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,this.textures[0]._sampler.texture,0)},Curtains.RenderTarget.prototype._createFrameBuffer=function(){var e=this._curtains.gl;this._frameBuffer=e.createFramebuffer(),this._curtains._bindFrameBuffer(this,!0),this._createFBOTexture(),this._depth&&(this._depthBuffer=e.createRenderbuffer(),this._bindDepthBuffer()),this._curtains._bindFrameBuffer(null)},Curtains.RenderTarget.prototype._restoreContext=function(){this._shaderPass&&this._shaderPass._isScenePass||(this._shaderPass=null,this._createFrameBuffer())},Curtains.RenderTarget.prototype._dispose=function(){this._frameBuffer&&(this._curtains.gl.deleteFramebuffer(this._frameBuffer),this._frameBuffer=null),this._depthBuffer&&(this._curtains.gl.deleteRenderbuffer(this._depthBuffer),this._depthBuffer=null),this.textures[0]._dispose(),this.textures=[]},Curtains.ShaderPass=function(e,t){t||(t={}),t.widthSegments=1,t.heightSegments=1,this._type="ShaderPass",this._isScenePass=!0,Curtains.BasePlane.call(this,e,e.container,t),this.index=this._curtains.shaderPasses.length,this._depth=t.depth||!1,this._shouldClear=t.clear,null!==this._shouldClear&&void 0!==this._shouldClear||(this._shouldClear=!0),this.target=t.renderTarget||null,this.target&&(this._isScenePass=!1,this._shouldClear=this.target._shouldClear),this._usedProgram&&this._initShaderPassPlane()},Curtains.ShaderPass.prototype=Object.create(Curtains.BasePlane.prototype),Curtains.ShaderPass.prototype.constructor=Curtains.ShaderPass,Curtains.ShaderPass.prototype._initShaderPassPlane=function(){if(this.target){this.setRenderTarget(this.target),this.target._shaderPass=this;var e=new Curtains.Texture(this,{index:this.textures.length,sampler:"uRenderTexture",isFBOTexture:!0,fromTexture:this.target.textures[0]});this.textures.push(e)}else this._createFrameBuffer();this._isPlaneReady(),this._canDraw=!0,this._curtains.needRender()},Curtains.ShaderPass.prototype._getDefaultVS=function(e){return"precision mediump float;\nattribute vec3 aVertexPosition;attribute vec2 aTextureCoord;varying vec3 vVertexPosition;varying vec2 vTextureCoord;void main() {vTextureCoord = aTextureCoord;vVertexPosition = aVertexPosition;gl_Position = vec4(aVertexPosition, 1.0);}"},Curtains.ShaderPass.prototype._getDefaultFS=function(e){return"precision mediump float;\nvarying vec3 vVertexPosition;varying vec2 vTextureCoord;uniform sampler2D uRenderTexture;void main( void ) {gl_FragColor = texture2D(uRenderTexture, vTextureCoord);}"},Curtains.ShaderPass.prototype._createFrameBuffer=function(){var e=new Curtains.RenderTarget(this._curtains,{shaderPass:this,clear:this._shouldClear,depth:this._depth});this.setRenderTarget(e),this.textures.push(this.target.textures[0])},Curtains.Texture=function(e,t){if(this._parent=e,this._curtains=e._curtains,this._uuid=this._curtains._generateUUID(),e._usedProgram||t.isFBOTexture)return this.index=e.textures.length,this._sampler={name:t.sampler||"uSampler"+this.index},this._textureMatrix={name:t.sampler?t.sampler+"Matrix":"uTextureMatrix"+this.index,matrix:null},this._willUpdate=!1,this.shouldUpdate=!1,this._forceUpdate=!1,this.scale={x:1,y:1},this.userData={},this.type=t.isFBOTexture?"fboTexture":"empty",this._canDraw=!1,t.fromTexture?(this._initFromTexture=!0,this._parent._usedProgram&&this._setTextureUniforms(),void this.setFromTexture(t.fromTexture)):(this._initFromTexture=!1,this._init(),this);this._curtains.productionMode||console.warn("Unable to create the texture because the program is not valid")},Curtains.Texture.prototype._init=function(){var e=this._curtains.gl;if(this._sampler.texture=e.createTexture(),this._internalFormat=e.RGBA,this._format=e.RGBA,this._textureType=e.UNSIGNED_BYTE,e.bindTexture(e.TEXTURE_2D,this._sampler.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),e.pixelStorei(e.UNPACK_ALIGNMENT,4),this._parent._usedProgram){if(this._size={width:this._parent._boundingRect.document.width,height:this._parent._boundingRect.document.height},this._setTextureUniforms(),"empty"===this.type)e.texImage2D(e.TEXTURE_2D,0,this._internalFormat,1,1,0,this._format,this._textureType,new Uint8Array([0,0,0,255])),this._sourceLoaded=!1;else if(!this.source){var t=this._getSizes();this._updateTextureMatrix(t)}}else this._size={width:this._parent._size.width||this._curtains._boundingRect.width,height:this._parent._size.height||this._curtains._boundingRect.height};"fboTexture"===this.type&&(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),this._curtains._isWebGL2&&this._curtains._extensions.EXT_color_buffer_float?(this._internalFormat=e.RGBA16F,this._textureType=e.HALF_FLOAT):this._curtains._extensions.OES_texture_half_float&&(this._textureType=this._curtains._extensions.OES_texture_half_float.HALF_FLOAT_OES),e.texImage2D(e.TEXTURE_2D,0,this._internalFormat,this._size.width,this._size.height,0,this._format,this._textureType,null)),this._canDraw=!0},Curtains.Texture.prototype._setTextureUniforms=function(){this._sampler.location=this._curtains.gl.getUniformLocation(this._parent._usedProgram.program,this._sampler.name),this._textureMatrix.location=this._curtains.gl.getUniformLocation(this._parent._usedProgram.program,this._textureMatrix.name),this._curtains._useProgram(this._parent._usedProgram),this._curtains.gl.uniform1i(this._sampler.location,this.index)},Curtains.Texture.prototype.setFromTexture=function(e){if(e){if(this._sampler.texture=e._sampler.texture,this.source=e.source,this._size=e._size,this._internalFormat=e._internalFormat,this._format=e._format,this._textureType=e._textureType,this._originalTexture=e,this._parent._usedProgram&&(!this._canDraw||!this._textureMatrix.matrix)){var t=this._getSizes();this._updateTextureMatrix(t),this._canDraw=!0}}else this._curtains.productionMode||console.warn("Unable to set the texture from texture:",e)},Curtains.Texture.prototype.setSource=function(e){if(this._parent._usedProgram){this.source=e,"IMG"===e.tagName.toUpperCase()?this.type="image":"VIDEO"===e.tagName.toUpperCase()?(this.type="video",this.shouldUpdate=!0):"CANVAS"===e.tagName.toUpperCase()?(this.type="canvas",this._willUpdate=!0,this.shouldUpdate=!0):this._curtains.productionMode||console.warn("this HTML tag could not be converted into a texture:",e.tagName),this._size={width:this.source.naturalWidth||this.source.width||this.source.videoWidth,height:this.source.naturalHeight||this.source.height||this.source.videoHeight};var t=this._curtains.gl;t.bindTexture(t.TEXTURE_2D,this._sampler.texture),this._curtains.premultipliedAlpha&&t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this._curtains.premultipliedAlpha),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!0),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),this.resize(),"video"!==this.type&&t.texImage2D(t.TEXTURE_2D,0,this._internalFormat,this._format,this._textureType,e)}else this._curtains.productionMode||console.warn("Unable to set the texture source because the program is not valid")},Curtains.Texture.prototype.needUpdate=function(){this._forceUpdate=!0},Curtains.Texture.prototype._update=function(){var e=this._curtains.gl;this.source?("canvas"!==this.type||this._yFlipped||(this._yFlipped=!0,e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!0)),e.texImage2D(e.TEXTURE_2D,0,this._internalFormat,this._format,this._textureType,this.source)):e.texImage2D(e.TEXTURE_2D,0,this._internalFormat,this._size.width,this._size.height,0,this._format,this._textureType,this.source)},Curtains.Texture.prototype._getSizes=function(){var e=this._parent.scale?this._parent.scale:{x:1,y:1},t=this._parent._boundingRect.document.width*e.x,i=this._parent._boundingRect.document.height*e.y,n=this._size.width,r=this._size.height,o=n/r,s=t/i,a=0,l=0;return s>o?l=Math.min(0,i-t*(1/o)):s<o&&(a=Math.min(0,t-i*o)),{parentWidth:t,parentHeight:i,sourceWidth:n,sourceHeight:r,xOffset:a,yOffset:l}},Curtains.Texture.prototype.setScale=function(e,t){e=parseFloat(e)||1,e=Math.max(e,.001),t=parseFloat(t)||1,t=Math.max(t,.001),this.scale={x:e,y:t},this.resize()},Curtains.Texture.prototype.resize=function(){if("fboTexture"===this.type){var e=this._curtains.gl;this._size={width:this._parent._boundingRect.document.width,height:this._parent._boundingRect.document.height},this._originalTexture||(e.bindTexture(e.TEXTURE_2D,this._parent.textures[0]._sampler.texture),e.texImage2D(e.TEXTURE_2D,0,this._internalFormat,this._size.width,this._size.height,0,this._format,this._textureType,this.source))}else this.source&&(this._size={width:this.source.naturalWidth||this.source.width||this.source.videoWidth,height:this.source.naturalHeight||this.source.height||this.source.videoHeight});if(this._parent._usedProgram){var t=this._getSizes();this._updateTextureMatrix(t)}},Curtains.Texture.prototype._updateTextureMatrix=function(e){var t={x:e.parentWidth/(e.parentWidth-e.xOffset),y:e.parentHeight/(e.parentHeight-e.yOffset)};t.x/=this.scale.x,t.y/=this.scale.y;var i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,(1-t.x)/2,(1-t.y)/2,0,1]);this._textureMatrix.matrix=this._curtains._scaleMatrix(i,t.x,t.y,1),this._curtains._useProgram(this._parent._usedProgram),this._curtains.gl.uniformMatrix4fv(this._textureMatrix.location,!1,this._textureMatrix.matrix)},Curtains.Texture.prototype._onSourceLoaded=function(e){this._parent._loadingManager.sourcesLoaded++,this.setSource(e);var t=this;if(this._sourceLoaded||setTimeout((function(){t._parent._onPlaneLoadingCallback&&t._parent._onPlaneLoadingCallback(t)}),0),this._parent._isPlaneReady(),this._sourceLoaded=!0,"image"===this.type){for(var i=!0,n=0;n<this._curtains._imageCache.length;n++)this._curtains._imageCache[n].source&&this._curtains._imageCache[n].source.src===e.src&&(i=!1);i&&this._curtains._imageCache.push(this)}},Curtains.Texture.prototype._onVideoLoadedData=function(e){this._sourceLoaded||this._onSourceLoaded(e)},Curtains.Texture.prototype._drawTexture=function(){this._parent._bindPlaneTexture(this),"video"===this.type&&this.source&&this.source.readyState>=this.source.HAVE_CURRENT_DATA&&(this._willUpdate=!0),(this._forceUpdate||this._willUpdate&&this.shouldUpdate)&&this._update(),"video"===this.type&&(this._willUpdate=!1),this._forceUpdate=!1},Curtains.Texture.prototype._restoreFromTexture=function(){this._initFromTexture?this._setTextureUniforms():this._init(),this.setFromTexture(this._originalTexture)},Curtains.Texture.prototype._restoreContext=function(){if(this._canDraw=!1,this._originalTexture){var e=this;if(this._originalTexture._canDraw)setTimeout((function(){e._restoreFromTexture()}),0);else var t=setInterval((function(){e._originalTexture._canDraw&&(e._restoreFromTexture(),clearInterval(t))}),16)}else this._init(),this.source&&("image"===this.type&&this._curtains._imageCache.push(this),this.setSource(this.source))},Curtains.Texture.prototype._dispose=function(){"video"===this.type?(this.source.removeEventListener("canplaythrough",this._onSourceLoadedHandler,!1),this.source.removeEventListener("error",this._parent._sourceLoadError,!1),this.source.pause(),this.source.removeAttribute("src"),this.source.load(),this.source=null):"canvas"===this.type?(this.source.width=this.source.width,this.source=null):"image"===this.type&&this._curtains._isDestroying&&(this.source.removeEventListener("load",this._onSourceLoadedHandler,!1),this.source.removeEventListener("error",this._parent._sourceLoadError,!1),this.source=null);var e=this._curtains.gl;e&&!this._originalTexture&&("image"!==this.type||this._curtains._isDestroying)&&(e.activeTexture(e.TEXTURE0+this.index),e.bindTexture(e.TEXTURE_2D,null),e.deleteTexture(this._sampler.texture)),this._parent._loadingManager&&this._parent._loadingManager.sourcesLoaded--},
/*!
  * Bootstrap util.js v4.4.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):(e=e||self).Util=t(e.jQuery)}(this,(function(e){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e;function t(t){var n=this,r=!1;return e(this).one(i.TRANSITION_END,(function(){r=!0})),setTimeout((function(){r||i.triggerTransitionEnd(n)}),t),this}var i={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");if(!t||"#"===t){var i=e.getAttribute("href");t=i&&"#"!==i?i.trim():""}try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var i=e(t).css("transition-duration"),n=e(t).css("transition-delay"),r=parseFloat(i),o=parseFloat(n);return r||o?(i=i.split(",")[0],n=n.split(",")[0],1e3*(parseFloat(i)+parseFloat(n))):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(t){e(t).trigger("transitionend")},supportsTransitionEnd:function(){return Boolean("transitionend")},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var o=n[r],s=t[r],a=s&&i.isElement(s)?"element":(l=s,{}.toString.call(l).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(a))throw new Error(e.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+o+'".')}var l},findShadowRoot:function(e){if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){var t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?i.findShadowRoot(e.parentNode):null},jQueryDetection:function(){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};return i.jQueryDetection(),e.fn.emulateTransitionEnd=t,e.event.special[i.TRANSITION_END]={bindType:"transitionend",delegateType:"transitionend",handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},i})),
/*!
  * Bootstrap collapse.js v4.4.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):(e=e||self).Collapse=t(e.jQuery,e.Util)}(this,(function(e,t){"use strict";function i(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}e=e&&e.hasOwnProperty("default")?e.default:e,t=t&&t.hasOwnProperty("default")?t.default:t;var s="collapse",a="bs.collapse",l=e.fn[s],u={toggle:!0,parent:""},c={toggle:"boolean",parent:"(string|element)"},d={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},h="show",p="collapse",f="collapsing",g="collapsed",m="width",v="height",y=".show, .collapsing",_='[data-toggle="collapse"]',x=function(){function n(e,i){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(i),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(_)),r=0,o=n.length;r<o;r++){var s=n[r],a=t.getSelectorFromElement(s),l=[].slice.call(document.querySelectorAll(a)).filter((function(t){return t===e}));null!==a&&l.length>0&&(this._selector=a,this._triggerArray.push(s))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var r,l,x,b=n.prototype;return b.toggle=function(){e(this._element).hasClass(h)?this.hide():this.show()},b.show=function(){var i,r,o=this;if(!this._isTransitioning&&!e(this._element).hasClass(h)&&(this._parent&&0===(i=[].slice.call(this._parent.querySelectorAll(y)).filter((function(e){return"string"==typeof o._config.parent?e.getAttribute("data-parent")===o._config.parent:e.classList.contains(p)}))).length&&(i=null),!(i&&(r=e(i).not(this._selector).data(a))&&r._isTransitioning))){var s=e.Event(d.SHOW);if(e(this._element).trigger(s),!s.isDefaultPrevented()){i&&(n._jQueryInterface.call(e(i).not(this._selector),"hide"),r||e(i).data(a,null));var l=this._getDimension();e(this._element).removeClass(p).addClass(f),this._element.style[l]=0,this._triggerArray.length&&e(this._triggerArray).removeClass(g).attr("aria-expanded",!0),this.setTransitioning(!0);var u="scroll"+(l[0].toUpperCase()+l.slice(1)),c=t.getTransitionDurationFromElement(this._element);e(this._element).one(t.TRANSITION_END,(function(){e(o._element).removeClass(f).addClass(p).addClass(h),o._element.style[l]="",o.setTransitioning(!1),e(o._element).trigger(d.SHOWN)})).emulateTransitionEnd(c),this._element.style[l]=this._element[u]+"px"}}},b.hide=function(){var i=this;if(!this._isTransitioning&&e(this._element).hasClass(h)){var n=e.Event(d.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var r=this._getDimension();this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",t.reflow(this._element),e(this._element).addClass(f).removeClass(p).removeClass(h);var o=this._triggerArray.length;if(o>0)for(var s=0;s<o;s++){var a=this._triggerArray[s],l=t.getSelectorFromElement(a);if(null!==l)e([].slice.call(document.querySelectorAll(l))).hasClass(h)||e(a).addClass(g).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[r]="";var u=t.getTransitionDurationFromElement(this._element);e(this._element).one(t.TRANSITION_END,(function(){i.setTransitioning(!1),e(i._element).removeClass(f).addClass(p).trigger(d.HIDDEN)})).emulateTransitionEnd(u)}}},b.setTransitioning=function(e){this._isTransitioning=e},b.dispose=function(){e.removeData(this._element,a),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},b._getConfig=function(e){return(e=o({},u,{},e)).toggle=Boolean(e.toggle),t.typeCheckConfig(s,e,c),e},b._getDimension=function(){return e(this._element).hasClass(m)?m:v},b._getParent=function(){var i,r=this;t.isElement(this._config.parent)?(i=this._config.parent,void 0!==this._config.parent.jquery&&(i=this._config.parent[0])):i=document.querySelector(this._config.parent);var o='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',s=[].slice.call(i.querySelectorAll(o));return e(s).each((function(e,t){r._addAriaAndCollapsedClass(n._getTargetFromElement(t),[t])})),i},b._addAriaAndCollapsedClass=function(t,i){var n=e(t).hasClass(h);i.length&&e(i).toggleClass(g,!n).attr("aria-expanded",n)},n._getTargetFromElement=function(e){var i=t.getSelectorFromElement(e);return i?document.querySelector(i):null},n._jQueryInterface=function(t){return this.each((function(){var i=e(this),r=i.data(a),s=o({},u,{},i.data(),{},"object"==typeof t&&t?t:{});if(!r&&s.toggle&&/show|hide/.test(t)&&(s.toggle=!1),r||(r=new n(this,s),i.data(a,r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}}))},r=n,x=[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return u}}],(l=null)&&i(r.prototype,l),x&&i(r,x),n}();return e(document).on(d.CLICK_DATA_API,_,(function(i){"A"===i.currentTarget.tagName&&i.preventDefault();var n=e(this),r=t.getSelectorFromElement(this),o=[].slice.call(document.querySelectorAll(r));e(o).each((function(){var t=e(this),i=t.data(a)?"toggle":n.data();x._jQueryInterface.call(t,i)}))})),e.fn[s]=x._jQueryInterface,e.fn[s].Constructor=x,e.fn[s].noConflict=function(){return e.fn[s]=l,x._jQueryInterface},x})),
/*!
  * Bootstrap dropdown.js v4.4.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],t):(e=e||self).Dropdown=t(e.jQuery,e.Popper,e.Util)}(this,(function(e,t,i){"use strict";function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}e=e&&e.hasOwnProperty("default")?e.default:e,t=t&&t.hasOwnProperty("default")?t.default:t,i=i&&i.hasOwnProperty("default")?i.default:i;var a="dropdown",l="bs.dropdown",u="."+l,c=e.fn[a],d=new RegExp("38|40|27"),h={HIDE:"hide"+u,HIDDEN:"hidden"+u,SHOW:"show"+u,SHOWN:"shown"+u,CLICK:"click"+u,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},p="disabled",f="show",g="dropup",m="dropright",v="dropleft",y="dropdown-menu-right",_="position-static",x='[data-toggle="dropdown"]',b=".dropdown form",w=".dropdown-menu",T=".navbar-nav",C=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",S="top-start",k="top-end",P="bottom-start",E="bottom-end",A="right-start",D="left-start",R={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},M={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},O=function(){function r(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var o,c,b,O=r.prototype;return O.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(p)){var t=e(this._menu).hasClass(f);r._clearMenus(),t||this.show(!0)}},O.show=function(n){if(void 0===n&&(n=!1),!(this._element.disabled||e(this._element).hasClass(p)||e(this._menu).hasClass(f))){var o={relatedTarget:this._element},s=e.Event(h.SHOW,o),a=r._getParentFromElement(this._element);if(e(a).trigger(s),!s.isDefaultPrevented()){if(!this._inNavbar&&n){if(void 0===t)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var l=this._element;"parent"===this._config.reference?l=a:i.isElement(this._config.reference)&&(l=this._config.reference,void 0!==this._config.reference.jquery&&(l=this._config.reference[0])),"scrollParent"!==this._config.boundary&&e(a).addClass(_),this._popper=new t(l,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(a).closest(T).length&&e(document.body).children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(f),e(a).toggleClass(f).trigger(e.Event(h.SHOWN,o))}}},O.hide=function(){if(!this._element.disabled&&!e(this._element).hasClass(p)&&e(this._menu).hasClass(f)){var t={relatedTarget:this._element},i=e.Event(h.HIDE,t),n=r._getParentFromElement(this._element);e(n).trigger(i),i.isDefaultPrevented()||(this._popper&&this._popper.destroy(),e(this._menu).toggleClass(f),e(n).toggleClass(f).trigger(e.Event(h.HIDDEN,t)))}},O.dispose=function(){e.removeData(this._element,l),e(this._element).off(u),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},O.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},O._addEventListeners=function(){var t=this;e(this._element).on(h.CLICK,(function(e){e.preventDefault(),e.stopPropagation(),t.toggle()}))},O._getConfig=function(t){return t=s({},this.constructor.Default,{},e(this._element).data(),{},t),i.typeCheckConfig(a,t,this.constructor.DefaultType),t},O._getMenuElement=function(){if(!this._menu){var e=r._getParentFromElement(this._element);e&&(this._menu=e.querySelector(w))}return this._menu},O._getPlacement=function(){var t=e(this._element.parentNode),i=P;return t.hasClass(g)?(i=S,e(this._menu).hasClass(y)&&(i=k)):t.hasClass(m)?i=A:t.hasClass(v)?i=D:e(this._menu).hasClass(y)&&(i=E),i},O._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},O._getOffset=function(){var e=this,t={};return"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=s({},t.offsets,{},e._config.offset(t.offsets,e._element)||{}),t}:t.offset=this._config.offset,t},O._getPopperConfig=function(){var e={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),s({},e,{},this._config.popperConfig)},r._jQueryInterface=function(t){return this.each((function(){var i=e(this).data(l);if(i||(i=new r(this,"object"==typeof t?t:null),e(this).data(l,i)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t]()}}))},r._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var i=[].slice.call(document.querySelectorAll(x)),n=0,o=i.length;n<o;n++){var s=r._getParentFromElement(i[n]),a=e(i[n]).data(l),u={relatedTarget:i[n]};if(t&&"click"===t.type&&(u.clickEvent=t),a){var c=a._menu;if(e(s).hasClass(f)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&e.contains(s,t.target))){var d=e.Event(h.HIDE,u);e(s).trigger(d),d.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),i[n].setAttribute("aria-expanded","false"),a._popper&&a._popper.destroy(),e(c).removeClass(f),e(s).removeClass(f).trigger(e.Event(h.HIDDEN,u)))}}}},r._getParentFromElement=function(e){var t,n=i.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},r._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||e(t.target).closest(w).length)):d.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!e(this).hasClass(p))){var i=r._getParentFromElement(this),n=e(i).hasClass(f);if(n||27!==t.which)if(n&&(!n||27!==t.which&&32!==t.which)){var o=[].slice.call(i.querySelectorAll(C)).filter((function(t){return e(t).is(":visible")}));if(0!==o.length){var s=o.indexOf(t.target);38===t.which&&s>0&&s--,40===t.which&&s<o.length-1&&s++,s<0&&(s=0),o[s].focus()}}else{if(27===t.which){var a=i.querySelector(x);e(a).trigger("focus")}e(this).trigger("click")}}},o=r,b=[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return R}},{key:"DefaultType",get:function(){return M}}],(c=null)&&n(o.prototype,c),b&&n(o,b),r}();return e(document).on(h.KEYDOWN_DATA_API,x,O._dataApiKeydownHandler).on(h.KEYDOWN_DATA_API,w,O._dataApiKeydownHandler).on(h.CLICK_DATA_API+" "+h.KEYUP_DATA_API,O._clearMenus).on(h.CLICK_DATA_API,x,(function(t){t.preventDefault(),t.stopPropagation(),O._jQueryInterface.call(e(this),"toggle")})).on(h.CLICK_DATA_API,b,(function(e){e.stopPropagation()})),e.fn[a]=O._jQueryInterface,e.fn[a].Constructor=O,e.fn[a].noConflict=function(){return e.fn[a]=c,O._jQueryInterface},O})),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}((function(e){"use strict";var t,i=window.Slick||{};t=0,(i=function(i,n){var r,o=this;o.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(i),appendDots:e(i),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,i){return e('<button type="button" />').text(i+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},o.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(o,o.initials),o.activeBreakpoint=null,o.animType=null,o.animProp=null,o.breakpoints=[],o.breakpointSettings=[],o.cssTransitions=!1,o.focussed=!1,o.interrupted=!1,o.hidden="hidden",o.paused=!0,o.positionProp=null,o.respondTo=null,o.rowCount=1,o.shouldClick=!0,o.$slider=e(i),o.$slidesCache=null,o.transformType=null,o.transitionType=null,o.visibilityChange="visibilitychange",o.windowWidth=0,o.windowTimer=null,r=e(i).data("slick")||{},o.options=e.extend({},o.defaults,n,r),o.currentSlide=o.options.initialSlide,o.originalSettings=o.options,void 0!==document.mozHidden?(o.hidden="mozHidden",o.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(o.hidden="webkitHidden",o.visibilityChange="webkitvisibilitychange"),o.autoPlay=e.proxy(o.autoPlay,o),o.autoPlayClear=e.proxy(o.autoPlayClear,o),o.autoPlayIterator=e.proxy(o.autoPlayIterator,o),o.changeSlide=e.proxy(o.changeSlide,o),o.clickHandler=e.proxy(o.clickHandler,o),o.selectHandler=e.proxy(o.selectHandler,o),o.setPosition=e.proxy(o.setPosition,o),o.swipeHandler=e.proxy(o.swipeHandler,o),o.dragHandler=e.proxy(o.dragHandler,o),o.keyHandler=e.proxy(o.keyHandler,o),o.instanceUid=t++,o.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,o.registerBreakpoints(),o.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},i.prototype.addSlide=i.prototype.slickAdd=function(t,i,n){var r=this;if("boolean"==typeof i)n=i,i=null;else if(i<0||i>=r.slideCount)return!1;r.unload(),"number"==typeof i?0===i&&0===r.$slides.length?e(t).appendTo(r.$slideTrack):n?e(t).insertBefore(r.$slides.eq(i)):e(t).insertAfter(r.$slides.eq(i)):!0===n?e(t).prependTo(r.$slideTrack):e(t).appendTo(r.$slideTrack),r.$slides=r.$slideTrack.children(this.options.slide),r.$slideTrack.children(this.options.slide).detach(),r.$slideTrack.append(r.$slides),r.$slides.each((function(t,i){e(i).attr("data-slick-index",t)})),r.$slidesCache=r.$slides,r.reinit()},i.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},i.prototype.animateSlide=function(t,i){var n={},r=this;r.animateHeight(),!0===r.options.rtl&&!1===r.options.vertical&&(t=-t),!1===r.transformsEnabled?!1===r.options.vertical?r.$slideTrack.animate({left:t},r.options.speed,r.options.easing,i):r.$slideTrack.animate({top:t},r.options.speed,r.options.easing,i):!1===r.cssTransitions?(!0===r.options.rtl&&(r.currentLeft=-r.currentLeft),e({animStart:r.currentLeft}).animate({animStart:t},{duration:r.options.speed,easing:r.options.easing,step:function(e){e=Math.ceil(e),!1===r.options.vertical?(n[r.animType]="translate("+e+"px, 0px)",r.$slideTrack.css(n)):(n[r.animType]="translate(0px,"+e+"px)",r.$slideTrack.css(n))},complete:function(){i&&i.call()}})):(r.applyTransition(),t=Math.ceil(t),!1===r.options.vertical?n[r.animType]="translate3d("+t+"px, 0px, 0px)":n[r.animType]="translate3d(0px,"+t+"px, 0px)",r.$slideTrack.css(n),i&&setTimeout((function(){r.disableTransition(),i.call()}),r.options.speed))},i.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=e(t).not(this.$slider)),t},i.prototype.asNavFor=function(t){var i=this.getNavTarget();null!==i&&"object"==typeof i&&i.each((function(){var i=e(this).slick("getSlick");i.unslicked||i.slideHandler(t,!0)}))},i.prototype.applyTransition=function(e){var t=this,i={};!1===t.options.fade?i[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:i[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},i.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},i.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},i.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},i.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},i.prototype.buildDots=function(){var t,i,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),i=e("<ul />").addClass(n.options.dotsClass),t=0;t<=n.getDotCount();t+=1)i.append(e("<li />").append(n.options.customPaging.call(this,n,t)));n.$dots=i.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},i.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each((function(t,i){e(i).attr("data-slick-index",t).data("originalStyling",e(i).attr("style")||"")})),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},i.prototype.buildRows=function(){var e,t,i,n,r,o,s,a=this;if(n=document.createDocumentFragment(),o=a.$slider.children(),a.options.rows>0){for(s=a.options.slidesPerRow*a.options.rows,r=Math.ceil(o.length/s),e=0;e<r;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var u=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var c=e*s+(t*a.options.slidesPerRow+i);o.get(c)&&u.appendChild(o.get(c))}l.appendChild(u)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},i.prototype.checkResponsive=function(t,i){var n,r,o,s=this,a=!1,l=s.$slider.width(),u=window.innerWidth||e(window).width();if("window"===s.respondTo?o=u:"slider"===s.respondTo?o=l:"min"===s.respondTo&&(o=Math.min(u,l)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(n in r=null,s.breakpoints)s.breakpoints.hasOwnProperty(n)&&(!1===s.originalSettings.mobileFirst?o<s.breakpoints[n]&&(r=s.breakpoints[n]):o>s.breakpoints[n]&&(r=s.breakpoints[n]));null!==r?null!==s.activeBreakpoint?(r!==s.activeBreakpoint||i)&&(s.activeBreakpoint=r,"unslick"===s.breakpointSettings[r]?s.unslick(r):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[r]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=r):(s.activeBreakpoint=r,"unslick"===s.breakpointSettings[r]?s.unslick(r):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[r]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=r):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),a=r),t||!1===a||s.$slider.trigger("breakpoint",[s,a])}},i.prototype.changeSlide=function(t,i){var n,r,o=this,s=e(t.currentTarget);switch(s.is("a")&&t.preventDefault(),s.is("li")||(s=s.closest("li")),n=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,t.data.message){case"previous":r=0===n?o.options.slidesToScroll:o.options.slidesToShow-n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-r,!1,i);break;case"next":r=0===n?o.options.slidesToScroll:n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+r,!1,i);break;case"index":var a=0===t.data.index?0:t.data.index||s.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(a),!1,i),s.children().trigger("focus");break;default:return}},i.prototype.checkNavigable=function(e){var t,i;if(i=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var n in t){if(e<t[n]){e=i;break}i=t[n]}return e},i.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},i.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},i.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>0&&((e=t.$slides.children().children()).removeAttr("style"),t.$slider.empty().append(e))},i.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},i.prototype.destroy=function(t){var i=this;i.autoPlayClear(),i.touchObject={},i.cleanUpEvents(),e(".slick-cloned",i.$slider).detach(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.$prevArrow.length&&(i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove()),i.$nextArrow&&i.$nextArrow.length&&(i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove()),i.$slides&&(i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each((function(){e(this).attr("style",e(this).data("originalStyling"))})),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.detach(),i.$list.detach(),i.$slider.append(i.$slides)),i.cleanUpRows(),i.$slider.removeClass("slick-slider"),i.$slider.removeClass("slick-initialized"),i.$slider.removeClass("slick-dotted"),i.unslicked=!0,t||i.$slider.trigger("destroy",[i])},i.prototype.disableTransition=function(e){var t=this,i={};i[t.transitionType]="",!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},i.prototype.fadeSlide=function(e,t){var i=this;!1===i.cssTransitions?(i.$slides.eq(e).css({zIndex:i.options.zIndex}),i.$slides.eq(e).animate({opacity:1},i.options.speed,i.options.easing,t)):(i.applyTransition(e),i.$slides.eq(e).css({opacity:1,zIndex:i.options.zIndex}),t&&setTimeout((function(){i.disableTransition(e),t.call()}),i.options.speed))},i.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},i.prototype.filterSlides=i.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},i.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",(function(i){i.stopImmediatePropagation();var n=e(this);setTimeout((function(){t.options.pauseOnFocus&&(t.focussed=n.is(":focus"),t.autoPlay())}),0)}))},i.prototype.getCurrent=i.prototype.slickCurrentSlide=function(){return this.currentSlide},i.prototype.getDotCount=function(){var e=this,t=0,i=0,n=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++n;else for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)n=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else n=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return n-1},i.prototype.getLeft=function(e){var t,i,n,r,o=this,s=0;return o.slideOffset=0,i=o.$slides.first().outerHeight(!0),!0===o.options.infinite?(o.slideCount>o.options.slidesToShow&&(o.slideOffset=o.slideWidth*o.options.slidesToShow*-1,r=-1,!0===o.options.vertical&&!0===o.options.centerMode&&(2===o.options.slidesToShow?r=-1.5:1===o.options.slidesToShow&&(r=-2)),s=i*o.options.slidesToShow*r),o.slideCount%o.options.slidesToScroll!=0&&e+o.options.slidesToScroll>o.slideCount&&o.slideCount>o.options.slidesToShow&&(e>o.slideCount?(o.slideOffset=(o.options.slidesToShow-(e-o.slideCount))*o.slideWidth*-1,s=(o.options.slidesToShow-(e-o.slideCount))*i*-1):(o.slideOffset=o.slideCount%o.options.slidesToScroll*o.slideWidth*-1,s=o.slideCount%o.options.slidesToScroll*i*-1))):e+o.options.slidesToShow>o.slideCount&&(o.slideOffset=(e+o.options.slidesToShow-o.slideCount)*o.slideWidth,s=(e+o.options.slidesToShow-o.slideCount)*i),o.slideCount<=o.options.slidesToShow&&(o.slideOffset=0,s=0),!0===o.options.centerMode&&o.slideCount<=o.options.slidesToShow?o.slideOffset=o.slideWidth*Math.floor(o.options.slidesToShow)/2-o.slideWidth*o.slideCount/2:!0===o.options.centerMode&&!0===o.options.infinite?o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)-o.slideWidth:!0===o.options.centerMode&&(o.slideOffset=0,o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)),t=!1===o.options.vertical?e*o.slideWidth*-1+o.slideOffset:e*i*-1+s,!0===o.options.variableWidth&&(n=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(e):o.$slideTrack.children(".slick-slide").eq(e+o.options.slidesToShow),t=!0===o.options.rtl?n[0]?-1*(o.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===o.options.centerMode&&(n=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(e):o.$slideTrack.children(".slick-slide").eq(e+o.options.slidesToShow+1),t=!0===o.options.rtl?n[0]?-1*(o.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,t+=(o.$list.width()-n.outerWidth())/2)),t},i.prototype.getOption=i.prototype.slickGetOption=function(e){return this.options[e]},i.prototype.getNavigableIndexes=function(){var e,t=this,i=0,n=0,r=[];for(!1===t.options.infinite?e=t.slideCount:(i=-1*t.options.slidesToScroll,n=-1*t.options.slidesToScroll,e=2*t.slideCount);i<e;)r.push(i),i=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return r},i.prototype.getSlick=function(){return this},i.prototype.getSlideCount=function(){var t,i,n=this;return i=!0===n.options.centerMode?n.slideWidth*Math.floor(n.options.slidesToShow/2):0,!0===n.options.swipeToSlide?(n.$slideTrack.find(".slick-slide").each((function(r,o){if(o.offsetLeft-i+e(o).outerWidth()/2>-1*n.swipeLeft)return t=o,!1})),Math.abs(e(t).attr("data-slick-index")-n.currentSlide)||1):n.options.slidesToScroll},i.prototype.goTo=i.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},i.prototype.init=function(t){var i=this;e(i.$slider).hasClass("slick-initialized")||(e(i.$slider).addClass("slick-initialized"),i.buildRows(),i.buildOut(),i.setProps(),i.startLoad(),i.loadSlider(),i.initializeEvents(),i.updateArrows(),i.updateDots(),i.checkResponsive(!0),i.focusHandler()),t&&i.$slider.trigger("init",[i]),!0===i.options.accessibility&&i.initADA(),i.options.autoplay&&(i.paused=!1,i.autoPlay())},i.prototype.initADA=function(){var t=this,i=Math.ceil(t.slideCount/t.options.slidesToShow),n=t.getNavigableIndexes().filter((function(e){return e>=0&&e<t.slideCount}));t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each((function(i){var r=n.indexOf(i);if(e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+i,tabindex:-1}),-1!==r){var o="slick-slide-control"+t.instanceUid+r;e("#"+o).length&&e(this).attr({"aria-describedby":o})}})),t.$dots.attr("role","tablist").find("li").each((function(r){var o=n[r];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+r,"aria-controls":"slick-slide"+t.instanceUid+o,"aria-label":r+1+" of "+i,"aria-selected":null,tabindex:"-1"})})).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var r=t.currentSlide,o=r+t.options.slidesToShow;r<o;r++)t.options.focusOnChange?t.$slides.eq(r).attr({tabindex:"0"}):t.$slides.eq(r).removeAttr("tabindex");t.activateADA()},i.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},i.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},i.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},i.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},i.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},i.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},i.prototype.lazyLoad=function(){var t,i,n,r=this;function o(t){e("img[data-lazy]",t).each((function(){var t=e(this),i=e(this).attr("data-lazy"),n=e(this).attr("data-srcset"),o=e(this).attr("data-sizes")||r.$slider.attr("data-sizes"),s=document.createElement("img");s.onload=function(){t.animate({opacity:0},100,(function(){n&&(t.attr("srcset",n),o&&t.attr("sizes",o)),t.attr("src",i).animate({opacity:1},200,(function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")})),r.$slider.trigger("lazyLoaded",[r,t,i])}))},s.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,t,i])},s.src=i}))}if(!0===r.options.centerMode?!0===r.options.infinite?n=(i=r.currentSlide+(r.options.slidesToShow/2+1))+r.options.slidesToShow+2:(i=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),n=r.options.slidesToShow/2+1+2+r.currentSlide):(i=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,n=Math.ceil(i+r.options.slidesToShow),!0===r.options.fade&&(i>0&&i--,n<=r.slideCount&&n++)),t=r.$slider.find(".slick-slide").slice(i,n),"anticipated"===r.options.lazyLoad)for(var s=i-1,a=n,l=r.$slider.find(".slick-slide"),u=0;u<r.options.slidesToScroll;u++)s<0&&(s=r.slideCount-1),t=(t=t.add(l.eq(s))).add(l.eq(a)),s--,a++;o(t),r.slideCount<=r.options.slidesToShow?o(r.$slider.find(".slick-slide")):r.currentSlide>=r.slideCount-r.options.slidesToShow?o(r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow)):0===r.currentSlide&&o(r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow))},i.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},i.prototype.next=i.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},i.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},i.prototype.pause=i.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},i.prototype.play=i.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},i.prototype.postSlide=function(t){var i=this;i.unslicked||(i.$slider.trigger("afterChange",[i,t]),i.animating=!1,i.slideCount>i.options.slidesToShow&&i.setPosition(),i.swipeLeft=null,i.options.autoplay&&i.autoPlay(),!0===i.options.accessibility&&(i.initADA(),i.options.focusOnChange&&e(i.$slides.get(i.currentSlide)).attr("tabindex",0).focus()))},i.prototype.prev=i.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},i.prototype.preventDefault=function(e){e.preventDefault()},i.prototype.progressiveLazyLoad=function(t){t=t||1;var i,n,r,o,s,a=this,l=e("img[data-lazy]",a.$slider);l.length?(i=l.first(),n=i.attr("data-lazy"),r=i.attr("data-srcset"),o=i.attr("data-sizes")||a.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){r&&(i.attr("srcset",r),o&&i.attr("sizes",o)),i.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,n]),a.progressiveLazyLoad()},s.onerror=function(){t<3?setTimeout((function(){a.progressiveLazyLoad(t+1)}),500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,n]),a.progressiveLazyLoad())},s.src=n):a.$slider.trigger("allImagesLoaded",[a])},i.prototype.refresh=function(t){var i,n,r=this;n=r.slideCount-r.options.slidesToShow,!r.options.infinite&&r.currentSlide>n&&(r.currentSlide=n),r.slideCount<=r.options.slidesToShow&&(r.currentSlide=0),i=r.currentSlide,r.destroy(!0),e.extend(r,r.initials,{currentSlide:i}),r.init(),t||r.changeSlide({data:{message:"index",index:i}},!1)},i.prototype.registerBreakpoints=function(){var t,i,n,r=this,o=r.options.responsive||null;if("array"===e.type(o)&&o.length){for(t in r.respondTo=r.options.respondTo||"window",o)if(n=r.breakpoints.length-1,o.hasOwnProperty(t)){for(i=o[t].breakpoint;n>=0;)r.breakpoints[n]&&r.breakpoints[n]===i&&r.breakpoints.splice(n,1),n--;r.breakpoints.push(i),r.breakpointSettings[i]=o[t].settings}r.breakpoints.sort((function(e,t){return r.options.mobileFirst?e-t:t-e}))}},i.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},i.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout((function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()}),50))},i.prototype.removeSlide=i.prototype.slickRemove=function(e,t,i){var n=this;if(e="boolean"==typeof e?!0===(t=e)?0:n.slideCount-1:!0===t?--e:e,n.slideCount<1||e<0||e>n.slideCount-1)return!1;n.unload(),!0===i?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(e).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit()},i.prototype.setCSS=function(e){var t,i,n=this,r={};!0===n.options.rtl&&(e=-e),t="left"==n.positionProp?Math.ceil(e)+"px":"0px",i="top"==n.positionProp?Math.ceil(e)+"px":"0px",r[n.positionProp]=e,!1===n.transformsEnabled?n.$slideTrack.css(r):(r={},!1===n.cssTransitions?(r[n.animType]="translate("+t+", "+i+")",n.$slideTrack.css(r)):(r[n.animType]="translate3d("+t+", "+i+", 0px)",n.$slideTrack.css(r)))},i.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},i.prototype.setFade=function(){var t,i=this;i.$slides.each((function(n,r){t=i.slideWidth*n*-1,!0===i.options.rtl?e(r).css({position:"relative",right:t,top:0,zIndex:i.options.zIndex-2,opacity:0}):e(r).css({position:"relative",left:t,top:0,zIndex:i.options.zIndex-2,opacity:0})})),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},i.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},i.prototype.setOption=i.prototype.slickSetOption=function(){var t,i,n,r,o,s=this,a=!1;if("object"===e.type(arguments[0])?(n=arguments[0],a=arguments[1],o="multiple"):"string"===e.type(arguments[0])&&(n=arguments[0],r=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)s.options[n]=r;else if("multiple"===o)e.each(n,(function(e,t){s.options[e]=t}));else if("responsive"===o)for(i in r)if("array"!==e.type(s.options.responsive))s.options.responsive=[r[i]];else{for(t=s.options.responsive.length-1;t>=0;)s.options.responsive[t].breakpoint===r[i].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(r[i])}a&&(s.unload(),s.reinit())},i.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},i.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},i.prototype.setSlideClasses=function(e){var t,i,n,r,o=this;if(i=o.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),o.$slides.eq(e).addClass("slick-current"),!0===o.options.centerMode){var s=o.options.slidesToShow%2==0?1:0;t=Math.floor(o.options.slidesToShow/2),!0===o.options.infinite&&(e>=t&&e<=o.slideCount-1-t?o.$slides.slice(e-t+s,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(n=o.options.slidesToShow+e,i.slice(n-t+1+s,n+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?i.eq(i.length-1-o.options.slidesToShow).addClass("slick-center"):e===o.slideCount-1&&i.eq(o.options.slidesToShow).addClass("slick-center")),o.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=o.slideCount-o.options.slidesToShow?o.$slides.slice(e,e+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=o.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(r=o.slideCount%o.options.slidesToShow,n=!0===o.options.infinite?o.options.slidesToShow+e:e,o.options.slidesToShow==o.options.slidesToScroll&&o.slideCount-e<o.options.slidesToShow?i.slice(n-(o.options.slidesToShow-r),n+r).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==o.options.lazyLoad&&"anticipated"!==o.options.lazyLoad||o.lazyLoad()},i.prototype.setupInfinite=function(){var t,i,n,r=this;if(!0===r.options.fade&&(r.options.centerMode=!1),!0===r.options.infinite&&!1===r.options.fade&&(i=null,r.slideCount>r.options.slidesToShow)){for(n=!0===r.options.centerMode?r.options.slidesToShow+1:r.options.slidesToShow,t=r.slideCount;t>r.slideCount-n;t-=1)i=t-1,e(r.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-r.slideCount).prependTo(r.$slideTrack).addClass("slick-cloned");for(t=0;t<n+r.slideCount;t+=1)i=t,e(r.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+r.slideCount).appendTo(r.$slideTrack).addClass("slick-cloned");r.$slideTrack.find(".slick-cloned").find("[id]").each((function(){e(this).attr("id","")}))}},i.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},i.prototype.selectHandler=function(t){var i=this,n=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),r=parseInt(n.attr("data-slick-index"));r||(r=0),i.slideCount<=i.options.slidesToShow?i.slideHandler(r,!1,!0):i.slideHandler(r)},i.prototype.slideHandler=function(e,t,i){var n,r,o,s,a,l,u=this;if(t=t||!1,!(!0===u.animating&&!0===u.options.waitForAnimate||!0===u.options.fade&&u.currentSlide===e))if(!1===t&&u.asNavFor(e),n=e,a=u.getLeft(n),s=u.getLeft(u.currentSlide),u.currentLeft=null===u.swipeLeft?s:u.swipeLeft,!1===u.options.infinite&&!1===u.options.centerMode&&(e<0||e>u.getDotCount()*u.options.slidesToScroll))!1===u.options.fade&&(n=u.currentSlide,!0!==i&&u.slideCount>u.options.slidesToShow?u.animateSlide(s,(function(){u.postSlide(n)})):u.postSlide(n));else if(!1===u.options.infinite&&!0===u.options.centerMode&&(e<0||e>u.slideCount-u.options.slidesToScroll))!1===u.options.fade&&(n=u.currentSlide,!0!==i&&u.slideCount>u.options.slidesToShow?u.animateSlide(s,(function(){u.postSlide(n)})):u.postSlide(n));else{if(u.options.autoplay&&clearInterval(u.autoPlayTimer),r=n<0?u.slideCount%u.options.slidesToScroll!=0?u.slideCount-u.slideCount%u.options.slidesToScroll:u.slideCount+n:n>=u.slideCount?u.slideCount%u.options.slidesToScroll!=0?0:n-u.slideCount:n,u.animating=!0,u.$slider.trigger("beforeChange",[u,u.currentSlide,r]),o=u.currentSlide,u.currentSlide=r,u.setSlideClasses(u.currentSlide),u.options.asNavFor&&(l=(l=u.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(u.currentSlide),u.updateDots(),u.updateArrows(),!0===u.options.fade)return!0!==i?(u.fadeSlideOut(o),u.fadeSlide(r,(function(){u.postSlide(r)}))):u.postSlide(r),void u.animateHeight();!0!==i&&u.slideCount>u.options.slidesToShow?u.animateSlide(a,(function(){u.postSlide(r)})):u.postSlide(r)}},i.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},i.prototype.swipeDirection=function(){var e,t,i,n,r=this;return e=r.touchObject.startX-r.touchObject.curX,t=r.touchObject.startY-r.touchObject.curY,i=Math.atan2(t,e),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&n>=0?!1===r.options.rtl?"left":"right":n<=360&&n>=315?!1===r.options.rtl?"left":"right":n>=135&&n<=225?!1===r.options.rtl?"right":"left":!0===r.options.verticalSwiping?n>=35&&n<=135?"down":"up":"vertical"},i.prototype.swipeEnd=function(e){var t,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1,!1;if(n.interrupted=!1,n.shouldClick=!(n.touchObject.swipeLength>10),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(t),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},i.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},i.prototype.swipeMove=function(e){var t,i,n,r,o,s,a=this;return o=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||o&&1!==o.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==o?o[0].pageX:e.clientX,a.touchObject.curY=void 0!==o?o[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&s>4?(a.scrolling=!0,!1):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),i=a.swipeDirection(),void 0!==e.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,e.preventDefault()),r=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(r=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,!1===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+n*r:a.swipeLeft=t+n*(a.$list.height()/a.listWidth)*r,!0===a.options.verticalSwiping&&(a.swipeLeft=t+n*r),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},i.prototype.swipeStart=function(e){var t,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return i.touchObject={},!1;void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==t?t.pageX:e.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==t?t.pageY:e.clientY,i.dragging=!0},i.prototype.unfilterSlides=i.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},i.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},i.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},i.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},i.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},i.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,t,n=this,r=arguments[0],o=Array.prototype.slice.call(arguments,1),s=n.length;for(e=0;e<s;e++)if("object"==typeof r||void 0===r?n[e].slick=new i(n[e],r):t=n[e].slick[r].apply(n[e].slick,o),void 0!==t)return t;return n}})),$(document).ready((function(){"use strict";$(".sliders").slick({arrows:!0,slidesToShow:1,fade:!0,cssEase:"linear",autoplay:!0,swipeToSlide:!0,infinite:!0,adaptiveHeight:!0,speed:1e3,autoplaySpeed:3e3,prevArrow:".arrows__arrow--next1",nextArrow:".arrows__arrow--prev1",responsive:[{breakpoint:576,settings:{slidesToShow:1,dots:!1}}]})}));const shader={vertex:"\t\t\t#ifdef GL_ES\n\t\tprecision mediump float;\n\t\t#endif\n\t\t\n\t\t\n\t\t// Simplex 2D noise\n\t\t//\n\t\tvec3 permute(vec3 x) {\n\t\treturn mod(((x*34.0)+1.0)*x, 289.0);\n\t\t}\n\t\t\n\t\tfloat snoise(vec2 v){\n\t\tconst vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\n\t\tvec2 i  = floor(v + dot(v, C.yy) );\n\t\tvec2 x0 = v -   i + dot(i, C.xx);\n\t\tvec2 i1;\n\t\ti1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n\t\tvec4 x12 = x0.xyxy + C.xxzz;\n\t\tx12.xy -= i1;\n\t\ti = mod(i, 289.0);\n\t\tvec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\t\tvec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n\t\tdot(x12.zw,x12.zw)), 0.0);\n\t\tm = m*m ;\n\t\tm = m*m ;\n\t\tvec3 x = 2.0 * fract(p * C.www) - 1.0;\n\t\tvec3 h = abs(x) - 0.5;\n\t\tvec3 ox = floor(x + 0.5);\n\t\tvec3 a0 = x - ox;\n\t\tm *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\t\tvec3 g;\n\t\tg.x  = a0.x  * x0.x  + h.x  * x0.y;\n\t\tg.yz = a0.yz * x12.xz + h.yz * x12.yw;\n\t\treturn 130.0 * dot(m, g);\n\t\t}\n\t\t\n\t\t// those are the mandatory attributes that the lib sets\n\t\tattribute vec3 aVertexPosition;\n\t\tattribute vec2 aTextureCoord;\n\t\t\n\t\t// those are mandatory uniforms that the lib sets and that contain our model view and projection matrix\n\t\tuniform mat4 uMVMatrix;\n\t\tuniform mat4 uPMatrix;\n\t\t\n\t\tuniform mat4 uTextureMatrix0;\n\t\t\n\t\t// our time uniform\n\t\tuniform float uTime;\n\t\t\n\t\t// if you want to pass your vertex and texture coords to the fragment shader\n\t\tvarying vec3 vVertexPosition;\n\t\tvarying vec2 vTextureCoord;\n\t\t\n\t\tvoid main() {\n\t\tvec3 vertexPosition = aVertexPosition;\n\t\t\n\t\tvec4 position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);\n\t\t\n\t\t// calculate a screen space uv\n\t\tvec2 screenUV = position.xy / position.ww; // (from -1 to 1)\n\t\tscreenUV = screenUV * 0.5 + 0.5; // remap to (0 to 1)\n\t\t\n\t\t// the bigger the more waves\n\t\tfloat noiseRatio = 2.0;\n\t\t\n\t\t// apply simplex noise based on time\n\t\tvec3 simplexNoise = vec3(snoise((screenUV * noiseRatio) - (uTime / 360.0)));\n\t\t\n\t\t// displace vertices\n\t\tvertexPosition.z += simplexNoise.r;\n\t\t\n\t\tgl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);\n\t\t\n\t\t// varyings\n\t\tvTextureCoord = (uTextureMatrix0 * vec4(aTextureCoord, 0.0, 1.0)).xy;\n\t\tvVertexPosition = vertexPosition;\n\t\t}",fragment:"\t#ifdef GL_ES\n\t\tprecision mediump float;\n\t\t#endif\n\t\t\n\t\t// get our varyings\n\t\tvarying vec3 vVertexPosition;\n\t\tvarying vec2 vTextureCoord;\n\t\t\n\t\t// our texture sampler (this is the lib default name, but it could be changed)\n\t\tuniform sampler2D uSampler0;\n\t\t\n\t\tvoid main() {\n\t\t// get our texture coords\n\t\tvec2 textureCoords = vTextureCoord;\n\t\t\n\t\t// apply our texture\n\t\tvec4 finalColor = texture2D(uSampler0, textureCoords);\n\t\t\n\t\t// uncomment this line to get a b&w version of what's happening\n\t\t// finalColor = vec4(0.3, 0.3, 0.3, 1.0);\n\t\t\n\t\t// fake shadows based on vertex position along Z axis\n\t\tfinalColor.rgb -= clamp(-vVertexPosition.z / 5.0, 0.0, 1.0);\n\t\t// fake lights based on vertex position along Z axis\n\t\tfinalColor.rgb += clamp(vVertexPosition.z / 5.0, 0.0, 1.0);\n\t\t\n\t\t// handling premultiplied alpha (useful if we were using a png with transparency)\n\t\tfinalColor = vec4(finalColor.rgb * finalColor.a, finalColor.a);\n\t\t\n\t\tgl_FragColor = finalColor;\n\t\t}"};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiQ3VydGFpbnMiLCJ0IiwiZSIsInRoaXMiLCJwbGFuZXMiLCJyZW5kZXJUYXJnZXRzIiwic2hhZGVyUGFzc2VzIiwiX2ltYWdlQ2FjaGUiLCJfZHJhd1N0YWNrcyIsIm9wYXF1ZSIsImxlbmd0aCIsInByb2dyYW1zIiwidHJhbnNwYXJlbnQiLCJyZW5kZXJQYXNzZXMiLCJzY2VuZVBhc3NlcyIsIl9kcmF3aW5nRW5hYmxlZCIsIl9mb3JjZVJlbmRlciIsImNvbnNvbGUiLCJ3YXJuIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIkVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYm9keSIsImFwcGVuZENoaWxkIiwiX2F1dG9SZXNpemUiLCJhdXRvUmVzaXplIiwiX2F1dG9SZW5kZXIiLCJhdXRvUmVuZGVyIiwiX3dhdGNoU2Nyb2xsIiwid2F0Y2hTY3JvbGwiLCJwaXhlbFJhdGlvIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsInJlbmRlcmluZ1NjYWxlIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiX3JlbmRlcmluZ1NjYWxlIiwiTWF0aCIsIm1heCIsIm1pbiIsInByZW11bHRpcGxpZWRBbHBoYSIsImFscGhhIiwicHJvZHVjdGlvbk1vZGUiLCJwcm9kdWN0aW9uIiwiX29uRXJyb3JDYWxsYmFjayIsIl9pbml0IiwibW9kdWxlIiwiZXhwb3J0cyIsIkVycm9yIiwiQyIsIkUiLCJyIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzIiwic2xpY2UiLCJnIiwiY29uY2F0IiwidSIsInB1c2giLCJpIiwiaW5kZXhPZiIsIm4iLCJvIiwidG9TdHJpbmciLCJ2IiwiaGFzT3duUHJvcGVydHkiLCJhIiwibCIsImNhbGwiLCJ5IiwibSIsIm5vZGVUeXBlIiwieCIsImMiLCJ0eXBlIiwic3JjIiwibm9uY2UiLCJub01vZHVsZSIsImIiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwiaGVhZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInciLCJmIiwiayIsImZuIiwiaW5pdCIsInAiLCJkIiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwiZ2V0IiwicHVzaFN0YWNrIiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsIm1hcCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImV4cGFuZG8iLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibm9vcCIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwidHJpbSIsIm1ha2VBcnJheSIsImluQXJyYXkiLCJncmVwIiwiZ3VpZCIsInN1cHBvcnQiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJoIiwiVCIsIkRhdGUiLCJTIiwidWUiLCJOIiwiQSIsIkQiLCJqIiwicSIsInBvcCIsIkwiLCJIIiwiTyIsIlAiLCJSIiwiTSIsIkkiLCJXIiwiJCIsIkYiLCJSZWdFeHAiLCJCIiwiXyIsInoiLCJVIiwiWCIsIlYiLCJHIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJZIiwiUSIsIkoiLCJLIiwiWiIsImVlIiwidGUiLCJuZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJlIiwiaWUiLCJjaGFyQ29kZUF0Iiwib2UiLCJhZSIsImJlIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwic2UiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsInhlIiwiam9pbiIsInllIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZUF0dHJpYnV0ZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJsZSIsImNlIiwiZmUiLCJhdHRySGFuZGxlIiwicGUiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiZGUiLCJoZSIsImdlIiwiaXNEaXNhYmxlZCIsInZlIiwiaXNYTUwiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJzZXREb2N1bWVudCIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiYXR0cmlidXRlcyIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInZhbHVlIiwiaW5uZXJIVE1MIiwibWF0Y2hlc1NlbGVjdG9yIiwibWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjb250YWlucyIsInNvcnREZXRhY2hlZCIsInVuc2hpZnQiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwidW5pcXVlU29ydCIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwiZ2V0VGV4dCIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsIm1hdGNoIiwicmVsYXRpdmUiLCI+IiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG9zIiwic2V0RmlsdGVycyIsIm5vdCIsImhhcyIsImxhbmciLCJ0YXJnZXQiLCJsb2NhdGlvbiIsImhhc2giLCJyb290IiwiZm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsImVtcHR5IiwicGFyZW50IiwiaGVhZGVyIiwiaW5wdXQiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsIm50aCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwibWUiLCJ3ZSIsIlRlIiwiQ2UiLCJFZSIsImZpbHRlcnMiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3RvciIsInNlbGVjdCIsImRlZmF1bHRWYWx1ZSIsImV4cHIiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwiaXMiLCJwYXJzZUhUTUwiLCJyZWFkeSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2IiwiY2xvc2VzdCIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsInNpYmxpbmdzIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJwcm9taXNlIiwiZG9uZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwib25jZSIsInN0b3BPbkZhbHNlIiwibWVtb3J5IiwicmVtb3ZlIiwiZGlzYWJsZSIsImxvY2siLCJsb2NrZWQiLCJmaXJlV2l0aCIsImZpcmUiLCJmaXJlZCIsIkRlZmVycmVkIiwic3RhdGUiLCJhbHdheXMiLCJjYXRjaCIsInBpcGUiLCJwcm9ncmVzcyIsIm5vdGlmeSIsInJlc29sdmUiLCJyZWplY3QiLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwid2hlbiIsIm5hbWUiLCJtZXNzYWdlIiwic3RhY2siLCJyZWFkeUV4Y2VwdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVdhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJ0b1VwcGVyQ2FzZSIsInVpZCIsImNhY2hlIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJzZXQiLCJhY2Nlc3MiLCJoYXNEYXRhIiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwicXVldWUiLCJkZXF1ZXVlIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwiY2xlYXJRdWV1ZSIsInNvdXJjZSIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJjdXIiLCJjc3NOdW1iZXIiLCJ1bml0Iiwic3RhcnQiLCJzaG93IiwiaGlkZSIsInRvZ2dsZSIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0Iiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwia2UiLCJTZSIsIk5lIiwiQWUiLCJvZmYiLCJldmVudCIsIkRlIiwibmFtZXNwYWNlIiwiaGFuZGxlciIsImlzVHJpZ2dlciIsInNwZWNpYWwiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJFdmVudCIsImdsb2JhbCIsImV2ZW50cyIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJvcmlnVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaGFuZGxlcnMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJlbGVtIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwiaGFuZGxlT2JqIiwicmVzdWx0IiwicG9zdERpc3BhdGNoIiwiYWRkUHJvcCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNvZGUiLCJjaGFyQ29kZSIsImtleSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib24iLCJvbmUiLCJqZSIsInFlIiwiTGUiLCJIZSIsIk9lIiwiUGUiLCJSZSIsIk1lIiwiSWUiLCJodG1sIiwiY2xvbmUiLCJfZXZhbFVybCIsIldlIiwiY2xlYW5EYXRhIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIiRlIiwiRmUiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiQmUiLCJfZSIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsInplIiwiY3NzVGV4dCIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBvc2l0aW9uIiwib2Zmc2V0V2lkdGgiLCJyb3VuZCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsIlVlIiwiWGUiLCJWZSIsIkdlIiwiY3NzUHJvcHMiLCJZZSIsIlFlIiwiSmUiLCJ2aXNpYmlsaXR5IiwiS2UiLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsIlplIiwiZXQiLCJjZWlsIiwidHQiLCJnZXRDbGllbnRSZWN0cyIsIm50IiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZ3JpZEFyZWEiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1N0YXJ0IiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJleHBhbmQiLCJUd2VlbiIsInByb3AiLCJlYXNpbmciLCJvcHRpb25zIiwicHJvcEhvb2tzIiwicnVuIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsInJ0IiwiaXQiLCJvdCIsImF0Iiwic3QiLCJ1dCIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImN0IiwiZnQiLCJoZWlnaHQiLCJwdCIsImR0IiwidHdlZW5lcnMiLCJwcmVmaWx0ZXJzIiwic3RhcnRUaW1lIiwidHdlZW5zIiwicHJvcHMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImNyZWF0ZVR3ZWVuIiwiYmluZCIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwiQW5pbWF0aW9uIiwiKiIsInR3ZWVuZXIiLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJzcGVlZHMiLCJvbGQiLCJmYWRlVG8iLCJhbmltYXRlIiwiZmluaXNoIiwidGltZXJzIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImh0IiwicmVtb3ZlQXR0ciIsImF0dHJIb29rcyIsInZ0IiwieXQiLCJtdCIsInh0IiwiYnQiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInBhcnNlSW50IiwiZm9yIiwiY2xhc3MiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJoYXNDbGFzcyIsInd0IiwidmFsIiwidmFsSG9va3MiLCJmb2N1c2luIiwiVHQiLCJDdCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJFdCIsImt0IiwiU3QiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsIk50IiwiQXQiLCJEdCIsImp0IiwicXQiLCJwYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwiTHQiLCJIdCIsIk90IiwiUHQiLCJSdCIsIk10IiwiSXQiLCJXdCIsIiR0IiwiRnQiLCJCdCIsIl90IiwiZGF0YVR5cGVzIiwienQiLCJhamF4U2V0dGluZ3MiLCJmbGF0T3B0aW9ucyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwieG1sIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiY29udGV4dCIsImFqYXhTZXR1cCIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1c0NvZGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsIm1ldGhvZCIsImRhdGFUeXBlIiwiY3Jvc3NEb21haW4iLCJob3N0IiwidHJhZGl0aW9uYWwiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInRpbWVvdXQiLCJzZW5kIiwiZGF0YUZpbHRlciIsInN0YXR1c1RleHQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGV4dCBzY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ3cmFwIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiVXQiLCIwIiwiMTIyMyIsIlh0IiwiY29ycyIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwicmVzcG9uc2UiLCJzY3JpcHQiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiVnQiLCJHdCIsIll0IiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsInVzaW5nIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJob3ZlciIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsInByb3h5IiwiaG9sZFJlYWR5IiwicGFyc2VKU09OIiwiaXNGdW5jdGlvbiIsImlzV2luZG93IiwiY2FtZWxDYXNlIiwiaXNOdW1lcmljIiwiZGVmaW5lIiwiYW1kIiwiUXQiLCJqUXVlcnkiLCJKdCIsIm5vQ29uZmxpY3QiLCJmYWN0b3J5IiwiUG9wcGVyIiwiaXNCcm93c2VyIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidGltZW91dER1cmF0aW9uIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZGVib3VuY2UiLCJQcm9taXNlIiwiY2FsbGVkIiwic2NoZWR1bGVkIiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZWxlbWVudCIsInByb3BlcnR5IiwiZ2V0UGFyZW50Tm9kZSIsImdldFNjcm9sbFBhcmVudCIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsImlzSUUxMSIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwiaXNJRTEwIiwiaXNJRSIsInZlcnNpb24iLCJnZXRPZmZzZXRQYXJlbnQiLCJub09mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsImdldFJvb3QiLCJub2RlIiwiZmluZENvbW1vbk9mZnNldFBhcmVudCIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJlbGVtZW50MXJvb3QiLCJnZXRTY3JvbGwiLCJzaWRlIiwidW5kZWZpbmVkIiwidXBwZXJTaWRlIiwic2Nyb2xsaW5nRWxlbWVudCIsImluY2x1ZGVTY3JvbGwiLCJyZWN0Iiwic3VidHJhY3QiLCJtb2RpZmllciIsImJvdHRvbSIsImdldEJvcmRlcnNTaXplIiwic3R5bGVzIiwiYXhpcyIsInNpZGVBIiwic2lkZUIiLCJnZXRTaXplIiwiY29tcHV0ZWRTdHlsZSIsImdldFdpbmRvd1NpemVzIiwiY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIm9iaiIsIl9leHRlbmRzIiwiYXNzaWduIiwiZ2V0Q2xpZW50UmVjdCIsIm9mZnNldHMiLCJzaXplcyIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaG9yaXpTY3JvbGxiYXIiLCJ2ZXJ0U2Nyb2xsYmFyIiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsImdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSIsImV4Y2x1ZGVTY3JvbGwiLCJyZWxhdGl2ZU9mZnNldCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImlzRml4ZWQiLCJnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50IiwicGFyZW50RWxlbWVudCIsImVsIiwiZ2V0Qm91bmRhcmllcyIsInBvcHBlciIsInJlZmVyZW5jZSIsImJvdW5kYXJpZXNFbGVtZW50IiwiYm91bmRhcmllcyIsImJvdW5kYXJpZXNOb2RlIiwiX2dldFdpbmRvd1NpemVzIiwiaXNQYWRkaW5nTnVtYmVyIiwiZ2V0QXJlYSIsIl9yZWYiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInBsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwia2V5cyIsImFyZWEiLCJmaWx0ZXJlZEFyZWFzIiwiX3JlZjIiLCJjb21wdXRlZFBsYWNlbWVudCIsInZhcmlhdGlvbiIsImdldFJlZmVyZW5jZU9mZnNldHMiLCJjb21tb25PZmZzZXRQYXJlbnQiLCJnZXRPdXRlclNpemVzIiwibWFyZ2luQm90dG9tIiwibWFyZ2luUmlnaHQiLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsIm1hdGNoZWQiLCJnZXRQb3BwZXJPZmZzZXRzIiwicmVmZXJlbmNlT2Zmc2V0cyIsInBvcHBlclJlY3QiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJhcnIiLCJjaGVjayIsInJ1bk1vZGlmaWVycyIsIm1vZGlmaWVycyIsImVuZHMiLCJmaW5kSW5kZXgiLCJmb3JFYWNoIiwidXBkYXRlIiwiaXNEZXN0cm95ZWQiLCJhcnJvd1N0eWxlcyIsImZsaXBwZWQiLCJwb3NpdGlvbkZpeGVkIiwiZmxpcCIsIm9yaWdpbmFsUGxhY2VtZW50IiwiaXNDcmVhdGVkIiwib25VcGRhdGUiLCJvbkNyZWF0ZSIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwiY2hhckF0IiwicHJlZml4IiwidG9DaGVjayIsImRlc3Ryb3kiLCJ3aWxsQ2hhbmdlIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlT25EZXN0cm95IiwiZ2V0V2luZG93Iiwic2V0dXBFdmVudExpc3RlbmVycyIsInVwZGF0ZUJvdW5kIiwicGFzc2l2ZSIsInNjcm9sbEVsZW1lbnQiLCJhdHRhY2hUb1Njcm9sbFBhcmVudHMiLCJjYWxsYmFjayIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJldmVudHNFbmFibGVkIiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJzY2hlZHVsZVVwZGF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2V0U3R5bGVzIiwiaXNGaXJlZm94IiwiaXNNb2RpZmllclJlcXVpcmVkIiwicmVxdWVzdGluZ05hbWUiLCJyZXF1ZXN0ZWROYW1lIiwicmVxdWVzdGluZyIsImlzUmVxdWlyZWQiLCJfcmVxdWVzdGluZyIsInJlcXVlc3RlZCIsInBsYWNlbWVudHMiLCJ2YWxpZFBsYWNlbWVudHMiLCJjbG9ja3dpc2UiLCJjb3VudGVyIiwiQkVIQVZJT1JTIiwicGFyc2VPZmZzZXQiLCJiYXNlUGxhY2VtZW50IiwidXNlSGVpZ2h0IiwiZnJhZ21lbnRzIiwiZnJhZyIsImRpdmlkZXIiLCJzZWFyY2giLCJzcGxpdFJlZ2V4Iiwib3BzIiwib3AiLCJtZXJnZVdpdGhQcmV2aW91cyIsInJlZHVjZSIsInN0ciIsInRvVmFsdWUiLCJpbmRleDIiLCJEZWZhdWx0cyIsInNoaWZ0dmFyaWF0aW9uIiwiX2RhdGEkb2Zmc2V0cyIsImlzVmVydGljYWwiLCJzaGlmdE9mZnNldHMiLCJwcmV2ZW50T3ZlcmZsb3ciLCJ0cmFuc2Zvcm1Qcm9wIiwicG9wcGVyU3R5bGVzIiwidHJhbnNmb3JtIiwicHJpb3JpdHkiLCJwcmltYXJ5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsInNlY29uZGFyeSIsImtlZXBUb2dldGhlciIsImZsb29yIiwib3BTaWRlIiwiYXJyb3ciLCJfZGF0YSRvZmZzZXRzJGFycm93IiwiYXJyb3dFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImxlbiIsInNpZGVDYXBpdGFsaXplZCIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsImJlaGF2aW9yIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb24iLCJmbGlwVmFyaWF0aW9ucyIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImJvdW5kIiwiY29tcHV0ZVN0eWxlIiwibGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIiwiZ3B1QWNjZWxlcmF0aW9uIiwib2Zmc2V0UGFyZW50UmVjdCIsInNob3VsZFJvdW5kIiwibm9Sb3VuZCIsInJlZmVyZW5jZVdpZHRoIiwicG9wcGVyV2lkdGgiLCJpc1ZhcmlhdGlvbiIsImhvcml6b250YWxUb0ludGVnZXIiLCJ2ZXJ0aWNhbFRvSW50ZWdlciIsImdldFJvdW5kZWRPZmZzZXRzIiwicHJlZml4ZWRQcm9wZXJ0eSIsImludmVydFRvcCIsImludmVydExlZnQiLCJ4LXBsYWNlbWVudCIsImFwcGx5U3R5bGUiLCJvbkxvYWQiLCJtb2RpZmllck9wdGlvbnMiLCJfdGhpcyIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCJnbENhbnZhcyIsImdsIiwiZ2V0Q29udGV4dCIsIl9pc1dlYkdMMiIsIl9nZXRFeHRlbnNpb25zIiwiX2dsU3RhdGUiLCJjdXJyZW50UHJvZ3JhbUlEIiwiY3VycmVudEJ1ZmZlcnNJRCIsInNldERlcHRoIiwiZnJhbWVCdWZmZXJJRCIsInNjZW5lUGFzc0luZGV4IiwiX2NvbnRleHRMb3N0SGFuZGxlciIsIl9jb250ZXh0TG9zdCIsIl9jb250ZXh0UmVzdG9yZWRIYW5kbGVyIiwiX2NvbnRleHRSZXN0b3JlZCIsIl9zY3JvbGxNYW5hZ2VyIiwiX3Njcm9sbCIsInNob3VsZFdhdGNoIiwieE9mZnNldCIsInlPZmZzZXQiLCJsYXN0WERlbHRhIiwibGFzdFlEZWx0YSIsInNldFBpeGVsUmF0aW8iLCJfcmVzaXplSGFuZGxlciIsInJlc2l6ZSIsIl9yZWFkeVRvRHJhdyIsIl9leHRlbnNpb25zIiwiRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCIsImdldEV4dGVuc2lvbiIsIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhciIsIldFQkdMX2xvc2VfY29udGV4dCIsIk9FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0IiwiT0VTX3RleHR1cmVfZmxvYXQiLCJPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0IiwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXIiLCJPRVNfZWxlbWVudF9pbmRleF91aW50IiwiT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzIiwiRVhUX3NSR0IiLCJXRUJHTF9kZXB0aF90ZXh0dXJlIiwiV0VCR0xfZHJhd19idWZmZXJzIiwiX3NldFNpemUiLCJfYm91bmRpbmdSZWN0IiwiTVNTdHJlYW0iLCJvZmZzZXRUb3AiLCJ2aWV3cG9ydCIsImRyYXdpbmdCdWZmZXJXaWR0aCIsImRyYXdpbmdCdWZmZXJIZWlnaHQiLCJnZXRCb3VuZGluZ1JlY3QiLCJfY2FuRHJhdyIsInBsYW5lUmVzaXplIiwibmVlZFJlbmRlciIsIl9vbkFmdGVyUmVzaXplQ2FsbGJhY2siLCJ1cGRhdGVTY3JvbGxWYWx1ZXMiLCJ1cGRhdGVTY3JvbGxQb3NpdGlvbiIsIl9vblNjcm9sbENhbGxiYWNrIiwiZ2V0U2Nyb2xsRGVsdGFzIiwiZ2V0U2Nyb2xsVmFsdWVzIiwiZW5hYmxlRHJhd2luZyIsImRpc2FibGVEcmF3aW5nIiwiX2FuaW1hdGlvbkZyYW1lSUQiLCJfb25Db250ZXh0TG9zdENhbGxiYWNrIiwicmVzdG9yZUNvbnRleHQiLCJfc2V0QmxlbmRGdW5jIiwiX3NldERlcHRoIiwiX3Jlc3RvcmVDb250ZXh0IiwiX29uQ29udGV4dFJlc3RvcmVkQ2FsbGJhY2siLCJfYW5pbWF0ZSIsImRpc3Bvc2UiLCJfaXNEZXN0cm95aW5nIiwicmVtb3ZlUGxhbmUiLCJyZW1vdmVTaGFkZXJQYXNzIiwicmVtb3ZlUmVuZGVyVGFyZ2V0IiwiZGVsZXRlU2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJ2ZXJ0ZXhTaGFkZXIiLCJkZWxldGVQcm9ncmFtIiwicHJvZ3JhbSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIl9jbGVhciIsImxvc2VDb250ZXh0IiwiX2NyZWF0ZVNoYWRlciIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsIlZFUlRFWF9TSEFERVIiLCJnZXRTaGFkZXJTb3VyY2UiLCJnZXRTaGFkZXJJbmZvTG9nIiwiX2lzRXF1YWxTaGFkZXIiLCJsb2NhbGVDb21wYXJlIiwiX3NldHVwUHJvZ3JhbSIsInZzQ29kZSIsImZzQ29kZSIsInNoYXJlUHJvZ3JhbSIsIl91c2VFeGlzdGluZ1NoYWRlcnMiLCJfY3JlYXRlUHJvZ3JhbSIsIl90eXBlIiwiX3VzZU5ld1NoYWRlcnMiLCJ2cyIsImZzIiwiRlJBR01FTlRfU0hBREVSIiwiY3JlYXRlUHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiX3VzZVByb2dyYW0iLCJ1c2VQcm9ncmFtIiwiYWRkUGxhbmUiLCJQbGFuZSIsIl91c2VkUHJvZ3JhbSIsIl9kaXNwb3NlIiwiX3V1aWQiLCJfc3RhY2tQbGFuZSIsIl90cmFuc3BhcmVudCIsImFkZFJlbmRlclRhcmdldCIsIlJlbmRlclRhcmdldCIsIl9zaGFkZXJQYXNzIiwiYWRkU2hhZGVyUGFzcyIsIlNoYWRlclBhc3MiLCJyZW5kZXJUYXJnZXQiLCJfaXNTY2VuZVBhc3MiLCJjbGVhciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwiX2JpbmRGcmFtZUJ1ZmZlciIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiX2ZyYW1lQnVmZmVyIiwiX3NpemUiLCJfc2hvdWxkQ2xlYXIiLCJkZXB0aFRlc3QiLCJlbmFibGUiLCJERVBUSF9URVNUIiwiQkxFTkQiLCJibGVuZEZ1bmMiLCJTUkNfQUxQSEEiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwiT05FIiwiX2dlbmVyYXRlVVVJRCIsIl9tdWx0aXBseU1hdHJpeCIsIkZsb2F0MzJBcnJheSIsIl9zY2FsZU1hdHJpeCIsIl9hcHBseVRyYW5zZm9ybWF0aW9uc01hdHJpeEZyb21PcmlnaW4iLCJzaW4iLCJfYXBwbHlNYXRyaXhUb1BvaW50IiwibG9nIiwicmVuZGVyIiwiX2RyYXdQbGFuZVN0YWNrIiwiX2RyYXdQbGFuZSIsIl9vblJlbmRlckNhbGxiYWNrIiwiY2xlYXJEZXB0aCIsIm9uQWZ0ZXJSZXNpemUiLCJvbkVycm9yIiwib25Db250ZXh0TG9zdCIsIm9uQ29udGV4dFJlc3RvcmVkIiwib25SZW5kZXIiLCJvblNjcm9sbCIsIkJhc2VQbGFuZSIsIl9jdXJ0YWlucyIsImh0bWxFbGVtZW50IiwiX2luaXRCYXNlUGxhbmUiLCJfdXBkYXRlUGVyc3BlY3RpdmVNYXRyaXgiLCJfdXBkYXRlTVZNYXRyaXgiLCJfZGVmaW5pdGlvbiIsIndpZHRoU2VnbWVudHMiLCJoZWlnaHRTZWdtZW50cyIsImJ1ZmZlcnNJRCIsIl9kZXB0aFRlc3QiLCJfbG9hZGluZ01hbmFnZXIiLCJzb3VyY2VzTG9hZGVkIiwiaW5pdFNvdXJjZXNUb0xvYWQiLCJfc2V0dXBTaGFkZXJzIiwidmVydGV4U2hhZGVyQ29kZSIsImZyYWdtZW50U2hhZGVyQ29kZSIsImltYWdlcyIsInZpZGVvcyIsImNhbnZhc2VzIiwidGV4dHVyZXMiLCJjcm9zc09yaWdpbiIsInVuaWZvcm1zIiwibGFzdFZhbHVlIiwidXNlckRhdGEiLCJfc2hvdWxkRHJhdyIsIl9zZXRBdHRyaWJ1dGVzIiwiX3NldERvY3VtZW50U2l6ZXMiLCJfc2V0VW5pZm9ybXMiLCJfaW5pdGlhbGl6ZUJ1ZmZlcnMiLCJfZ2V0RGVmYXVsdFZTIiwiX2dldERlZmF1bHRGUyIsInZlcnRleFNoYWRlcklEIiwiZnJhZ21lbnRTaGFkZXJJRCIsIl9oYW5kbGVVbmlmb3JtU2V0dGluZyIsInVuaWZvcm0xaSIsInVuaWZvcm0xaXYiLCJ1bmlmb3JtMWYiLCJ1bmlmb3JtMWZ2IiwidW5pZm9ybTJpIiwidW5pZm9ybTJpdiIsInVuaWZvcm0yZiIsInVuaWZvcm0yZnYiLCJ1bmlmb3JtM2kiLCJ1bmlmb3JtM2l2IiwidW5pZm9ybTNmIiwidW5pZm9ybTNmdiIsInVuaWZvcm00aSIsInVuaWZvcm00aXYiLCJ1bmlmb3JtNGYiLCJ1bmlmb3JtNGZ2IiwidW5pZm9ybU1hdHJpeDJmdiIsInVuaWZvcm1NYXRyaXgzZnYiLCJ1bmlmb3JtTWF0cml4NGZ2IiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwiX3VwZGF0ZVVuaWZvcm1zIiwic3RyaW5naWZ5IiwiX2F0dHJpYnV0ZXMiLCJ2ZXJ0ZXhQb3NpdGlvbiIsImdldEF0dHJpYkxvY2F0aW9uIiwidGV4dHVyZUNvb3JkIiwiX3NldFBsYW5lVmVydGljZXMiLCJfZ2VvbWV0cnkiLCJ2ZXJ0aWNlcyIsIl9tYXRlcmlhbCIsInV2cyIsImJ1ZmZlckluZm9zIiwiY3JlYXRlQnVmZmVyIiwiaXRlbVNpemUiLCJudW1iZXJPZkl0ZW1zIiwiX3ZhbyIsImNyZWF0ZVZlcnRleEFycmF5IiwiYmluZFZlcnRleEFycmF5IiwiY3JlYXRlVmVydGV4QXJyYXlPRVMiLCJiaW5kVmVydGV4QXJyYXlPRVMiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJidWZmZXJEYXRhIiwiU1RBVElDX0RSQVciLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiRkxPQVQiLCJfbWF0cmljZXMiLCJfZGVwdGhCdWZmZXIiLCJfY3JlYXRlRnJhbWVCdWZmZXIiLCJzZXRSZW5kZXJUYXJnZXQiLCJfc2V0VGV4dHVyZVVuaWZvcm1zIiwic2V0RnJvbVRleHR1cmUiLCJfaW5pdE1hdHJpY2VzIiwic2V0UGVyc3BlY3RpdmUiLCJfZm92IiwiX2FwcGx5Q1NTUG9zaXRpb25zIiwiZ2V0V2ViR0xCb3VuZGluZ1JlY3QiLCJtVlBNYXRyaXgiLCJjcmVhdGVUZXh0dXJlIiwic2FtcGxlciIsIlRleHR1cmUiLCJmcm9tVGV4dHVyZSIsImlzRkJPVGV4dHVyZSIsIl9pc1BsYW5lUmVhZHkiLCJfb25SZWFkeUNhbGxiYWNrIiwibG9hZFNvdXJjZXMiLCJsb2FkU291cmNlIiwidGFnTmFtZSIsImxvYWRJbWFnZSIsImxvYWRWaWRlbyIsImxvYWRDYW52YXMiLCJfc291cmNlTG9hZEVycm9yIiwiX2dldFRleHR1cmVGcm9tQ2FjaGUiLCJfb25Tb3VyY2VMb2FkZWRIYW5kbGVyIiwiX29uU291cmNlTG9hZGVkIiwicHJlbG9hZCIsIm11dGVkIiwibG9vcCIsIl9vblZpZGVvTG9hZGVkRGF0YSIsIkhBVkVfRlVUVVJFX0RBVEEiLCJsb2FkSW1hZ2VzIiwibG9hZFZpZGVvcyIsImxvYWRDYW52YXNlcyIsInBsYXlWaWRlb3MiLCJwbGF5IiwibW91c2VUb1BsYW5lQ29vcmRzIiwic2NhbGUiLCJfYmluZFBsYW5lQnVmZmVycyIsIl9iaW5kUGxhbmVUZXh0dXJlIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwiX3NhbXBsZXIiLCJ0ZXh0dXJlIiwiX3NldFBlcnNwZWN0aXZlTWF0cml4IiwiX3NldE1WTWF0cml4IiwiX2RyYXdUZXh0dXJlIiwiZHJhd0FycmF5cyIsIlRSSUFOR0xFUyIsIl9vbkFmdGVyUmVuZGVyQ2FsbGJhY2siLCJkZWxldGVWZXJ0ZXhBcnJheSIsImRlbGV0ZVZlcnRleEFycmF5T0VTIiwiZGVsZXRlQnVmZmVyIiwib25Mb2FkaW5nIiwiX29uUGxhbmVMb2FkaW5nQ2FsbGJhY2siLCJvblJlYWR5Iiwib25BZnRlclJlbmRlciIsIl9zZXRJbml0UGFyYW1zIiwiX2luaXRQb3NpdGlvbnMiLCJfaW5pdFNvdXJjZXMiLCJjcmVhdGUiLCJhbHdheXNEcmF3IiwiZHJhd0NoZWNrTWFyZ2lucyIsIl9pbml0VHJhbnNmb3JtVmFsdWVzIiwiYXV0b2xvYWRTb3VyY2VzIiwiZm92IiwiX25lYXJQbGFuZSIsIl9mYXJQbGFuZSIsInJvdGF0aW9uIiwicmVsYXRpdmVUcmFuc2xhdGlvbiIsIl90cmFuc2xhdGlvbiIsInRyYW5zZm9ybU9yaWdpbiIsIl9zaG91bGREcmF3Q2hlY2siLCJtdk1hdHJpeCIsIm1hdHJpeCIsInBNYXRyaXgiLCJyZXNldFBsYW5lIiwidXBkYXRlUG9zaXRpb24iLCJfc2V0Q29tcHV0ZWRTaXplcyIsImNvbXB1dGVkIiwic2V0U2NhbGUiLCJzZXRSb3RhdGlvbiIsInNldFRyYW5zZm9ybU9yaWdpbiIsIl9zZXRUcmFuc2xhdGlvbiIsIl9kb2N1bWVudFRvUGxhbmVTcGFjZSIsInNldFJlbGF0aXZlUG9zaXRpb24iLCJfb25MZWF2ZVZpZXdDYWxsYmFjayIsIl9vblJlRW50ZXJWaWV3Q2FsbGJhY2siLCJlbmFibGVEZXB0aFRlc3QiLCJtb3ZlVG9Gcm9udCIsIm9uUmVFbnRlclZpZXciLCJvbkxlYXZlVmlldyIsInNoYWRlclBhc3MiLCJfZGVwdGgiLCJkZXB0aCIsIl9taW5TaXplIiwibWluSGVpZ2h0IiwiX2luaXRSZW5kZXJUYXJnZXQiLCJfYmluZERlcHRoQnVmZmVyIiwiYmluZFJlbmRlcmJ1ZmZlciIsIlJFTkRFUkJVRkZFUiIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJERVBUSF9DT01QT05FTlQxNiIsImZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyIiwiREVQVEhfQVRUQUNITUVOVCIsIl9jcmVhdGVGQk9UZXh0dXJlIiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJkZWxldGVSZW5kZXJidWZmZXIiLCJfaW5pdFNoYWRlclBhc3NQbGFuZSIsIl9wYXJlbnQiLCJfdGV4dHVyZU1hdHJpeCIsIl93aWxsVXBkYXRlIiwic2hvdWxkVXBkYXRlIiwiX2ZvcmNlVXBkYXRlIiwiX2luaXRGcm9tVGV4dHVyZSIsIl9pbnRlcm5hbEZvcm1hdCIsIlJHQkEiLCJfZm9ybWF0IiwiX3RleHR1cmVUeXBlIiwiVU5TSUdORURfQllURSIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX0ZMSVBfWV9XRUJHTCIsIlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCIsIlVOUEFDS19BTElHTk1FTlQiLCJ0ZXhJbWFnZTJEIiwiVWludDhBcnJheSIsIl9zb3VyY2VMb2FkZWQiLCJfZ2V0U2l6ZXMiLCJfdXBkYXRlVGV4dHVyZU1hdHJpeCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01JTl9GSUxURVIiLCJMSU5FQVIiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFX1dSQVBfUyIsIkNMQU1QX1RPX0VER0UiLCJURVhUVVJFX1dSQVBfVCIsIlJHQkExNkYiLCJIQUxGX0ZMT0FUIiwiSEFMRl9GTE9BVF9PRVMiLCJfb3JpZ2luYWxUZXh0dXJlIiwic2V0U291cmNlIiwibmF0dXJhbFdpZHRoIiwidmlkZW9XaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJ2aWRlb0hlaWdodCIsIm5lZWRVcGRhdGUiLCJfdXBkYXRlIiwiX3lGbGlwcGVkIiwicGFyZW50V2lkdGgiLCJwYXJlbnRIZWlnaHQiLCJzb3VyY2VXaWR0aCIsInNvdXJjZUhlaWdodCIsIkhBVkVfQ1VSUkVOVF9EQVRBIiwiX3Jlc3RvcmVGcm9tVGV4dHVyZSIsInBhdXNlIiwiZGVsZXRlVGV4dHVyZSIsInJlcXVpcmUiLCJzZWxmIiwiVXRpbCIsInRyYW5zaXRpb25FbmRFbXVsYXRvciIsIlRSQU5TSVRJT05fRU5EIiwidHJpZ2dlclRyYW5zaXRpb25FbmQiLCJnZXRVSUQiLCJnZXRTZWxlY3RvckZyb21FbGVtZW50IiwiaHJlZkF0dHIiLCJlcnIiLCJnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uIiwiZmxvYXRUcmFuc2l0aW9uRGVsYXkiLCJyZWZsb3ciLCJzdXBwb3J0c1RyYW5zaXRpb25FbmQiLCJCb29sZWFuIiwiaXNFbGVtZW50IiwidHlwZUNoZWNrQ29uZmlnIiwiY29tcG9uZW50TmFtZSIsImNvbmZpZyIsImNvbmZpZ1R5cGVzIiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlVHlwZSIsImZpbmRTaGFkb3dSb290IiwiYXR0YWNoU2hhZG93IiwiU2hhZG93Um9vdCIsImpRdWVyeURldGVjdGlvbiIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiQ29sbGFwc2UiLCJfZGVmaW5lUHJvcGVydGllcyIsIl9kZWZpbmVQcm9wZXJ0eSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJOQU1FIiwiREFUQV9LRVkiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJEZWZhdWx0IiwiRGVmYXVsdFR5cGUiLCJTSE9XIiwiU0hPV04iLCJISURFIiwiSElEREVOIiwiQ0xJQ0tfREFUQV9BUEkiLCJDbGFzc05hbWUiLCJEaW1lbnNpb24iLCJTZWxlY3RvciIsIl9pc1RyYW5zaXRpb25pbmciLCJfZWxlbWVudCIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX3RyaWdnZXJBcnJheSIsInRvZ2dsZUxpc3QiLCJmaWx0ZXJFbGVtZW50IiwiZm91bmRFbGVtIiwiX3NlbGVjdG9yIiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJfcHJvdG8iLCJhY3RpdmVzIiwiYWN0aXZlc0RhdGEiLCJjbGFzc0xpc3QiLCJzdGFydEV2ZW50IiwiX2pRdWVyeUludGVyZmFjZSIsImRpbWVuc2lvbiIsIl9nZXREaW1lbnNpb24iLCJzZXRUcmFuc2l0aW9uaW5nIiwic2Nyb2xsU2l6ZSIsIl90aGlzMiIsInRyaWdnZXJBcnJheUxlbmd0aCIsImlzVHJhbnNpdGlvbmluZyIsIl90aGlzMyIsIl9nZXRUYXJnZXRGcm9tRWxlbWVudCIsInRyaWdnZXJBcnJheSIsImlzT3BlbiIsIiR0aGlzIiwiJHRyaWdnZXIiLCIkdGFyZ2V0IiwiRHJvcGRvd24iLCJFVkVOVF9LRVkiLCJSRUdFWFBfS0VZRE9XTiIsIkFSUk9XX1VQX0tFWUNPREUiLCJDTElDSyIsIktFWURPV05fREFUQV9BUEkiLCJLRVlVUF9EQVRBX0FQSSIsIkF0dGFjaG1lbnRNYXAiLCJib3VuZGFyeSIsInBvcHBlckNvbmZpZyIsIl9wb3BwZXIiLCJfbWVudSIsIl9nZXRNZW51RWxlbWVudCIsIl9pbk5hdmJhciIsIl9kZXRlY3ROYXZiYXIiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJpc0FjdGl2ZSIsIl9jbGVhck1lbnVzIiwidXNlUG9wcGVyIiwic2hvd0V2ZW50IiwiX2dldFBhcmVudEZyb21FbGVtZW50IiwicmVmZXJlbmNlRWxlbWVudCIsIl9nZXRQb3BwZXJDb25maWciLCJoaWRlRXZlbnQiLCJfZ2V0UGxhY2VtZW50IiwiJHBhcmVudERyb3Bkb3duIiwiX2dldE9mZnNldCIsInRvZ2dsZXMiLCJjbGlja0V2ZW50IiwiZHJvcGRvd25NZW51IiwiX2RhdGFBcGlLZXlkb3duSGFuZGxlciIsIml0ZW1zIiwiaXRlbSIsImluc3RhbmNlVWlkIiwiU2xpY2siLCJzZXR0aW5ncyIsImRhdGFTZXR0aW5ncyIsImRlZmF1bHRzIiwiYWNjZXNzaWJpbGl0eSIsImFkYXB0aXZlSGVpZ2h0IiwiYXBwZW5kQXJyb3dzIiwiYXBwZW5kRG90cyIsImFycm93cyIsImFzTmF2Rm9yIiwicHJldkFycm93IiwibmV4dEFycm93IiwiYXV0b3BsYXkiLCJhdXRvcGxheVNwZWVkIiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwic2xpZGVyIiwiZG90cyIsImRvdHNDbGFzcyIsImRyYWdnYWJsZSIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiZm9jdXNPbkNoYW5nZSIsImluZmluaXRlIiwiaW5pdGlhbFNsaWRlIiwibGF6eUxvYWQiLCJtb2JpbGVGaXJzdCIsInBhdXNlT25Ib3ZlciIsInBhdXNlT25Gb2N1cyIsInBhdXNlT25Eb3RzSG92ZXIiLCJyZXNwb25kVG8iLCJyZXNwb25zaXZlIiwicm93cyIsInJ0bCIsInNsaWRlIiwic2xpZGVzUGVyUm93Iiwic2xpZGVzVG9TaG93Iiwic2xpZGVzVG9TY3JvbGwiLCJzd2lwZSIsInN3aXBlVG9TbGlkZSIsInRvdWNoTW92ZSIsInRvdWNoVGhyZXNob2xkIiwidXNlQ1NTIiwidXNlVHJhbnNmb3JtIiwidmFyaWFibGVXaWR0aCIsInZlcnRpY2FsIiwidmVydGljYWxTd2lwaW5nIiwid2FpdEZvckFuaW1hdGUiLCJpbml0aWFscyIsImFuaW1hdGluZyIsImRyYWdnaW5nIiwiYXV0b1BsYXlUaW1lciIsImN1cnJlbnREaXJlY3Rpb24iLCJjdXJyZW50TGVmdCIsImN1cnJlbnRTbGlkZSIsImRpcmVjdGlvbiIsIiRkb3RzIiwibGlzdFdpZHRoIiwibGlzdEhlaWdodCIsImxvYWRJbmRleCIsIiRuZXh0QXJyb3ciLCIkcHJldkFycm93Iiwic2Nyb2xsaW5nIiwic2xpZGVDb3VudCIsInNsaWRlV2lkdGgiLCIkc2xpZGVUcmFjayIsIiRzbGlkZXMiLCJzbGlkaW5nIiwic2xpZGVPZmZzZXQiLCJzd2lwZUxlZnQiLCJzd2lwaW5nIiwiJGxpc3QiLCJ0b3VjaE9iamVjdCIsInRyYW5zZm9ybXNFbmFibGVkIiwidW5zbGlja2VkIiwiYWN0aXZlQnJlYWtwb2ludCIsImFuaW1UeXBlIiwiYW5pbVByb3AiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnRTZXR0aW5ncyIsImNzc1RyYW5zaXRpb25zIiwiZm9jdXNzZWQiLCJpbnRlcnJ1cHRlZCIsInBhdXNlZCIsInBvc2l0aW9uUHJvcCIsInJvd0NvdW50Iiwic2hvdWxkQ2xpY2siLCIkc2xpZGVyIiwiJHNsaWRlc0NhY2hlIiwidHJhbnNmb3JtVHlwZSIsInRyYW5zaXRpb25UeXBlIiwidmlzaWJpbGl0eUNoYW5nZSIsIndpbmRvd1dpZHRoIiwid2luZG93VGltZXIiLCJvcmlnaW5hbFNldHRpbmdzIiwibW96SGlkZGVuIiwid2Via2l0SGlkZGVuIiwiYXV0b1BsYXkiLCJhdXRvUGxheUNsZWFyIiwiYXV0b1BsYXlJdGVyYXRvciIsImNoYW5nZVNsaWRlIiwiY2xpY2tIYW5kbGVyIiwic2VsZWN0SGFuZGxlciIsInNldFBvc2l0aW9uIiwic3dpcGVIYW5kbGVyIiwiZHJhZ0hhbmRsZXIiLCJrZXlIYW5kbGVyIiwiaHRtbEV4cHIiLCJyZWdpc3RlckJyZWFrcG9pbnRzIiwiYWN0aXZhdGVBREEiLCJhcmlhLWhpZGRlbiIsInRhYmluZGV4IiwiYWRkU2xpZGUiLCJzbGlja0FkZCIsIm1hcmt1cCIsImFkZEJlZm9yZSIsInVubG9hZCIsInJlaW5pdCIsImFuaW1hdGVIZWlnaHQiLCJ0YXJnZXRIZWlnaHQiLCJvdXRlckhlaWdodCIsImFuaW1hdGVTbGlkZSIsInRhcmdldExlZnQiLCJhbmltUHJvcHMiLCJhbmltU3RhcnQiLCJhcHBseVRyYW5zaXRpb24iLCJkaXNhYmxlVHJhbnNpdGlvbiIsImdldE5hdlRhcmdldCIsInNsaWNrIiwic2xpZGVIYW5kbGVyIiwidHJhbnNpdGlvbiIsInNsaWRlVG8iLCJidWlsZEFycm93cyIsImFyaWEtZGlzYWJsZWQiLCJidWlsZERvdHMiLCJkb3QiLCJnZXREb3RDb3VudCIsImJ1aWxkT3V0Iiwic2V0dXBJbmZpbml0ZSIsInVwZGF0ZURvdHMiLCJzZXRTbGlkZUNsYXNzZXMiLCJidWlsZFJvd3MiLCJuZXdTbGlkZXMiLCJudW1PZlNsaWRlcyIsIm9yaWdpbmFsU2xpZGVzIiwic2xpZGVzUGVyU2VjdGlvbiIsInJvdyIsImNoZWNrUmVzcG9uc2l2ZSIsImluaXRpYWwiLCJmb3JjZVVwZGF0ZSIsImJyZWFrcG9pbnQiLCJ0YXJnZXRCcmVha3BvaW50IiwicmVzcG9uZFRvV2lkdGgiLCJ0cmlnZ2VyQnJlYWtwb2ludCIsInNsaWRlcldpZHRoIiwidW5zbGljayIsInJlZnJlc2giLCJkb250QW5pbWF0ZSIsImluZGV4T2Zmc2V0IiwiY2hlY2tOYXZpZ2FibGUiLCJuYXZpZ2FibGVzIiwicHJldk5hdmlnYWJsZSIsImdldE5hdmlnYWJsZUluZGV4ZXMiLCJjbGVhblVwRXZlbnRzIiwiaW50ZXJydXB0IiwiY2xlYW5VcFNsaWRlRXZlbnRzIiwib3JpZW50YXRpb25DaGFuZ2UiLCJjbGVhblVwUm93cyIsImZhZGVTbGlkZSIsInNsaWRlSW5kZXgiLCJmYWRlU2xpZGVPdXQiLCJmaWx0ZXJTbGlkZXMiLCJzbGlja0ZpbHRlciIsImZvY3VzSGFuZGxlciIsIiRzZiIsImdldEN1cnJlbnQiLCJzbGlja0N1cnJlbnRTbGlkZSIsImJyZWFrUG9pbnQiLCJwYWdlclF0eSIsImdldExlZnQiLCJ2ZXJ0aWNhbEhlaWdodCIsInRhcmdldFNsaWRlIiwiY29lZiIsInZlcnRpY2FsT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm91dGVyV2lkdGgiLCJnZXRPcHRpb24iLCJzbGlja0dldE9wdGlvbiIsImluZGV4ZXMiLCJnZXRTbGljayIsImdldFNsaWRlQ291bnQiLCJzd2lwZWRTbGlkZSIsImNlbnRlck9mZnNldCIsImFicyIsImdvVG8iLCJzbGlja0dvVG8iLCJjcmVhdGlvbiIsInNldFByb3BzIiwic3RhcnRMb2FkIiwibG9hZFNsaWRlciIsImluaXRpYWxpemVFdmVudHMiLCJ1cGRhdGVBcnJvd3MiLCJpbml0QURBIiwibnVtRG90R3JvdXBzIiwidGFiQ29udHJvbEluZGV4ZXMiLCJzbGlkZUNvbnRyb2xJbmRleCIsInJvbGUiLCJhcmlhQnV0dG9uQ29udHJvbCIsImFyaWEtZGVzY3JpYmVkYnkiLCJtYXBwZWRTbGlkZUluZGV4IiwiYXJpYS1jb250cm9scyIsImFyaWEtbGFiZWwiLCJhcmlhLXNlbGVjdGVkIiwiaW5pdEFycm93RXZlbnRzIiwiaW5pdERvdEV2ZW50cyIsImluaXRTbGlkZUV2ZW50cyIsImFjdGlvbiIsImluaXRVSSIsImxvYWRSYW5nZSIsInJhbmdlU3RhcnQiLCJyYW5nZUVuZCIsImltYWdlc1Njb3BlIiwiaW1hZ2VTb3VyY2UiLCJpbWFnZVNyY1NldCIsImltYWdlU2l6ZXMiLCJpbWFnZVRvTG9hZCIsInByZXZTbGlkZSIsIm5leHRTbGlkZSIsInByb2dyZXNzaXZlTGF6eUxvYWQiLCJzbGlja05leHQiLCJzbGlja1BhdXNlIiwic2xpY2tQbGF5IiwicG9zdFNsaWRlIiwic2xpY2tQcmV2IiwidHJ5Q291bnQiLCIkaW1nc1RvTG9hZCIsImluaXRpYWxpemluZyIsImxhc3RWaXNpYmxlSW5kZXgiLCJjdXJyZW50QnJlYWtwb2ludCIsInJlc3BvbnNpdmVTZXR0aW5ncyIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJzbGlja1JlbW92ZSIsInJlbW92ZUJlZm9yZSIsInJlbW92ZUFsbCIsInNldENTUyIsInBvc2l0aW9uUHJvcHMiLCJzZXREaW1lbnNpb25zIiwic2V0RmFkZSIsInNldEhlaWdodCIsInNldE9wdGlvbiIsInNsaWNrU2V0T3B0aW9uIiwib3B0IiwiYm9keVN0eWxlIiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJtc1RyYW5zaXRpb24iLCJPVHJhbnNmb3JtIiwicGVyc3BlY3RpdmVQcm9wZXJ0eSIsIndlYmtpdFBlcnNwZWN0aXZlIiwiTW96VHJhbnNmb3JtIiwiTW96UGVyc3BlY3RpdmUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsImFsbFNsaWRlcyIsInJlbWFpbmRlciIsImV2ZW5Db2VmIiwiaW5maW5pdGVDb3VudCIsInRhcmdldEVsZW1lbnQiLCJzeW5jIiwiYW5pbVNsaWRlIiwib2xkU2xpZGUiLCJzbGlkZUxlZnQiLCJuYXZUYXJnZXQiLCJzd2lwZURpcmVjdGlvbiIsInhEaXN0IiwieURpc3QiLCJzd2lwZUFuZ2xlIiwic3RhcnRYIiwiY3VyWCIsInN0YXJ0WSIsImN1clkiLCJhdGFuMiIsInN3aXBlRW5kIiwic3dpcGVMZW5ndGgiLCJlZGdlSGl0IiwibWluU3dpcGUiLCJmaW5nZXJDb3VudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJjdXJMZWZ0IiwicG9zaXRpb25PZmZzZXQiLCJ2ZXJ0aWNhbFN3aXBlTGVuZ3RoIiwic3FydCIsInBvdyIsInVuZmlsdGVyU2xpZGVzIiwic2xpY2tVbmZpbHRlciIsImZyb21CcmVha3BvaW50IiwicmV0IiwiYXJncyIsInNoYWRlciIsInZlcnRleCIsImZyYWdtZW50Il0sIm1hcHBpbmdzIjoiO0FBaWlGYSxTQUFTQSxTQUFTQyxHQUFHLElBQUlDLEVBQW90QixHQUFqdEJDLEtBQUtDLE9BQU8sR0FBR0QsS0FBS0UsY0FBYyxHQUFHRixLQUFLRyxhQUFhLEdBQUdILEtBQUtJLFlBQVksR0FBR0osS0FBS0ssWUFBWSxDQUFDQyxPQUFPLENBQUNDLE9BQU8sRUFBRUMsU0FBUyxJQUFJQyxZQUFZLENBQUNGLE9BQU8sRUFBRUMsU0FBUyxJQUFJRSxhQUFhLEdBQUdDLFlBQVksSUFBSVgsS0FBS1ksaUJBQWdCLEVBQUdaLEtBQUthLGNBQWEsRUFBRyxpQkFBaUJmLElBQUtnQixRQUFRQyxLQUFLLDRKQUE0SmpCLEVBQUUsQ0FBQ2tCLFVBQVVqQixFQUFFRCxJQUFJQSxFQUFFa0IsVUFBVSxpQkFBaUJsQixFQUFFa0IsVUFBVWhCLEtBQUtnQixVQUFVQyxTQUFTQyxlQUFlcEIsRUFBRWtCLFdBQVdsQixFQUFFa0IscUJBQXFCRyxVQUFVbkIsS0FBS2dCLFVBQVVsQixFQUFFa0IsYUFBYWpCLEVBQUVrQixTQUFTRyxjQUFjLFFBQVFDLGFBQWEsS0FBSyxtQkFB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R0FBR0QsRUFBRSxHQUFHQyxFQUFFLEdBQUdELEVBQUUsR0FBR0MsRUFBRSxHQUFHRCxFQUFFLEdBQUdDLEVBQUUsR0FBR0QsRUFBRSxJQUFJOEQsRUFBRSxHQUFHN0QsRUFBRSxHQUFHRCxFQUFFLEdBQUdDLEVBQUUsR0FBR0QsRUFBRSxHQUFHQyxFQUFFLEdBQUdELEVBQUUsR0FBR0MsRUFBRSxHQUFHRCxFQUFFLElBQUk4RCxFQUFFLEdBQUc3RCxFQUFFLEdBQUdELEVBQUUsR0FBR0MsRUFBRSxHQUFHRCxFQUFFLEdBQUdDLEVBQUUsR0FBR0QsRUFBRSxJQUFJQyxFQUFFLEdBQUdELEVBQUUsSUFBSThELEVBQUUsR0FBRzdELEVBQUUsR0FBR0QsRUFBRSxHQUFHQyxFQUFFLEdBQUdELEVBQUUsR0FBR0MsRUFBRSxHQUFHRCxFQUFFLElBQUlDLEVBQUUsR0FBR0QsRUFBRSxJQUFJOEQsRUFBRSxHQUFHN0QsRUFBRSxHQUFHRCxFQUFFLEdBQUdDLEVBQUUsR0FBR0QsRUFBRSxHQUFHQyxFQUFFLElBQUlELEVBQUUsR0FBR0MsRUFBRSxJQUFJRCxFQUFFLElBQUk4RCxFQUFFLEdBQUc3RCxFQUFFLEdBQUdELEVBQUUsR0FBR0MsRUFBRSxHQUFHRCxFQUFFLEdBQUdDLEVBQUUsSUFBSUQsRUFBRSxHQUFHQyxFQUFFLElBQUlELEVBQUUsSUFBSThELEVBQUUsSUFBSTdELEVBQUUsR0FBR0QsRUFBRSxHQUFHQyxFQUFFLEdBQUdELEVBQUUsR0FBR0MsRUFBRSxJQUFJRCxFQUFFLElBQUlDLEVBQUUsSUFBSUQsRUFBRSxJQUFJOEQsRUFBRSxJQUFJN0QsRUFBRSxHQUFHRCxFQUFFLEdBQUdDLEVBQUUsR0FBR0QsRUFBRSxHQUFHQyxFQUFFLElBQUlELEVBQUUsSUFBSUMsRUFBRSxJQUFJRCxFQUFFLElBQUk4RCxFQUFFLElBQUk3RCxFQUFFLElBQUlELEVBQUUsR0FBR0MsRUFBRSxJQUFJRCxFQUFFLEdBQUdDLEVBQUUsSUFBSUQsRUFBRSxHQUFHQyxFQUFFLElBQUlELEVBQUUsSUFBSThELEVBQUUsSUFB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Q1p4SixTQUFVLENBQ1RzQyxhQUFjLEVBQ2RwQixNQUFNLFVBTVQsTUFBTTRSLE9BQVMsQ0FDZEMsT0FBUSxvNkVBOEVSQyxTQUFVIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIGpRdWVyeSB2My40LjEgfCAoYykgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIHwganF1ZXJ5Lm9yZy9saWNlbnNlICovXHJcbiFmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO1wib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lLmRvY3VtZW50P3QoZSwhMCk6ZnVuY3Rpb24oZSl7aWYoIWUuZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTtyZXR1cm4gdChlKX06dChlKX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyxmdW5jdGlvbihDLGUpe1widXNlIHN0cmljdFwiO3ZhciB0PVtdLEU9Qy5kb2N1bWVudCxyPU9iamVjdC5nZXRQcm90b3R5cGVPZixzPXQuc2xpY2UsZz10LmNvbmNhdCx1PXQucHVzaCxpPXQuaW5kZXhPZixuPXt9LG89bi50b1N0cmluZyx2PW4uaGFzT3duUHJvcGVydHksYT12LnRvU3RyaW5nLGw9YS5jYWxsKE9iamVjdCkseT17fSxtPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJlwibnVtYmVyXCIhPXR5cGVvZiBlLm5vZGVUeXBlfSx4PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lJiZlPT09ZS53aW5kb3d9LGM9e3R5cGU6ITAsc3JjOiEwLG5vbmNlOiEwLG5vTW9kdWxlOiEwfTtmdW5jdGlvbiBiKGUsdCxuKXt2YXIgcixpLG89KG49bnx8RSkuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtpZihvLnRleHQ9ZSx0KWZvcihyIGluIGMpKGk9dFtyXXx8dC5nZXRBdHRyaWJ1dGUmJnQuZ2V0QXR0cmlidXRlKHIpKSYmby5zZXRBdHRyaWJ1dGUocixpKTtuLmhlYWQuYXBwZW5kQ2hpbGQobykucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKX1mdW5jdGlvbiB3KGUpe3JldHVybiBudWxsPT1lP2UrXCJcIjpcIm9iamVjdFwiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZT9uW28uY2FsbChlKV18fFwib2JqZWN0XCI6dHlwZW9mIGV9dmFyIGY9XCIzLjQuMVwiLGs9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IGsuZm4uaW5pdChlLHQpfSxwPS9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztmdW5jdGlvbiBkKGUpe3ZhciB0PSEhZSYmXCJsZW5ndGhcImluIGUmJmUubGVuZ3RoLG49dyhlKTtyZXR1cm4hbShlKSYmIXgoZSkmJihcImFycmF5XCI9PT1ufHwwPT09dHx8XCJudW1iZXJcIj09dHlwZW9mIHQmJjA8dCYmdC0xIGluIGUpfWsuZm49ay5wcm90b3R5cGU9e2pxdWVyeTpmLGNvbnN0cnVjdG9yOmssbGVuZ3RoOjAsdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBzLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9zLmNhbGwodGhpcyk6ZTwwP3RoaXNbZSt0aGlzLmxlbmd0aF06dGhpc1tlXX0scHVzaFN0YWNrOmZ1bmN0aW9uKGUpe3ZhciB0PWsubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGUpO3JldHVybiB0LnByZXZPYmplY3Q9dGhpcyx0fSxlYWNoOmZ1bmN0aW9uKGUpe3JldHVybiBrLmVhY2godGhpcyxlKX0sbWFwOmZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLnB1c2hTdGFjayhrLm1hcCh0aGlzLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uY2FsbChlLHQsZSl9KSl9LHNsaWNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHMuYXBwbHkodGhpcyxhcmd1bWVudHMpKX0sZmlyc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgwKX0sbGFzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKC0xKX0sZXE6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5sZW5ndGgsbj0rZSsoZTwwP3Q6MCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKDA8PW4mJm48dD9bdGhpc1tuXV06W10pfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmV2T2JqZWN0fHx0aGlzLmNvbnN0cnVjdG9yKCl9LHB1c2g6dSxzb3J0OnQuc29ydCxzcGxpY2U6dC5zcGxpY2V9LGsuZXh0ZW5kPWsuZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGUsdCxuLHIsaSxvLGE9YXJndW1lbnRzWzBdfHx7fSxzPTEsdT1hcmd1bWVudHMubGVuZ3RoLGw9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgYSYmKGw9YSxhPWFyZ3VtZW50c1tzXXx8e30scysrKSxcIm9iamVjdFwiPT10eXBlb2YgYXx8bShhKXx8KGE9e30pLHM9PT11JiYoYT10aGlzLHMtLSk7czx1O3MrKylpZihudWxsIT0oZT1hcmd1bWVudHNbc10pKWZvcih0IGluIGUpcj1lW3RdLFwiX19wcm90b19fXCIhPT10JiZhIT09ciYmKGwmJnImJihrLmlzUGxhaW5PYmplY3Qocil8fChpPUFycmF5LmlzQXJyYXkocikpKT8obj1hW3RdLG89aSYmIUFycmF5LmlzQXJyYXkobik/W106aXx8ay5pc1BsYWluT2JqZWN0KG4pP246e30saT0hMSxhW3RdPWsuZXh0ZW5kKGwsbyxyKSk6dm9pZCAwIT09ciYmKGFbdF09cikpO3JldHVybiBhfSxrLmV4dGVuZCh7ZXhwYW5kbzpcImpRdWVyeVwiKyhmK01hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xcRC9nLFwiXCIpLGlzUmVhZHk6ITAsZXJyb3I6ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKGUpfSxub29wOmZ1bmN0aW9uKCl7fSxpc1BsYWluT2JqZWN0OmZ1bmN0aW9uKGUpe3ZhciB0LG47cmV0dXJuISghZXx8XCJbb2JqZWN0IE9iamVjdF1cIiE9PW8uY2FsbChlKSkmJighKHQ9cihlKSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mKG49di5jYWxsKHQsXCJjb25zdHJ1Y3RvclwiKSYmdC5jb25zdHJ1Y3RvcikmJmEuY2FsbChuKT09PWwpfSxpc0VtcHR5T2JqZWN0OmZ1bmN0aW9uKGUpe3ZhciB0O2Zvcih0IGluIGUpcmV0dXJuITE7cmV0dXJuITB9LGdsb2JhbEV2YWw6ZnVuY3Rpb24oZSx0KXtiKGUse25vbmNlOnQmJnQubm9uY2V9KX0sZWFjaDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MDtpZihkKGUpKXtmb3Iobj1lLmxlbmd0aDtyPG47cisrKWlmKCExPT09dC5jYWxsKGVbcl0scixlW3JdKSlicmVha31lbHNlIGZvcihyIGluIGUpaWYoITE9PT10LmNhbGwoZVtyXSxyLGVbcl0pKWJyZWFrO3JldHVybiBlfSx0cmltOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP1wiXCI6KGUrXCJcIikucmVwbGFjZShwLFwiXCIpfSxtYWtlQXJyYXk6ZnVuY3Rpb24oZSx0KXt2YXIgbj10fHxbXTtyZXR1cm4gbnVsbCE9ZSYmKGQoT2JqZWN0KGUpKT9rLm1lcmdlKG4sXCJzdHJpbmdcIj09dHlwZW9mIGU/W2VdOmUpOnUuY2FsbChuLGUpKSxufSxpbkFycmF5OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbnVsbD09dD8tMTppLmNhbGwodCxlLG4pfSxtZXJnZTpmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0rdC5sZW5ndGgscj0wLGk9ZS5sZW5ndGg7cjxuO3IrKyllW2krK109dFtyXTtyZXR1cm4gZS5sZW5ndGg9aSxlfSxncmVwOmZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9W10saT0wLG89ZS5sZW5ndGgsYT0hbjtpPG87aSsrKSF0KGVbaV0saSkhPT1hJiZyLnB1c2goZVtpXSk7cmV0dXJuIHJ9LG1hcDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPTAsYT1bXTtpZihkKGUpKWZvcihyPWUubGVuZ3RoO288cjtvKyspbnVsbCE9KGk9dChlW29dLG8sbikpJiZhLnB1c2goaSk7ZWxzZSBmb3IobyBpbiBlKW51bGwhPShpPXQoZVtvXSxvLG4pKSYmYS5wdXNoKGkpO3JldHVybiBnLmFwcGx5KFtdLGEpfSxndWlkOjEsc3VwcG9ydDp5fSksXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoay5mbltTeW1ib2wuaXRlcmF0b3JdPXRbU3ltYm9sLml0ZXJhdG9yXSksay5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oZSx0KXtuW1wiW29iamVjdCBcIit0K1wiXVwiXT10LnRvTG93ZXJDYXNlKCl9KTt2YXIgaD1mdW5jdGlvbihuKXt2YXIgZSxkLGIsbyxpLGgsZixnLHcsdSxsLFQsQyxhLEUsdixzLGMseSxrPVwic2l6emxlXCIrMSpuZXcgRGF0ZSxtPW4uZG9jdW1lbnQsUz0wLHI9MCxwPXVlKCkseD11ZSgpLE49dWUoKSxBPXVlKCksRD1mdW5jdGlvbihlLHQpe3JldHVybiBlPT09dCYmKGw9ITApLDB9LGo9e30uaGFzT3duUHJvcGVydHksdD1bXSxxPXQucG9wLEw9dC5wdXNoLEg9dC5wdXNoLE89dC5zbGljZSxQPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKWlmKGVbbl09PT10KXJldHVybiBuO3JldHVybi0xfSxSPVwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixNPVwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixJPVwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixXPVwiXFxcXFtcIitNK1wiKihcIitJK1wiKSg/OlwiK00rXCIqKFsqXiR8IX5dPz0pXCIrTStcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiK0krXCIpKXwpXCIrTStcIipcXFxcXVwiLCQ9XCI6KFwiK0krXCIpKD86XFxcXCgoKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8KCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiK1crXCIpKil8LiopXFxcXCl8KVwiLEY9bmV3IFJlZ0V4cChNK1wiK1wiLFwiZ1wiKSxCPW5ldyBSZWdFeHAoXCJeXCIrTStcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIrTStcIiskXCIsXCJnXCIpLF89bmV3IFJlZ0V4cChcIl5cIitNK1wiKixcIitNK1wiKlwiKSx6PW5ldyBSZWdFeHAoXCJeXCIrTStcIiooWz4rfl18XCIrTStcIilcIitNK1wiKlwiKSxVPW5ldyBSZWdFeHAoTStcInw+XCIpLFg9bmV3IFJlZ0V4cCgkKSxWPW5ldyBSZWdFeHAoXCJeXCIrSStcIiRcIiksRz17SUQ6bmV3IFJlZ0V4cChcIl4jKFwiK0krXCIpXCIpLENMQVNTOm5ldyBSZWdFeHAoXCJeXFxcXC4oXCIrSStcIilcIiksVEFHOm5ldyBSZWdFeHAoXCJeKFwiK0krXCJ8WypdKVwiKSxBVFRSOm5ldyBSZWdFeHAoXCJeXCIrVyksUFNFVURPOm5ldyBSZWdFeHAoXCJeXCIrJCksQ0hJTEQ6bmV3IFJlZ0V4cChcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIrTStcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiK00rXCIqKD86KFsrLV18KVwiK00rXCIqKFxcXFxkKyl8KSlcIitNK1wiKlxcXFwpfClcIixcImlcIiksYm9vbDpuZXcgUmVnRXhwKFwiXig/OlwiK1IrXCIpJFwiLFwiaVwiKSxuZWVkc0NvbnRleHQ6bmV3IFJlZ0V4cChcIl5cIitNK1wiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIitNK1wiKigoPzotXFxcXGQpP1xcXFxkKilcIitNK1wiKlxcXFwpfCkoPz1bXi1dfCQpXCIsXCJpXCIpfSxZPS9IVE1MJC9pLFE9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxKPS9eaFxcZCQvaSxLPS9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sWj0vXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxlZT0vWyt+XS8sdGU9bmV3IFJlZ0V4cChcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiK00rXCI/fChcIitNK1wiKXwuKVwiLFwiaWdcIiksbmU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPVwiMHhcIit0LTY1NTM2O3JldHVybiByIT1yfHxuP3Q6cjwwP1N0cmluZy5mcm9tQ2hhckNvZGUocis2NTUzNik6U3RyaW5nLmZyb21DaGFyQ29kZShyPj4xMHw1NTI5NiwxMDIzJnJ8NTYzMjApfSxyZT0vKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxpZT1mdW5jdGlvbihlLHQpe3JldHVybiB0P1wiXFwwXCI9PT1lP1wiXFx1ZmZmZFwiOmUuc2xpY2UoMCwtMSkrXCJcXFxcXCIrZS5jaGFyQ29kZUF0KGUubGVuZ3RoLTEpLnRvU3RyaW5nKDE2KStcIiBcIjpcIlxcXFxcIitlfSxvZT1mdW5jdGlvbigpe1QoKX0sYWU9YmUoZnVuY3Rpb24oZSl7cmV0dXJuITA9PT1lLmRpc2FibGVkJiZcImZpZWxkc2V0XCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCl9LHtkaXI6XCJwYXJlbnROb2RlXCIsbmV4dDpcImxlZ2VuZFwifSk7dHJ5e0guYXBwbHkodD1PLmNhbGwobS5jaGlsZE5vZGVzKSxtLmNoaWxkTm9kZXMpLHRbbS5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGV9Y2F0Y2goZSl7SD17YXBwbHk6dC5sZW5ndGg/ZnVuY3Rpb24oZSx0KXtMLmFwcGx5KGUsTy5jYWxsKHQpKX06ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmxlbmd0aCxyPTA7d2hpbGUoZVtuKytdPXRbcisrXSk7ZS5sZW5ndGg9bi0xfX19ZnVuY3Rpb24gc2UodCxlLG4scil7dmFyIGksbyxhLHMsdSxsLGMsZj1lJiZlLm93bmVyRG9jdW1lbnQscD1lP2Uubm9kZVR5cGU6OTtpZihuPW58fFtdLFwic3RyaW5nXCIhPXR5cGVvZiB0fHwhdHx8MSE9PXAmJjkhPT1wJiYxMSE9PXApcmV0dXJuIG47aWYoIXImJigoZT9lLm93bmVyRG9jdW1lbnR8fGU6bSkhPT1DJiZUKGUpLGU9ZXx8QyxFKSl7aWYoMTEhPT1wJiYodT1aLmV4ZWModCkpKWlmKGk9dVsxXSl7aWYoOT09PXApe2lmKCEoYT1lLmdldEVsZW1lbnRCeUlkKGkpKSlyZXR1cm4gbjtpZihhLmlkPT09aSlyZXR1cm4gbi5wdXNoKGEpLG59ZWxzZSBpZihmJiYoYT1mLmdldEVsZW1lbnRCeUlkKGkpKSYmeShlLGEpJiZhLmlkPT09aSlyZXR1cm4gbi5wdXNoKGEpLG59ZWxzZXtpZih1WzJdKXJldHVybiBILmFwcGx5KG4sZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0KSksbjtpZigoaT11WzNdKSYmZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpcmV0dXJuIEguYXBwbHkobixlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoaSkpLG59aWYoZC5xc2EmJiFBW3QrXCIgXCJdJiYoIXZ8fCF2LnRlc3QodCkpJiYoMSE9PXB8fFwib2JqZWN0XCIhPT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpKXtpZihjPXQsZj1lLDE9PT1wJiZVLnRlc3QodCkpeyhzPWUuZ2V0QXR0cmlidXRlKFwiaWRcIikpP3M9cy5yZXBsYWNlKHJlLGllKTplLnNldEF0dHJpYnV0ZShcImlkXCIscz1rKSxvPShsPWgodCkpLmxlbmd0aDt3aGlsZShvLS0pbFtvXT1cIiNcIitzK1wiIFwiK3hlKGxbb10pO2M9bC5qb2luKFwiLFwiKSxmPWVlLnRlc3QodCkmJnllKGUucGFyZW50Tm9kZSl8fGV9dHJ5e3JldHVybiBILmFwcGx5KG4sZi5xdWVyeVNlbGVjdG9yQWxsKGMpKSxufWNhdGNoKGUpe0EodCwhMCl9ZmluYWxseXtzPT09ayYmZS5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKX19fXJldHVybiBnKHQucmVwbGFjZShCLFwiJDFcIiksZSxuLHIpfWZ1bmN0aW9uIHVlKCl7dmFyIHI9W107cmV0dXJuIGZ1bmN0aW9uIGUodCxuKXtyZXR1cm4gci5wdXNoKHQrXCIgXCIpPmIuY2FjaGVMZW5ndGgmJmRlbGV0ZSBlW3Iuc2hpZnQoKV0sZVt0K1wiIFwiXT1ufX1mdW5jdGlvbiBsZShlKXtyZXR1cm4gZVtrXT0hMCxlfWZ1bmN0aW9uIGNlKGUpe3ZhciB0PUMuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO3RyeXtyZXR1cm4hIWUodCl9Y2F0Y2goZSl7cmV0dXJuITF9ZmluYWxseXt0LnBhcmVudE5vZGUmJnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KSx0PW51bGx9fWZ1bmN0aW9uIGZlKGUsdCl7dmFyIG49ZS5zcGxpdChcInxcIikscj1uLmxlbmd0aDt3aGlsZShyLS0pYi5hdHRySGFuZGxlW25bcl1dPXR9ZnVuY3Rpb24gcGUoZSx0KXt2YXIgbj10JiZlLHI9biYmMT09PWUubm9kZVR5cGUmJjE9PT10Lm5vZGVUeXBlJiZlLnNvdXJjZUluZGV4LXQuc291cmNlSW5kZXg7aWYocilyZXR1cm4gcjtpZihuKXdoaWxlKG49bi5uZXh0U2libGluZylpZihuPT09dClyZXR1cm4tMTtyZXR1cm4gZT8xOi0xfWZ1bmN0aW9uIGRlKHQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm5cImlucHV0XCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJmUudHlwZT09PXR9fWZ1bmN0aW9uIGhlKG4pe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuKFwiaW5wdXRcIj09PXR8fFwiYnV0dG9uXCI9PT10KSYmZS50eXBlPT09bn19ZnVuY3Rpb24gZ2UodCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVyblwiZm9ybVwiaW4gZT9lLnBhcmVudE5vZGUmJiExPT09ZS5kaXNhYmxlZD9cImxhYmVsXCJpbiBlP1wibGFiZWxcImluIGUucGFyZW50Tm9kZT9lLnBhcmVudE5vZGUuZGlzYWJsZWQ9PT10OmUuZGlzYWJsZWQ9PT10OmUuaXNEaXNhYmxlZD09PXR8fGUuaXNEaXNhYmxlZCE9PSF0JiZhZShlKT09PXQ6ZS5kaXNhYmxlZD09PXQ6XCJsYWJlbFwiaW4gZSYmZS5kaXNhYmxlZD09PXR9fWZ1bmN0aW9uIHZlKGEpe3JldHVybiBsZShmdW5jdGlvbihvKXtyZXR1cm4gbz0rbyxsZShmdW5jdGlvbihlLHQpe3ZhciBuLHI9YShbXSxlLmxlbmd0aCxvKSxpPXIubGVuZ3RoO3doaWxlKGktLSllW249cltpXV0mJihlW25dPSEodFtuXT1lW25dKSl9KX0pfWZ1bmN0aW9uIHllKGUpe3JldHVybiBlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgZS5nZXRFbGVtZW50c0J5VGFnTmFtZSYmZX1mb3IoZSBpbiBkPXNlLnN1cHBvcnQ9e30saT1zZS5pc1hNTD1mdW5jdGlvbihlKXt2YXIgdD1lLm5hbWVzcGFjZVVSSSxuPShlLm93bmVyRG9jdW1lbnR8fGUpLmRvY3VtZW50RWxlbWVudDtyZXR1cm4hWS50ZXN0KHR8fG4mJm4ubm9kZU5hbWV8fFwiSFRNTFwiKX0sVD1zZS5zZXREb2N1bWVudD1mdW5jdGlvbihlKXt2YXIgdCxuLHI9ZT9lLm93bmVyRG9jdW1lbnR8fGU6bTtyZXR1cm4gciE9PUMmJjk9PT1yLm5vZGVUeXBlJiZyLmRvY3VtZW50RWxlbWVudCYmKGE9KEM9cikuZG9jdW1lbnRFbGVtZW50LEU9IWkoQyksbSE9PUMmJihuPUMuZGVmYXVsdFZpZXcpJiZuLnRvcCE9PW4mJihuLmFkZEV2ZW50TGlzdGVuZXI/bi5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsb2UsITEpOm4uYXR0YWNoRXZlbnQmJm4uYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLG9lKSksZC5hdHRyaWJ1dGVzPWNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNsYXNzTmFtZT1cImlcIiwhZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIil9KSxkLmdldEVsZW1lbnRzQnlUYWdOYW1lPWNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmFwcGVuZENoaWxkKEMuY3JlYXRlQ29tbWVudChcIlwiKSksIWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aH0pLGQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZT1LLnRlc3QoQy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSxkLmdldEJ5SWQ9Y2UoZnVuY3Rpb24oZSl7cmV0dXJuIGEuYXBwZW5kQ2hpbGQoZSkuaWQ9aywhQy5nZXRFbGVtZW50c0J5TmFtZXx8IUMuZ2V0RWxlbWVudHNCeU5hbWUoaykubGVuZ3RofSksZC5nZXRCeUlkPyhiLmZpbHRlci5JRD1mdW5jdGlvbihlKXt2YXIgdD1lLnJlcGxhY2UodGUsbmUpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKT09PXR9fSxiLmZpbmQuSUQ9ZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50QnlJZCYmRSl7dmFyIG49dC5nZXRFbGVtZW50QnlJZChlKTtyZXR1cm4gbj9bbl06W119fSk6KGIuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciBuPWUucmVwbGFjZSh0ZSxuZSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLmdldEF0dHJpYnV0ZU5vZGUmJmUuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO3JldHVybiB0JiZ0LnZhbHVlPT09bn19LGIuZmluZC5JRD1mdW5jdGlvbihlLHQpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0LmdldEVsZW1lbnRCeUlkJiZFKXt2YXIgbixyLGksbz10LmdldEVsZW1lbnRCeUlkKGUpO2lmKG8pe2lmKChuPW8uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpKSYmbi52YWx1ZT09PWUpcmV0dXJuW29dO2k9dC5nZXRFbGVtZW50c0J5TmFtZShlKSxyPTA7d2hpbGUobz1pW3IrK10paWYoKG49by5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIikpJiZuLnZhbHVlPT09ZSlyZXR1cm5bb119cmV0dXJuW119fSksYi5maW5kLlRBRz1kLmdldEVsZW1lbnRzQnlUYWdOYW1lP2Z1bmN0aW9uKGUsdCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuZ2V0RWxlbWVudHNCeVRhZ05hbWU/dC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKTpkLnFzYT90LnF1ZXJ5U2VsZWN0b3JBbGwoZSk6dm9pZCAwfTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9W10saT0wLG89dC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKTtpZihcIipcIj09PWUpe3doaWxlKG49b1tpKytdKTE9PT1uLm5vZGVUeXBlJiZyLnB1c2gobik7cmV0dXJuIHJ9cmV0dXJuIG99LGIuZmluZC5DTEFTUz1kLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmZ1bmN0aW9uKGUsdCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmRSlyZXR1cm4gdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGUpfSxzPVtdLHY9W10sKGQucXNhPUsudGVzdChDLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKGNlKGZ1bmN0aW9uKGUpe2EuYXBwZW5kQ2hpbGQoZSkuaW5uZXJIVE1MPVwiPGEgaWQ9J1wiK2srXCInPjwvYT48c2VsZWN0IGlkPSdcIitrK1wiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCIsZS5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoJiZ2LnB1c2goXCJbKl4kXT1cIitNK1wiKig/OicnfFxcXCJcXFwiKVwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aHx8di5wdXNoKFwiXFxcXFtcIitNK1wiKig/OnZhbHVlfFwiK1IrXCIpXCIpLGUucXVlcnlTZWxlY3RvckFsbChcIltpZH49XCIraytcIi1dXCIpLmxlbmd0aHx8di5wdXNoKFwifj1cIiksZS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RofHx2LnB1c2goXCI6Y2hlY2tlZFwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiK2srXCIrKlwiKS5sZW5ndGh8fHYucHVzaChcIi4jLitbK35dXCIpfSksY2UoZnVuY3Rpb24oZSl7ZS5pbm5lckhUTUw9XCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjt2YXIgdD1DLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTt0LnNldEF0dHJpYnV0ZShcInR5cGVcIixcImhpZGRlblwiKSxlLmFwcGVuZENoaWxkKHQpLnNldEF0dHJpYnV0ZShcIm5hbWVcIixcIkRcIiksZS5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoJiZ2LnB1c2goXCJuYW1lXCIrTStcIipbKl4kfCF+XT89XCIpLDIhPT1lLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGgmJnYucHVzaChcIjplbmFibGVkXCIsXCI6ZGlzYWJsZWRcIiksYS5hcHBlbmRDaGlsZChlKS5kaXNhYmxlZD0hMCwyIT09ZS5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCYmdi5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpLHYucHVzaChcIiwuKjpcIil9KSksKGQubWF0Y2hlc1NlbGVjdG9yPUsudGVzdChjPWEubWF0Y2hlc3x8YS53ZWJraXRNYXRjaGVzU2VsZWN0b3J8fGEubW96TWF0Y2hlc1NlbGVjdG9yfHxhLm9NYXRjaGVzU2VsZWN0b3J8fGEubXNNYXRjaGVzU2VsZWN0b3IpKSYmY2UoZnVuY3Rpb24oZSl7ZC5kaXNjb25uZWN0ZWRNYXRjaD1jLmNhbGwoZSxcIipcIiksYy5jYWxsKGUsXCJbcyE9JyddOnhcIikscy5wdXNoKFwiIT1cIiwkKX0pLHY9di5sZW5ndGgmJm5ldyBSZWdFeHAodi5qb2luKFwifFwiKSkscz1zLmxlbmd0aCYmbmV3IFJlZ0V4cChzLmpvaW4oXCJ8XCIpKSx0PUsudGVzdChhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSx5PXR8fEsudGVzdChhLmNvbnRhaW5zKT9mdW5jdGlvbihlLHQpe3ZhciBuPTk9PT1lLm5vZGVUeXBlP2UuZG9jdW1lbnRFbGVtZW50OmUscj10JiZ0LnBhcmVudE5vZGU7cmV0dXJuIGU9PT1yfHwhKCFyfHwxIT09ci5ub2RlVHlwZXx8IShuLmNvbnRhaW5zP24uY29udGFpbnMocik6ZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmMTYmZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihyKSkpfTpmdW5jdGlvbihlLHQpe2lmKHQpd2hpbGUodD10LnBhcmVudE5vZGUpaWYodD09PWUpcmV0dXJuITA7cmV0dXJuITF9LEQ9dD9mdW5jdGlvbihlLHQpe2lmKGU9PT10KXJldHVybiBsPSEwLDA7dmFyIG49IWUuY29tcGFyZURvY3VtZW50UG9zaXRpb24tIXQuY29tcGFyZURvY3VtZW50UG9zaXRpb247cmV0dXJuIG58fCgxJihuPShlLm93bmVyRG9jdW1lbnR8fGUpPT09KHQub3duZXJEb2N1bWVudHx8dCk/ZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0KToxKXx8IWQuc29ydERldGFjaGVkJiZ0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGUpPT09bj9lPT09Q3x8ZS5vd25lckRvY3VtZW50PT09bSYmeShtLGUpPy0xOnQ9PT1DfHx0Lm93bmVyRG9jdW1lbnQ9PT1tJiZ5KG0sdCk/MTp1P1AodSxlKS1QKHUsdCk6MDo0Jm4/LTE6MSl9OmZ1bmN0aW9uKGUsdCl7aWYoZT09PXQpcmV0dXJuIGw9ITAsMDt2YXIgbixyPTAsaT1lLnBhcmVudE5vZGUsbz10LnBhcmVudE5vZGUsYT1bZV0scz1bdF07aWYoIWl8fCFvKXJldHVybiBlPT09Qz8tMTp0PT09Qz8xOmk/LTE6bz8xOnU/UCh1LGUpLVAodSx0KTowO2lmKGk9PT1vKXJldHVybiBwZShlLHQpO249ZTt3aGlsZShuPW4ucGFyZW50Tm9kZSlhLnVuc2hpZnQobik7bj10O3doaWxlKG49bi5wYXJlbnROb2RlKXMudW5zaGlmdChuKTt3aGlsZShhW3JdPT09c1tyXSlyKys7cmV0dXJuIHI/cGUoYVtyXSxzW3JdKTphW3JdPT09bT8tMTpzW3JdPT09bT8xOjB9KSxDfSxzZS5tYXRjaGVzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHNlKGUsbnVsbCxudWxsLHQpfSxzZS5tYXRjaGVzU2VsZWN0b3I9ZnVuY3Rpb24oZSx0KXtpZigoZS5vd25lckRvY3VtZW50fHxlKSE9PUMmJlQoZSksZC5tYXRjaGVzU2VsZWN0b3ImJkUmJiFBW3QrXCIgXCJdJiYoIXN8fCFzLnRlc3QodCkpJiYoIXZ8fCF2LnRlc3QodCkpKXRyeXt2YXIgbj1jLmNhbGwoZSx0KTtpZihufHxkLmRpc2Nvbm5lY3RlZE1hdGNofHxlLmRvY3VtZW50JiYxMSE9PWUuZG9jdW1lbnQubm9kZVR5cGUpcmV0dXJuIG59Y2F0Y2goZSl7QSh0LCEwKX1yZXR1cm4gMDxzZSh0LEMsbnVsbCxbZV0pLmxlbmd0aH0sc2UuY29udGFpbnM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZS5vd25lckRvY3VtZW50fHxlKSE9PUMmJlQoZSkseShlLHQpfSxzZS5hdHRyPWZ1bmN0aW9uKGUsdCl7KGUub3duZXJEb2N1bWVudHx8ZSkhPT1DJiZUKGUpO3ZhciBuPWIuYXR0ckhhbmRsZVt0LnRvTG93ZXJDYXNlKCldLHI9biYmai5jYWxsKGIuYXR0ckhhbmRsZSx0LnRvTG93ZXJDYXNlKCkpP24oZSx0LCFFKTp2b2lkIDA7cmV0dXJuIHZvaWQgMCE9PXI/cjpkLmF0dHJpYnV0ZXN8fCFFP2UuZ2V0QXR0cmlidXRlKHQpOihyPWUuZ2V0QXR0cmlidXRlTm9kZSh0KSkmJnIuc3BlY2lmaWVkP3IudmFsdWU6bnVsbH0sc2UuZXNjYXBlPWZ1bmN0aW9uKGUpe3JldHVybihlK1wiXCIpLnJlcGxhY2UocmUsaWUpfSxzZS5lcnJvcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIitlKX0sc2UudW5pcXVlU29ydD1mdW5jdGlvbihlKXt2YXIgdCxuPVtdLHI9MCxpPTA7aWYobD0hZC5kZXRlY3REdXBsaWNhdGVzLHU9IWQuc29ydFN0YWJsZSYmZS5zbGljZSgwKSxlLnNvcnQoRCksbCl7d2hpbGUodD1lW2krK10pdD09PWVbaV0mJihyPW4ucHVzaChpKSk7d2hpbGUoci0tKWUuc3BsaWNlKG5bcl0sMSl9cmV0dXJuIHU9bnVsbCxlfSxvPXNlLmdldFRleHQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj1cIlwiLHI9MCxpPWUubm9kZVR5cGU7aWYoaSl7aWYoMT09PWl8fDk9PT1pfHwxMT09PWkpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlLnRleHRDb250ZW50KXJldHVybiBlLnRleHRDb250ZW50O2ZvcihlPWUuZmlyc3RDaGlsZDtlO2U9ZS5uZXh0U2libGluZyluKz1vKGUpfWVsc2UgaWYoMz09PWl8fDQ9PT1pKXJldHVybiBlLm5vZGVWYWx1ZX1lbHNlIHdoaWxlKHQ9ZVtyKytdKW4rPW8odCk7cmV0dXJuIG59LChiPXNlLnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOmxlLG1hdGNoOkcsYXR0ckhhbmRsZTp7fSxmaW5kOnt9LHJlbGF0aXZlOntcIj5cIjp7ZGlyOlwicGFyZW50Tm9kZVwiLGZpcnN0OiEwfSxcIiBcIjp7ZGlyOlwicGFyZW50Tm9kZVwifSxcIitcIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCIsZmlyc3Q6ITB9LFwiflwiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihlKXtyZXR1cm4gZVsxXT1lWzFdLnJlcGxhY2UodGUsbmUpLGVbM109KGVbM118fGVbNF18fGVbNV18fFwiXCIpLnJlcGxhY2UodGUsbmUpLFwifj1cIj09PWVbMl0mJihlWzNdPVwiIFwiK2VbM10rXCIgXCIpLGUuc2xpY2UoMCw0KX0sQ0hJTEQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbMV09ZVsxXS50b0xvd2VyQ2FzZSgpLFwibnRoXCI9PT1lWzFdLnNsaWNlKDAsMyk/KGVbM118fHNlLmVycm9yKGVbMF0pLGVbNF09KyhlWzRdP2VbNV0rKGVbNl18fDEpOjIqKFwiZXZlblwiPT09ZVszXXx8XCJvZGRcIj09PWVbM10pKSxlWzVdPSsoZVs3XStlWzhdfHxcIm9kZFwiPT09ZVszXSkpOmVbM10mJnNlLmVycm9yKGVbMF0pLGV9LFBTRVVETzpmdW5jdGlvbihlKXt2YXIgdCxuPSFlWzZdJiZlWzJdO3JldHVybiBHLkNISUxELnRlc3QoZVswXSk/bnVsbDooZVszXT9lWzJdPWVbNF18fGVbNV18fFwiXCI6biYmWC50ZXN0KG4pJiYodD1oKG4sITApKSYmKHQ9bi5pbmRleE9mKFwiKVwiLG4ubGVuZ3RoLXQpLW4ubGVuZ3RoKSYmKGVbMF09ZVswXS5zbGljZSgwLHQpLGVbMl09bi5zbGljZSgwLHQpKSxlLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKHRlLG5lKS50b0xvd2VyQ2FzZSgpO3JldHVyblwiKlwiPT09ZT9mdW5jdGlvbigpe3JldHVybiEwfTpmdW5jdGlvbihlKXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09dH19LENMQVNTOmZ1bmN0aW9uKGUpe3ZhciB0PXBbZStcIiBcIl07cmV0dXJuIHR8fCh0PW5ldyBSZWdFeHAoXCIoXnxcIitNK1wiKVwiK2UrXCIoXCIrTStcInwkKVwiKSkmJnAoZSxmdW5jdGlvbihlKXtyZXR1cm4gdC50ZXN0KFwic3RyaW5nXCI9PXR5cGVvZiBlLmNsYXNzTmFtZSYmZS5jbGFzc05hbWV8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLmdldEF0dHJpYnV0ZSYmZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIil9KX0sQVRUUjpmdW5jdGlvbihuLHIsaSl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PXNlLmF0dHIoZSxuKTtyZXR1cm4gbnVsbD09dD9cIiE9XCI9PT1yOiFyfHwodCs9XCJcIixcIj1cIj09PXI/dD09PWk6XCIhPVwiPT09cj90IT09aTpcIl49XCI9PT1yP2kmJjA9PT10LmluZGV4T2YoaSk6XCIqPVwiPT09cj9pJiYtMTx0LmluZGV4T2YoaSk6XCIkPVwiPT09cj9pJiZ0LnNsaWNlKC1pLmxlbmd0aCk9PT1pOlwifj1cIj09PXI/LTE8KFwiIFwiK3QucmVwbGFjZShGLFwiIFwiKStcIiBcIikuaW5kZXhPZihpKTpcInw9XCI9PT1yJiYodD09PWl8fHQuc2xpY2UoMCxpLmxlbmd0aCsxKT09PWkrXCItXCIpKX19LENISUxEOmZ1bmN0aW9uKGgsZSx0LGcsdil7dmFyIHk9XCJudGhcIiE9PWguc2xpY2UoMCwzKSxtPVwibGFzdFwiIT09aC5zbGljZSgtNCkseD1cIm9mLXR5cGVcIj09PWU7cmV0dXJuIDE9PT1nJiYwPT09dj9mdW5jdGlvbihlKXtyZXR1cm4hIWUucGFyZW50Tm9kZX06ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsPXkhPT1tP1wibmV4dFNpYmxpbmdcIjpcInByZXZpb3VzU2libGluZ1wiLGM9ZS5wYXJlbnROb2RlLGY9eCYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLHA9IW4mJiF4LGQ9ITE7aWYoYyl7aWYoeSl7d2hpbGUobCl7YT1lO3doaWxlKGE9YVtsXSlpZih4P2Eubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PWY6MT09PWEubm9kZVR5cGUpcmV0dXJuITE7dT1sPVwib25seVwiPT09aCYmIXUmJlwibmV4dFNpYmxpbmdcIn1yZXR1cm4hMH1pZih1PVttP2MuZmlyc3RDaGlsZDpjLmxhc3RDaGlsZF0sbSYmcCl7ZD0ocz0ocj0oaT0obz0oYT1jKVtrXXx8KGFba109e30pKVthLnVuaXF1ZUlEXXx8KG9bYS51bmlxdWVJRF09e30pKVtoXXx8W10pWzBdPT09UyYmclsxXSkmJnJbMl0sYT1zJiZjLmNoaWxkTm9kZXNbc107d2hpbGUoYT0rK3MmJmEmJmFbbF18fChkPXM9MCl8fHUucG9wKCkpaWYoMT09PWEubm9kZVR5cGUmJisrZCYmYT09PWUpe2lbaF09W1MscyxkXTticmVha319ZWxzZSBpZihwJiYoZD1zPShyPShpPShvPShhPWUpW2tdfHwoYVtrXT17fSkpW2EudW5pcXVlSURdfHwob1thLnVuaXF1ZUlEXT17fSkpW2hdfHxbXSlbMF09PT1TJiZyWzFdKSwhMT09PWQpd2hpbGUoYT0rK3MmJmEmJmFbbF18fChkPXM9MCl8fHUucG9wKCkpaWYoKHg/YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09ZjoxPT09YS5ub2RlVHlwZSkmJisrZCYmKHAmJigoaT0obz1hW2tdfHwoYVtrXT17fSkpW2EudW5pcXVlSURdfHwob1thLnVuaXF1ZUlEXT17fSkpW2hdPVtTLGRdKSxhPT09ZSkpYnJlYWs7cmV0dXJuKGQtPXYpPT09Z3x8ZCVnPT0wJiYwPD1kL2d9fX0sUFNFVURPOmZ1bmN0aW9uKGUsbyl7dmFyIHQsYT1iLnBzZXVkb3NbZV18fGIuc2V0RmlsdGVyc1tlLnRvTG93ZXJDYXNlKCldfHxzZS5lcnJvcihcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIrZSk7cmV0dXJuIGFba10/YShvKToxPGEubGVuZ3RoPyh0PVtlLGUsXCJcIixvXSxiLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoZS50b0xvd2VyQ2FzZSgpKT9sZShmdW5jdGlvbihlLHQpe3ZhciBuLHI9YShlLG8pLGk9ci5sZW5ndGg7d2hpbGUoaS0tKWVbbj1QKGUscltpXSldPSEodFtuXT1yW2ldKX0pOmZ1bmN0aW9uKGUpe3JldHVybiBhKGUsMCx0KX0pOmF9fSxwc2V1ZG9zOntub3Q6bGUoZnVuY3Rpb24oZSl7dmFyIHI9W10saT1bXSxzPWYoZS5yZXBsYWNlKEIsXCIkMVwiKSk7cmV0dXJuIHNba10/bGUoZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbz1zKGUsbnVsbCxyLFtdKSxhPWUubGVuZ3RoO3doaWxlKGEtLSkoaT1vW2FdKSYmKGVbYV09ISh0W2FdPWkpKX0pOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gclswXT1lLHMocixudWxsLG4saSksclswXT1udWxsLCFpLnBvcCgpfX0pLGhhczpsZShmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIDA8c2UodCxlKS5sZW5ndGh9fSksY29udGFpbnM6bGUoZnVuY3Rpb24odCl7cmV0dXJuIHQ9dC5yZXBsYWNlKHRlLG5lKSxmdW5jdGlvbihlKXtyZXR1cm4tMTwoZS50ZXh0Q29udGVudHx8byhlKSkuaW5kZXhPZih0KX19KSxsYW5nOmxlKGZ1bmN0aW9uKG4pe3JldHVybiBWLnRlc3Qobnx8XCJcIil8fHNlLmVycm9yKFwidW5zdXBwb3J0ZWQgbGFuZzogXCIrbiksbj1uLnJlcGxhY2UodGUsbmUpLnRvTG93ZXJDYXNlKCksZnVuY3Rpb24oZSl7dmFyIHQ7ZG97aWYodD1FP2UubGFuZzplLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpfHxlLmdldEF0dHJpYnV0ZShcImxhbmdcIikpcmV0dXJuKHQ9dC50b0xvd2VyQ2FzZSgpKT09PW58fDA9PT10LmluZGV4T2YobitcIi1cIil9d2hpbGUoKGU9ZS5wYXJlbnROb2RlKSYmMT09PWUubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbihlKXt2YXIgdD1uLmxvY2F0aW9uJiZuLmxvY2F0aW9uLmhhc2g7cmV0dXJuIHQmJnQuc2xpY2UoMSk9PT1lLmlkfSxyb290OmZ1bmN0aW9uKGUpe3JldHVybiBlPT09YX0sZm9jdXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1DLmFjdGl2ZUVsZW1lbnQmJighQy5oYXNGb2N1c3x8Qy5oYXNGb2N1cygpKSYmISEoZS50eXBlfHxlLmhyZWZ8fH5lLnRhYkluZGV4KX0sZW5hYmxlZDpnZSghMSksZGlzYWJsZWQ6Z2UoITApLGNoZWNrZWQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PXQmJiEhZS5jaGVja2VkfHxcIm9wdGlvblwiPT09dCYmISFlLnNlbGVjdGVkfSxzZWxlY3RlZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwhMD09PWUuc2VsZWN0ZWR9LGVtcHR5OmZ1bmN0aW9uKGUpe2ZvcihlPWUuZmlyc3RDaGlsZDtlO2U9ZS5uZXh0U2libGluZylpZihlLm5vZGVUeXBlPDYpcmV0dXJuITE7cmV0dXJuITB9LHBhcmVudDpmdW5jdGlvbihlKXtyZXR1cm4hYi5wc2V1ZG9zLmVtcHR5KGUpfSxoZWFkZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIEoudGVzdChlLm5vZGVOYW1lKX0saW5wdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIFEudGVzdChlLm5vZGVOYW1lKX0sYnV0dG9uOmZ1bmN0aW9uKGUpe3ZhciB0PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT10JiZcImJ1dHRvblwiPT09ZS50eXBlfHxcImJ1dHRvblwiPT09dH0sdGV4dDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm5cImlucHV0XCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJlwidGV4dFwiPT09ZS50eXBlJiYobnVsbD09KHQ9ZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKXx8XCJ0ZXh0XCI9PT10LnRvTG93ZXJDYXNlKCkpfSxmaXJzdDp2ZShmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6dmUoZnVuY3Rpb24oZSx0KXtyZXR1cm5bdC0xXX0pLGVxOnZlKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm5bbjwwP24rdDpuXX0pLGV2ZW46dmUoZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MDtuPHQ7bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxvZGQ6dmUoZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MTtuPHQ7bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxsdDp2ZShmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPW48MD9uK3Q6dDxuP3Q6bjswPD0tLXI7KWUucHVzaChyKTtyZXR1cm4gZX0pLGd0OnZlKGZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9bjwwP24rdDpuOysrcjx0OyllLnB1c2gocik7cmV0dXJuIGV9KX19KS5wc2V1ZG9zLm50aD1iLnBzZXVkb3MuZXEse3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWIucHNldWRvc1tlXT1kZShlKTtmb3IoZSBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KWIucHNldWRvc1tlXT1oZShlKTtmdW5jdGlvbiBtZSgpe31mdW5jdGlvbiB4ZShlKXtmb3IodmFyIHQ9MCxuPWUubGVuZ3RoLHI9XCJcIjt0PG47dCsrKXIrPWVbdF0udmFsdWU7cmV0dXJuIHJ9ZnVuY3Rpb24gYmUocyxlLHQpe3ZhciB1PWUuZGlyLGw9ZS5uZXh0LGM9bHx8dSxmPXQmJlwicGFyZW50Tm9kZVwiPT09YyxwPXIrKztyZXR1cm4gZS5maXJzdD9mdW5jdGlvbihlLHQsbil7d2hpbGUoZT1lW3VdKWlmKDE9PT1lLm5vZGVUeXBlfHxmKXJldHVybiBzKGUsdCxuKTtyZXR1cm4hMX06ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPVtTLHBdO2lmKG4pe3doaWxlKGU9ZVt1XSlpZigoMT09PWUubm9kZVR5cGV8fGYpJiZzKGUsdCxuKSlyZXR1cm4hMH1lbHNlIHdoaWxlKGU9ZVt1XSlpZigxPT09ZS5ub2RlVHlwZXx8ZilpZihpPShvPWVba118fChlW2tdPXt9KSlbZS51bmlxdWVJRF18fChvW2UudW5pcXVlSURdPXt9KSxsJiZsPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKWU9ZVt1XXx8ZTtlbHNle2lmKChyPWlbY10pJiZyWzBdPT09UyYmclsxXT09PXApcmV0dXJuIGFbMl09clsyXTtpZigoaVtjXT1hKVsyXT1zKGUsdCxuKSlyZXR1cm4hMH1yZXR1cm4hMX19ZnVuY3Rpb24gd2UoaSl7cmV0dXJuIDE8aS5sZW5ndGg/ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWkubGVuZ3RoO3doaWxlKHItLSlpZighaVtyXShlLHQsbikpcmV0dXJuITE7cmV0dXJuITB9OmlbMF19ZnVuY3Rpb24gVGUoZSx0LG4scixpKXtmb3IodmFyIG8sYT1bXSxzPTAsdT1lLmxlbmd0aCxsPW51bGwhPXQ7czx1O3MrKykobz1lW3NdKSYmKG4mJiFuKG8scixpKXx8KGEucHVzaChvKSxsJiZ0LnB1c2gocykpKTtyZXR1cm4gYX1mdW5jdGlvbiBDZShkLGgsZyx2LHksZSl7cmV0dXJuIHYmJiF2W2tdJiYodj1DZSh2KSkseSYmIXlba10mJih5PUNlKHksZSkpLGxlKGZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzPVtdLHU9W10sbD10Lmxlbmd0aCxjPWV8fGZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9MCxpPXQubGVuZ3RoO3I8aTtyKyspc2UoZSx0W3JdLG4pO3JldHVybiBufShofHxcIipcIixuLm5vZGVUeXBlP1tuXTpuLFtdKSxmPSFkfHwhZSYmaD9jOlRlKGMscyxkLG4scikscD1nP3l8fChlP2Q6bHx8dik/W106dDpmO2lmKGcmJmcoZixwLG4sciksdil7aT1UZShwLHUpLHYoaSxbXSxuLHIpLG89aS5sZW5ndGg7d2hpbGUoby0tKShhPWlbb10pJiYocFt1W29dXT0hKGZbdVtvXV09YSkpfWlmKGUpe2lmKHl8fGQpe2lmKHkpe2k9W10sbz1wLmxlbmd0aDt3aGlsZShvLS0pKGE9cFtvXSkmJmkucHVzaChmW29dPWEpO3kobnVsbCxwPVtdLGkscil9bz1wLmxlbmd0aDt3aGlsZShvLS0pKGE9cFtvXSkmJi0xPChpPXk/UChlLGEpOnNbb10pJiYoZVtpXT0hKHRbaV09YSkpfX1lbHNlIHA9VGUocD09PXQ/cC5zcGxpY2UobCxwLmxlbmd0aCk6cCkseT95KG51bGwsdCxwLHIpOkguYXBwbHkodCxwKX0pfWZ1bmN0aW9uIEVlKGUpe2Zvcih2YXIgaSx0LG4scj1lLmxlbmd0aCxvPWIucmVsYXRpdmVbZVswXS50eXBlXSxhPW98fGIucmVsYXRpdmVbXCIgXCJdLHM9bz8xOjAsdT1iZShmdW5jdGlvbihlKXtyZXR1cm4gZT09PWl9LGEsITApLGw9YmUoZnVuY3Rpb24oZSl7cmV0dXJuLTE8UChpLGUpfSxhLCEwKSxjPVtmdW5jdGlvbihlLHQsbil7dmFyIHI9IW8mJihufHx0IT09dyl8fCgoaT10KS5ub2RlVHlwZT91KGUsdCxuKTpsKGUsdCxuKSk7cmV0dXJuIGk9bnVsbCxyfV07czxyO3MrKylpZih0PWIucmVsYXRpdmVbZVtzXS50eXBlXSljPVtiZSh3ZShjKSx0KV07ZWxzZXtpZigodD1iLmZpbHRlcltlW3NdLnR5cGVdLmFwcGx5KG51bGwsZVtzXS5tYXRjaGVzKSlba10pe2ZvcihuPSsrcztuPHI7bisrKWlmKGIucmVsYXRpdmVbZVtuXS50eXBlXSlicmVhaztyZXR1cm4gQ2UoMTxzJiZ3ZShjKSwxPHMmJnhlKGUuc2xpY2UoMCxzLTEpLmNvbmNhdCh7dmFsdWU6XCIgXCI9PT1lW3MtMl0udHlwZT9cIipcIjpcIlwifSkpLnJlcGxhY2UoQixcIiQxXCIpLHQsczxuJiZFZShlLnNsaWNlKHMsbikpLG48ciYmRWUoZT1lLnNsaWNlKG4pKSxuPHImJnhlKGUpKX1jLnB1c2godCl9cmV0dXJuIHdlKGMpfXJldHVybiBtZS5wcm90b3R5cGU9Yi5maWx0ZXJzPWIucHNldWRvcyxiLnNldEZpbHRlcnM9bmV3IG1lLGg9c2UudG9rZW5pemU9ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbyxhLHMsdSxsPXhbZStcIiBcIl07aWYobClyZXR1cm4gdD8wOmwuc2xpY2UoMCk7YT1lLHM9W10sdT1iLnByZUZpbHRlcjt3aGlsZShhKXtmb3IobyBpbiBuJiYhKHI9Xy5leGVjKGEpKXx8KHImJihhPWEuc2xpY2UoclswXS5sZW5ndGgpfHxhKSxzLnB1c2goaT1bXSkpLG49ITEsKHI9ei5leGVjKGEpKSYmKG49ci5zaGlmdCgpLGkucHVzaCh7dmFsdWU6bix0eXBlOnJbMF0ucmVwbGFjZShCLFwiIFwiKX0pLGE9YS5zbGljZShuLmxlbmd0aCkpLGIuZmlsdGVyKSEocj1HW29dLmV4ZWMoYSkpfHx1W29dJiYhKHI9dVtvXShyKSl8fChuPXIuc2hpZnQoKSxpLnB1c2goe3ZhbHVlOm4sdHlwZTpvLG1hdGNoZXM6cn0pLGE9YS5zbGljZShuLmxlbmd0aCkpO2lmKCFuKWJyZWFrfXJldHVybiB0P2EubGVuZ3RoOmE/c2UuZXJyb3IoZSk6eChlLHMpLnNsaWNlKDApfSxmPXNlLmNvbXBpbGU9ZnVuY3Rpb24oZSx0KXt2YXIgbix2LHksbSx4LHIsaT1bXSxvPVtdLGE9TltlK1wiIFwiXTtpZighYSl7dHx8KHQ9aChlKSksbj10Lmxlbmd0aDt3aGlsZShuLS0pKGE9RWUodFtuXSkpW2tdP2kucHVzaChhKTpvLnB1c2goYSk7KGE9TihlLCh2PW8sbT0wPCh5PWkpLmxlbmd0aCx4PTA8di5sZW5ndGgscj1mdW5jdGlvbihlLHQsbixyLGkpe3ZhciBvLGEscyx1PTAsbD1cIjBcIixjPWUmJltdLGY9W10scD13LGQ9ZXx8eCYmYi5maW5kLlRBRyhcIipcIixpKSxoPVMrPW51bGw9PXA/MTpNYXRoLnJhbmRvbSgpfHwuMSxnPWQubGVuZ3RoO2ZvcihpJiYodz10PT09Q3x8dHx8aSk7bCE9PWcmJm51bGwhPShvPWRbbF0pO2wrKyl7aWYoeCYmbyl7YT0wLHR8fG8ub3duZXJEb2N1bWVudD09PUN8fChUKG8pLG49IUUpO3doaWxlKHM9dlthKytdKWlmKHMobyx0fHxDLG4pKXtyLnB1c2gobyk7YnJlYWt9aSYmKFM9aCl9bSYmKChvPSFzJiZvKSYmdS0tLGUmJmMucHVzaChvKSl9aWYodSs9bCxtJiZsIT09dSl7YT0wO3doaWxlKHM9eVthKytdKXMoYyxmLHQsbik7aWYoZSl7aWYoMDx1KXdoaWxlKGwtLSljW2xdfHxmW2xdfHwoZltsXT1xLmNhbGwocikpO2Y9VGUoZil9SC5hcHBseShyLGYpLGkmJiFlJiYwPGYubGVuZ3RoJiYxPHUreS5sZW5ndGgmJnNlLnVuaXF1ZVNvcnQocil9cmV0dXJuIGkmJihTPWgsdz1wKSxjfSxtP2xlKHIpOnIpKSkuc2VsZWN0b3I9ZX1yZXR1cm4gYX0sZz1zZS5zZWxlY3Q9ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPVwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUsYz0hciYmaChlPWwuc2VsZWN0b3J8fGUpO2lmKG49bnx8W10sMT09PWMubGVuZ3RoKXtpZigyPChvPWNbMF09Y1swXS5zbGljZSgwKSkubGVuZ3RoJiZcIklEXCI9PT0oYT1vWzBdKS50eXBlJiY5PT09dC5ub2RlVHlwZSYmRSYmYi5yZWxhdGl2ZVtvWzFdLnR5cGVdKXtpZighKHQ9KGIuZmluZC5JRChhLm1hdGNoZXNbMF0ucmVwbGFjZSh0ZSxuZSksdCl8fFtdKVswXSkpcmV0dXJuIG47bCYmKHQ9dC5wYXJlbnROb2RlKSxlPWUuc2xpY2Uoby5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9aT1HLm5lZWRzQ29udGV4dC50ZXN0KGUpPzA6by5sZW5ndGg7d2hpbGUoaS0tKXtpZihhPW9baV0sYi5yZWxhdGl2ZVtzPWEudHlwZV0pYnJlYWs7aWYoKHU9Yi5maW5kW3NdKSYmKHI9dShhLm1hdGNoZXNbMF0ucmVwbGFjZSh0ZSxuZSksZWUudGVzdChvWzBdLnR5cGUpJiZ5ZSh0LnBhcmVudE5vZGUpfHx0KSkpe2lmKG8uc3BsaWNlKGksMSksIShlPXIubGVuZ3RoJiZ4ZShvKSkpcmV0dXJuIEguYXBwbHkobixyKSxuO2JyZWFrfX19cmV0dXJuKGx8fGYoZSxjKSkocix0LCFFLG4sIXR8fGVlLnRlc3QoZSkmJnllKHQucGFyZW50Tm9kZSl8fHQpLG59LGQuc29ydFN0YWJsZT1rLnNwbGl0KFwiXCIpLnNvcnQoRCkuam9pbihcIlwiKT09PWssZC5kZXRlY3REdXBsaWNhdGVzPSEhbCxUKCksZC5zb3J0RGV0YWNoZWQ9Y2UoZnVuY3Rpb24oZSl7cmV0dXJuIDEmZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihDLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSl9KSxjZShmdW5jdGlvbihlKXtyZXR1cm4gZS5pbm5lckhUTUw9XCI8YSBocmVmPScjJz48L2E+XCIsXCIjXCI9PT1lLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKX0pfHxmZShcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIixmdW5jdGlvbihlLHQsbil7aWYoIW4pcmV0dXJuIGUuZ2V0QXR0cmlidXRlKHQsXCJ0eXBlXCI9PT10LnRvTG93ZXJDYXNlKCk/MToyKX0pLGQuYXR0cmlidXRlcyYmY2UoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5uZXJIVE1MPVwiPGlucHV0Lz5cIixlLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiKSxcIlwiPT09ZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpfSl8fGZlKFwidmFsdWVcIixmdW5jdGlvbihlLHQsbil7aWYoIW4mJlwiaW5wdXRcIj09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSlyZXR1cm4gZS5kZWZhdWx0VmFsdWV9KSxjZShmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZS5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKX0pfHxmZShSLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtpZighbilyZXR1cm4hMD09PWVbdF0/dC50b0xvd2VyQ2FzZSgpOihyPWUuZ2V0QXR0cmlidXRlTm9kZSh0KSkmJnIuc3BlY2lmaWVkP3IudmFsdWU6bnVsbH0pLHNlfShDKTtrLmZpbmQ9aCxrLmV4cHI9aC5zZWxlY3RvcnMsay5leHByW1wiOlwiXT1rLmV4cHIucHNldWRvcyxrLnVuaXF1ZVNvcnQ9ay51bmlxdWU9aC51bmlxdWVTb3J0LGsudGV4dD1oLmdldFRleHQsay5pc1hNTERvYz1oLmlzWE1MLGsuY29udGFpbnM9aC5jb250YWlucyxrLmVzY2FwZVNlbGVjdG9yPWguZXNjYXBlO3ZhciBUPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1bXSxpPXZvaWQgMCE9PW47d2hpbGUoKGU9ZVt0XSkmJjkhPT1lLm5vZGVUeXBlKWlmKDE9PT1lLm5vZGVUeXBlKXtpZihpJiZrKGUpLmlzKG4pKWJyZWFrO3IucHVzaChlKX1yZXR1cm4gcn0sUz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1bXTtlO2U9ZS5uZXh0U2libGluZykxPT09ZS5ub2RlVHlwZSYmZSE9PXQmJm4ucHVzaChlKTtyZXR1cm4gbn0sTj1rLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O2Z1bmN0aW9uIEEoZSx0KXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09dC50b0xvd2VyQ2FzZSgpfXZhciBEPS9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pO2Z1bmN0aW9uIGooZSxuLHIpe3JldHVybiBtKG4pP2suZ3JlcChlLGZ1bmN0aW9uKGUsdCl7cmV0dXJuISFuLmNhbGwoZSx0LGUpIT09cn0pOm4ubm9kZVR5cGU/ay5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1uIT09cn0pOlwic3RyaW5nXCIhPXR5cGVvZiBuP2suZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybi0xPGkuY2FsbChuLGUpIT09cn0pOmsuZmlsdGVyKG4sZSxyKX1rLmZpbHRlcj1mdW5jdGlvbihlLHQsbil7dmFyIHI9dFswXTtyZXR1cm4gbiYmKGU9XCI6bm90KFwiK2UrXCIpXCIpLDE9PT10Lmxlbmd0aCYmMT09PXIubm9kZVR5cGU/ay5maW5kLm1hdGNoZXNTZWxlY3RvcihyLGUpP1tyXTpbXTprLmZpbmQubWF0Y2hlcyhlLGsuZ3JlcCh0LGZ1bmN0aW9uKGUpe3JldHVybiAxPT09ZS5ub2RlVHlwZX0pKX0say5mbi5leHRlbmQoe2ZpbmQ6ZnVuY3Rpb24oZSl7dmFyIHQsbixyPXRoaXMubGVuZ3RoLGk9dGhpcztpZihcInN0cmluZ1wiIT10eXBlb2YgZSlyZXR1cm4gdGhpcy5wdXNoU3RhY2soayhlKS5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodD0wO3Q8cjt0KyspaWYoay5jb250YWlucyhpW3RdLHRoaXMpKXJldHVybiEwfSkpO2ZvcihuPXRoaXMucHVzaFN0YWNrKFtdKSx0PTA7dDxyO3QrKylrLmZpbmQoZSxpW3RdLG4pO3JldHVybiAxPHI/ay51bmlxdWVTb3J0KG4pOm59LGZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soaih0aGlzLGV8fFtdLCExKSl9LG5vdDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soaih0aGlzLGV8fFtdLCEwKSl9LGlzOmZ1bmN0aW9uKGUpe3JldHVybiEhaih0aGlzLFwic3RyaW5nXCI9PXR5cGVvZiBlJiZOLnRlc3QoZSk/ayhlKTplfHxbXSwhMSkubGVuZ3RofX0pO3ZhciBxLEw9L14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC87KGsuZm4uaW5pdD1mdW5jdGlvbihlLHQsbil7dmFyIHIsaTtpZighZSlyZXR1cm4gdGhpcztpZihuPW58fHEsXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKCEocj1cIjxcIj09PWVbMF0mJlwiPlwiPT09ZVtlLmxlbmd0aC0xXSYmMzw9ZS5sZW5ndGg/W251bGwsZSxudWxsXTpMLmV4ZWMoZSkpfHwhclsxXSYmdClyZXR1cm4hdHx8dC5qcXVlcnk/KHR8fG4pLmZpbmQoZSk6dGhpcy5jb25zdHJ1Y3Rvcih0KS5maW5kKGUpO2lmKHJbMV0pe2lmKHQ9dCBpbnN0YW5jZW9mIGs/dFswXTp0LGsubWVyZ2UodGhpcyxrLnBhcnNlSFRNTChyWzFdLHQmJnQubm9kZVR5cGU/dC5vd25lckRvY3VtZW50fHx0OkUsITApKSxELnRlc3QoclsxXSkmJmsuaXNQbGFpbk9iamVjdCh0KSlmb3IociBpbiB0KW0odGhpc1tyXSk/dGhpc1tyXSh0W3JdKTp0aGlzLmF0dHIocix0W3JdKTtyZXR1cm4gdGhpc31yZXR1cm4oaT1FLmdldEVsZW1lbnRCeUlkKHJbMl0pKSYmKHRoaXNbMF09aSx0aGlzLmxlbmd0aD0xKSx0aGlzfXJldHVybiBlLm5vZGVUeXBlPyh0aGlzWzBdPWUsdGhpcy5sZW5ndGg9MSx0aGlzKTptKGUpP3ZvaWQgMCE9PW4ucmVhZHk/bi5yZWFkeShlKTplKGspOmsubWFrZUFycmF5KGUsdGhpcyl9KS5wcm90b3R5cGU9ay5mbixxPWsoRSk7dmFyIEg9L14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sTz17Y2hpbGRyZW46ITAsY29udGVudHM6ITAsbmV4dDohMCxwcmV2OiEwfTtmdW5jdGlvbiBQKGUsdCl7d2hpbGUoKGU9ZVt0XSkmJjEhPT1lLm5vZGVUeXBlKTtyZXR1cm4gZX1rLmZuLmV4dGVuZCh7aGFzOmZ1bmN0aW9uKGUpe3ZhciB0PWsoZSx0aGlzKSxuPXQubGVuZ3RoO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpe2Zvcih2YXIgZT0wO2U8bjtlKyspaWYoay5jb250YWlucyh0aGlzLHRbZV0pKXJldHVybiEwfSl9LGNsb3Nlc3Q6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTAsaT10aGlzLmxlbmd0aCxvPVtdLGE9XCJzdHJpbmdcIiE9dHlwZW9mIGUmJmsoZSk7aWYoIU4udGVzdChlKSlmb3IoO3I8aTtyKyspZm9yKG49dGhpc1tyXTtuJiZuIT09dDtuPW4ucGFyZW50Tm9kZSlpZihuLm5vZGVUeXBlPDExJiYoYT8tMTxhLmluZGV4KG4pOjE9PT1uLm5vZGVUeXBlJiZrLmZpbmQubWF0Y2hlc1NlbGVjdG9yKG4sZSkpKXtvLnB1c2gobik7YnJlYWt9cmV0dXJuIHRoaXMucHVzaFN0YWNrKDE8by5sZW5ndGg/ay51bmlxdWVTb3J0KG8pOm8pfSxpbmRleDpmdW5jdGlvbihlKXtyZXR1cm4gZT9cInN0cmluZ1wiPT10eXBlb2YgZT9pLmNhbGwoayhlKSx0aGlzWzBdKTppLmNhbGwodGhpcyxlLmpxdWVyeT9lWzBdOmUpOnRoaXNbMF0mJnRoaXNbMF0ucGFyZW50Tm9kZT90aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aDotMX0sYWRkOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGsudW5pcXVlU29ydChrLm1lcmdlKHRoaXMuZ2V0KCksayhlLHQpKSkpfSxhZGRCYWNrOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmFkZChudWxsPT1lP3RoaXMucHJldk9iamVjdDp0aGlzLnByZXZPYmplY3QuZmlsdGVyKGUpKX19KSxrLmVhY2goe3BhcmVudDpmdW5jdGlvbihlKXt2YXIgdD1lLnBhcmVudE5vZGU7cmV0dXJuIHQmJjExIT09dC5ub2RlVHlwZT90Om51bGx9LHBhcmVudHM6ZnVuY3Rpb24oZSl7cmV0dXJuIFQoZSxcInBhcmVudE5vZGVcIil9LHBhcmVudHNVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIFQoZSxcInBhcmVudE5vZGVcIixuKX0sbmV4dDpmdW5jdGlvbihlKXtyZXR1cm4gUChlLFwibmV4dFNpYmxpbmdcIil9LHByZXY6ZnVuY3Rpb24oZSl7cmV0dXJuIFAoZSxcInByZXZpb3VzU2libGluZ1wiKX0sbmV4dEFsbDpmdW5jdGlvbihlKXtyZXR1cm4gVChlLFwibmV4dFNpYmxpbmdcIil9LHByZXZBbGw6ZnVuY3Rpb24oZSl7cmV0dXJuIFQoZSxcInByZXZpb3VzU2libGluZ1wiKX0sbmV4dFVudGlsOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gVChlLFwibmV4dFNpYmxpbmdcIixuKX0scHJldlVudGlsOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gVChlLFwicHJldmlvdXNTaWJsaW5nXCIsbil9LHNpYmxpbmdzOmZ1bmN0aW9uKGUpe3JldHVybiBTKChlLnBhcmVudE5vZGV8fHt9KS5maXJzdENoaWxkLGUpfSxjaGlsZHJlbjpmdW5jdGlvbihlKXtyZXR1cm4gUyhlLmZpcnN0Q2hpbGQpfSxjb250ZW50czpmdW5jdGlvbihlKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgZS5jb250ZW50RG9jdW1lbnQ/ZS5jb250ZW50RG9jdW1lbnQ6KEEoZSxcInRlbXBsYXRlXCIpJiYoZT1lLmNvbnRlbnR8fGUpLGsubWVyZ2UoW10sZS5jaGlsZE5vZGVzKSl9fSxmdW5jdGlvbihyLGkpe2suZm5bcl09ZnVuY3Rpb24oZSx0KXt2YXIgbj1rLm1hcCh0aGlzLGksZSk7cmV0dXJuXCJVbnRpbFwiIT09ci5zbGljZSgtNSkmJih0PWUpLHQmJlwic3RyaW5nXCI9PXR5cGVvZiB0JiYobj1rLmZpbHRlcih0LG4pKSwxPHRoaXMubGVuZ3RoJiYoT1tyXXx8ay51bmlxdWVTb3J0KG4pLEgudGVzdChyKSYmbi5yZXZlcnNlKCkpLHRoaXMucHVzaFN0YWNrKG4pfX0pO3ZhciBSPS9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztmdW5jdGlvbiBNKGUpe3JldHVybiBlfWZ1bmN0aW9uIEkoZSl7dGhyb3cgZX1mdW5jdGlvbiBXKGUsdCxuLHIpe3ZhciBpO3RyeXtlJiZtKGk9ZS5wcm9taXNlKT9pLmNhbGwoZSkuZG9uZSh0KS5mYWlsKG4pOmUmJm0oaT1lLnRoZW4pP2kuY2FsbChlLHQsbik6dC5hcHBseSh2b2lkIDAsW2VdLnNsaWNlKHIpKX1jYXRjaChlKXtuLmFwcGx5KHZvaWQgMCxbZV0pfX1rLkNhbGxiYWNrcz1mdW5jdGlvbihyKXt2YXIgZSxuO3I9XCJzdHJpbmdcIj09dHlwZW9mIHI/KGU9cixuPXt9LGsuZWFjaChlLm1hdGNoKFIpfHxbXSxmdW5jdGlvbihlLHQpe25bdF09ITB9KSxuKTprLmV4dGVuZCh7fSxyKTt2YXIgaSx0LG8sYSxzPVtdLHU9W10sbD0tMSxjPWZ1bmN0aW9uKCl7Zm9yKGE9YXx8ci5vbmNlLG89aT0hMDt1Lmxlbmd0aDtsPS0xKXt0PXUuc2hpZnQoKTt3aGlsZSgrK2w8cy5sZW5ndGgpITE9PT1zW2xdLmFwcGx5KHRbMF0sdFsxXSkmJnIuc3RvcE9uRmFsc2UmJihsPXMubGVuZ3RoLHQ9ITEpfXIubWVtb3J5fHwodD0hMSksaT0hMSxhJiYocz10P1tdOlwiXCIpfSxmPXthZGQ6ZnVuY3Rpb24oKXtyZXR1cm4gcyYmKHQmJiFpJiYobD1zLmxlbmd0aC0xLHUucHVzaCh0KSksZnVuY3Rpb24gbihlKXtrLmVhY2goZSxmdW5jdGlvbihlLHQpe20odCk/ci51bmlxdWUmJmYuaGFzKHQpfHxzLnB1c2godCk6dCYmdC5sZW5ndGgmJlwic3RyaW5nXCIhPT13KHQpJiZuKHQpfSl9KGFyZ3VtZW50cyksdCYmIWkmJmMoKSksdGhpc30scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIGsuZWFjaChhcmd1bWVudHMsZnVuY3Rpb24oZSx0KXt2YXIgbjt3aGlsZSgtMTwobj1rLmluQXJyYXkodCxzLG4pKSlzLnNwbGljZShuLDEpLG48PWwmJmwtLX0pLHRoaXN9LGhhczpmdW5jdGlvbihlKXtyZXR1cm4gZT8tMTxrLmluQXJyYXkoZSxzKTowPHMubGVuZ3RofSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiBzJiYocz1bXSksdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiBhPXU9W10scz10PVwiXCIsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hc30sbG9jazpmdW5jdGlvbigpe3JldHVybiBhPXU9W10sdHx8aXx8KHM9dD1cIlwiKSx0aGlzfSxsb2NrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWF9LGZpcmVXaXRoOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGF8fCh0PVtlLCh0PXR8fFtdKS5zbGljZT90LnNsaWNlKCk6dF0sdS5wdXNoKHQpLGl8fGMoKSksdGhpc30sZmlyZTpmdW5jdGlvbigpe3JldHVybiBmLmZpcmVXaXRoKHRoaXMsYXJndW1lbnRzKSx0aGlzfSxmaXJlZDpmdW5jdGlvbigpe3JldHVybiEhb319O3JldHVybiBmfSxrLmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24oZSl7dmFyIG89W1tcIm5vdGlmeVwiLFwicHJvZ3Jlc3NcIixrLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSxrLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwyXSxbXCJyZXNvbHZlXCIsXCJkb25lXCIsay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxrLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLDAsXCJyZXNvbHZlZFwiXSxbXCJyZWplY3RcIixcImZhaWxcIixrLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLGsuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMSxcInJlamVjdGVkXCJdXSxpPVwicGVuZGluZ1wiLGE9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGl9LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBzLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sXCJjYXRjaFwiOmZ1bmN0aW9uKGUpe3JldHVybiBhLnRoZW4obnVsbCxlKX0scGlwZTpmdW5jdGlvbigpe3ZhciBpPWFyZ3VtZW50cztyZXR1cm4gay5EZWZlcnJlZChmdW5jdGlvbihyKXtrLmVhY2gobyxmdW5jdGlvbihlLHQpe3ZhciBuPW0oaVt0WzRdXSkmJmlbdFs0XV07c1t0WzFdXShmdW5jdGlvbigpe3ZhciBlPW4mJm4uYXBwbHkodGhpcyxhcmd1bWVudHMpO2UmJm0oZS5wcm9taXNlKT9lLnByb21pc2UoKS5wcm9ncmVzcyhyLm5vdGlmeSkuZG9uZShyLnJlc29sdmUpLmZhaWwoci5yZWplY3QpOnJbdFswXStcIldpdGhcIl0odGhpcyxuP1tlXTphcmd1bWVudHMpfSl9KSxpPW51bGx9KS5wcm9taXNlKCl9LHRoZW46ZnVuY3Rpb24odCxuLHIpe3ZhciB1PTA7ZnVuY3Rpb24gbChpLG8sYSxzKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbj10aGlzLHI9YXJndW1lbnRzLGU9ZnVuY3Rpb24oKXt2YXIgZSx0O2lmKCEoaTx1KSl7aWYoKGU9YS5hcHBseShuLHIpKT09PW8ucHJvbWlzZSgpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIik7dD1lJiYoXCJvYmplY3RcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpJiZlLnRoZW4sbSh0KT9zP3QuY2FsbChlLGwodSxvLE0scyksbCh1LG8sSSxzKSk6KHUrKyx0LmNhbGwoZSxsKHUsbyxNLHMpLGwodSxvLEkscyksbCh1LG8sTSxvLm5vdGlmeVdpdGgpKSk6KGEhPT1NJiYobj12b2lkIDAscj1bZV0pLChzfHxvLnJlc29sdmVXaXRoKShuLHIpKX19LHQ9cz9lOmZ1bmN0aW9uKCl7dHJ5e2UoKX1jYXRjaChlKXtrLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2smJmsuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhlLHQuc3RhY2tUcmFjZSksdTw9aSsxJiYoYSE9PUkmJihuPXZvaWQgMCxyPVtlXSksby5yZWplY3RXaXRoKG4scikpfX07aT90KCk6KGsuRGVmZXJyZWQuZ2V0U3RhY2tIb29rJiYodC5zdGFja1RyYWNlPWsuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLEMuc2V0VGltZW91dCh0KSl9fXJldHVybiBrLkRlZmVycmVkKGZ1bmN0aW9uKGUpe29bMF1bM10uYWRkKGwoMCxlLG0ocik/cjpNLGUubm90aWZ5V2l0aCkpLG9bMV1bM10uYWRkKGwoMCxlLG0odCk/dDpNKSksb1syXVszXS5hZGQobCgwLGUsbShuKT9uOkkpKX0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZT9rLmV4dGVuZChlLGEpOmF9fSxzPXt9O3JldHVybiBrLmVhY2gobyxmdW5jdGlvbihlLHQpe3ZhciBuPXRbMl0scj10WzVdO2FbdFsxXV09bi5hZGQsciYmbi5hZGQoZnVuY3Rpb24oKXtpPXJ9LG9bMy1lXVsyXS5kaXNhYmxlLG9bMy1lXVszXS5kaXNhYmxlLG9bMF1bMl0ubG9jayxvWzBdWzNdLmxvY2spLG4uYWRkKHRbM10uZmlyZSksc1t0WzBdXT1mdW5jdGlvbigpe3JldHVybiBzW3RbMF0rXCJXaXRoXCJdKHRoaXM9PT1zP3ZvaWQgMDp0aGlzLGFyZ3VtZW50cyksdGhpc30sc1t0WzBdK1wiV2l0aFwiXT1uLmZpcmVXaXRofSksYS5wcm9taXNlKHMpLGUmJmUuY2FsbChzLHMpLHN9LHdoZW46ZnVuY3Rpb24oZSl7dmFyIG49YXJndW1lbnRzLmxlbmd0aCx0PW4scj1BcnJheSh0KSxpPXMuY2FsbChhcmd1bWVudHMpLG89ay5EZWZlcnJlZCgpLGE9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JbdF09dGhpcyxpW3RdPTE8YXJndW1lbnRzLmxlbmd0aD9zLmNhbGwoYXJndW1lbnRzKTplLC0tbnx8by5yZXNvbHZlV2l0aChyLGkpfX07aWYobjw9MSYmKFcoZSxvLmRvbmUoYSh0KSkucmVzb2x2ZSxvLnJlamVjdCwhbiksXCJwZW5kaW5nXCI9PT1vLnN0YXRlKCl8fG0oaVt0XSYmaVt0XS50aGVuKSkpcmV0dXJuIG8udGhlbigpO3doaWxlKHQtLSlXKGlbdF0sYSh0KSxvLnJlamVjdCk7cmV0dXJuIG8ucHJvbWlzZSgpfX0pO3ZhciAkPS9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO2suRGVmZXJyZWQuZXhjZXB0aW9uSG9vaz1mdW5jdGlvbihlLHQpe0MuY29uc29sZSYmQy5jb25zb2xlLndhcm4mJmUmJiQudGVzdChlLm5hbWUpJiZDLmNvbnNvbGUud2FybihcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiK2UubWVzc2FnZSxlLnN0YWNrLHQpfSxrLnJlYWR5RXhjZXB0aW9uPWZ1bmN0aW9uKGUpe0Muc2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGV9KX07dmFyIEY9ay5EZWZlcnJlZCgpO2Z1bmN0aW9uIEIoKXtFLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsQiksQy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLEIpLGsucmVhZHkoKX1rLmZuLnJlYWR5PWZ1bmN0aW9uKGUpe3JldHVybiBGLnRoZW4oZSlbXCJjYXRjaFwiXShmdW5jdGlvbihlKXtrLnJlYWR5RXhjZXB0aW9uKGUpfSksdGhpc30say5leHRlbmQoe2lzUmVhZHk6ITEscmVhZHlXYWl0OjEscmVhZHk6ZnVuY3Rpb24oZSl7KCEwPT09ZT8tLWsucmVhZHlXYWl0OmsuaXNSZWFkeSl8fChrLmlzUmVhZHk9ITApIT09ZSYmMDwtLWsucmVhZHlXYWl0fHxGLnJlc29sdmVXaXRoKEUsW2tdKX19KSxrLnJlYWR5LnRoZW49Ri50aGVuLFwiY29tcGxldGVcIj09PUUucmVhZHlTdGF0ZXx8XCJsb2FkaW5nXCIhPT1FLnJlYWR5U3RhdGUmJiFFLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbD9DLnNldFRpbWVvdXQoay5yZWFkeSk6KEUuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixCKSxDLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsQikpO3ZhciBfPWZ1bmN0aW9uKGUsdCxuLHIsaSxvLGEpe3ZhciBzPTAsdT1lLmxlbmd0aCxsPW51bGw9PW47aWYoXCJvYmplY3RcIj09PXcobikpZm9yKHMgaW4gaT0hMCxuKV8oZSx0LHMsbltzXSwhMCxvLGEpO2Vsc2UgaWYodm9pZCAwIT09ciYmKGk9ITAsbShyKXx8KGE9ITApLGwmJihhPyh0LmNhbGwoZSxyKSx0PW51bGwpOihsPXQsdD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGwuY2FsbChrKGUpLG4pfSkpLHQpKWZvcig7czx1O3MrKyl0KGVbc10sbixhP3I6ci5jYWxsKGVbc10scyx0KGVbc10sbikpKTtyZXR1cm4gaT9lOmw/dC5jYWxsKGUpOnU/dChlWzBdLG4pOm99LHo9L14tbXMtLyxVPS8tKFthLXpdKS9nO2Z1bmN0aW9uIFgoZSx0KXtyZXR1cm4gdC50b1VwcGVyQ2FzZSgpfWZ1bmN0aW9uIFYoZSl7cmV0dXJuIGUucmVwbGFjZSh6LFwibXMtXCIpLnJlcGxhY2UoVSxYKX12YXIgRz1mdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGV8fDk9PT1lLm5vZGVUeXBlfHwhK2Uubm9kZVR5cGV9O2Z1bmN0aW9uIFkoKXt0aGlzLmV4cGFuZG89ay5leHBhbmRvK1kudWlkKyt9WS51aWQ9MSxZLnByb3RvdHlwZT17Y2FjaGU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZVt0aGlzLmV4cGFuZG9dO3JldHVybiB0fHwodD17fSxHKGUpJiYoZS5ub2RlVHlwZT9lW3RoaXMuZXhwYW5kb109dDpPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0aGlzLmV4cGFuZG8se3ZhbHVlOnQsY29uZmlndXJhYmxlOiEwfSkpKSx0fSxzZXQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9dGhpcy5jYWNoZShlKTtpZihcInN0cmluZ1wiPT10eXBlb2YgdClpW1YodCldPW47ZWxzZSBmb3IociBpbiB0KWlbVihyKV09dFtyXTtyZXR1cm4gaX0sZ2V0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQ/dGhpcy5jYWNoZShlKTplW3RoaXMuZXhwYW5kb10mJmVbdGhpcy5leHBhbmRvXVtWKHQpXX0sYWNjZXNzOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09dHx8dCYmXCJzdHJpbmdcIj09dHlwZW9mIHQmJnZvaWQgMD09PW4/dGhpcy5nZXQoZSx0KToodGhpcy5zZXQoZSx0LG4pLHZvaWQgMCE9PW4/bjp0KX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1lW3RoaXMuZXhwYW5kb107aWYodm9pZCAwIT09cil7aWYodm9pZCAwIT09dCl7bj0odD1BcnJheS5pc0FycmF5KHQpP3QubWFwKFYpOih0PVYodCkpaW4gcj9bdF06dC5tYXRjaChSKXx8W10pLmxlbmd0aDt3aGlsZShuLS0pZGVsZXRlIHJbdFtuXV19KHZvaWQgMD09PXR8fGsuaXNFbXB0eU9iamVjdChyKSkmJihlLm5vZGVUeXBlP2VbdGhpcy5leHBhbmRvXT12b2lkIDA6ZGVsZXRlIGVbdGhpcy5leHBhbmRvXSl9fSxoYXNEYXRhOmZ1bmN0aW9uKGUpe3ZhciB0PWVbdGhpcy5leHBhbmRvXTtyZXR1cm4gdm9pZCAwIT09dCYmIWsuaXNFbXB0eU9iamVjdCh0KX19O3ZhciBRPW5ldyBZLEo9bmV3IFksSz0vXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sWj0vW0EtWl0vZztmdW5jdGlvbiBlZShlLHQsbil7dmFyIHIsaTtpZih2b2lkIDA9PT1uJiYxPT09ZS5ub2RlVHlwZSlpZihyPVwiZGF0YS1cIit0LnJlcGxhY2UoWixcIi0kJlwiKS50b0xvd2VyQ2FzZSgpLFwic3RyaW5nXCI9PXR5cGVvZihuPWUuZ2V0QXR0cmlidXRlKHIpKSl7dHJ5e249XCJ0cnVlXCI9PT0oaT1uKXx8XCJmYWxzZVwiIT09aSYmKFwibnVsbFwiPT09aT9udWxsOmk9PT0raStcIlwiPytpOksudGVzdChpKT9KU09OLnBhcnNlKGkpOmkpfWNhdGNoKGUpe31KLnNldChlLHQsbil9ZWxzZSBuPXZvaWQgMDtyZXR1cm4gbn1rLmV4dGVuZCh7aGFzRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gSi5oYXNEYXRhKGUpfHxRLmhhc0RhdGEoZSl9LGRhdGE6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBKLmFjY2VzcyhlLHQsbil9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtKLnJlbW92ZShlLHQpfSxfZGF0YTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIFEuYWNjZXNzKGUsdCxuKX0sX3JlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtRLnJlbW92ZShlLHQpfX0pLGsuZm4uZXh0ZW5kKHtkYXRhOmZ1bmN0aW9uKG4sZSl7dmFyIHQscixpLG89dGhpc1swXSxhPW8mJm8uYXR0cmlidXRlcztpZih2b2lkIDA9PT1uKXtpZih0aGlzLmxlbmd0aCYmKGk9Si5nZXQobyksMT09PW8ubm9kZVR5cGUmJiFRLmdldChvLFwiaGFzRGF0YUF0dHJzXCIpKSl7dD1hLmxlbmd0aDt3aGlsZSh0LS0pYVt0XSYmMD09PShyPWFbdF0ubmFtZSkuaW5kZXhPZihcImRhdGEtXCIpJiYocj1WKHIuc2xpY2UoNSkpLGVlKG8scixpW3JdKSk7US5zZXQobyxcImhhc0RhdGFBdHRyc1wiLCEwKX1yZXR1cm4gaX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2Ygbj90aGlzLmVhY2goZnVuY3Rpb24oKXtKLnNldCh0aGlzLG4pfSk6Xyh0aGlzLGZ1bmN0aW9uKGUpe3ZhciB0O2lmKG8mJnZvaWQgMD09PWUpcmV0dXJuIHZvaWQgMCE9PSh0PUouZ2V0KG8sbikpP3Q6dm9pZCAwIT09KHQ9ZWUobyxuKSk/dDp2b2lkIDA7dGhpcy5lYWNoKGZ1bmN0aW9uKCl7Si5zZXQodGhpcyxuLGUpfSl9LG51bGwsZSwxPGFyZ3VtZW50cy5sZW5ndGgsbnVsbCwhMCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe0oucmVtb3ZlKHRoaXMsZSl9KX19KSxrLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKGUpcmV0dXJuIHQ9KHR8fFwiZnhcIikrXCJxdWV1ZVwiLHI9US5nZXQoZSx0KSxuJiYoIXJ8fEFycmF5LmlzQXJyYXkobik/cj1RLmFjY2VzcyhlLHQsay5tYWtlQXJyYXkobikpOnIucHVzaChuKSkscnx8W119LGRlcXVldWU6ZnVuY3Rpb24oZSx0KXt0PXR8fFwiZnhcIjt2YXIgbj1rLnF1ZXVlKGUsdCkscj1uLmxlbmd0aCxpPW4uc2hpZnQoKSxvPWsuX3F1ZXVlSG9va3MoZSx0KTtcImlucHJvZ3Jlc3NcIj09PWkmJihpPW4uc2hpZnQoKSxyLS0pLGkmJihcImZ4XCI9PT10JiZuLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLGRlbGV0ZSBvLnN0b3AsaS5jYWxsKGUsZnVuY3Rpb24oKXtrLmRlcXVldWUoZSx0KX0sbykpLCFyJiZvJiZvLmVtcHR5LmZpcmUoKX0sX3F1ZXVlSG9va3M6ZnVuY3Rpb24oZSx0KXt2YXIgbj10K1wicXVldWVIb29rc1wiO3JldHVybiBRLmdldChlLG4pfHxRLmFjY2VzcyhlLG4se2VtcHR5OmsuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCl7US5yZW1vdmUoZSxbdCtcInF1ZXVlXCIsbl0pfSl9KX19KSxrLmZuLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24odCxuKXt2YXIgZT0yO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiB0JiYobj10LHQ9XCJmeFwiLGUtLSksYXJndW1lbnRzLmxlbmd0aDxlP2sucXVldWUodGhpc1swXSx0KTp2b2lkIDA9PT1uP3RoaXM6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9ay5xdWV1ZSh0aGlzLHQsbik7ay5fcXVldWVIb29rcyh0aGlzLHQpLFwiZnhcIj09PXQmJlwiaW5wcm9ncmVzc1wiIT09ZVswXSYmay5kZXF1ZXVlKHRoaXMsdCl9KX0sZGVxdWV1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ay5kZXF1ZXVlKHRoaXMsZSl9KX0sY2xlYXJRdWV1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5xdWV1ZShlfHxcImZ4XCIsW10pfSxwcm9taXNlOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0xLGk9ay5EZWZlcnJlZCgpLG89dGhpcyxhPXRoaXMubGVuZ3RoLHM9ZnVuY3Rpb24oKXstLXJ8fGkucmVzb2x2ZVdpdGgobyxbb10pfTtcInN0cmluZ1wiIT10eXBlb2YgZSYmKHQ9ZSxlPXZvaWQgMCksZT1lfHxcImZ4XCI7d2hpbGUoYS0tKShuPVEuZ2V0KG9bYV0sZStcInF1ZXVlSG9va3NcIikpJiZuLmVtcHR5JiYocisrLG4uZW1wdHkuYWRkKHMpKTtyZXR1cm4gcygpLGkucHJvbWlzZSh0KX19KTt2YXIgdGU9L1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8uc291cmNlLG5lPW5ldyBSZWdFeHAoXCJeKD86KFsrLV0pPXwpKFwiK3RlK1wiKShbYS16JV0qKSRcIixcImlcIikscmU9W1wiVG9wXCIsXCJSaWdodFwiLFwiQm90dG9tXCIsXCJMZWZ0XCJdLGllPUUuZG9jdW1lbnRFbGVtZW50LG9lPWZ1bmN0aW9uKGUpe3JldHVybiBrLmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCxlKX0sYWU9e2NvbXBvc2VkOiEwfTtpZS5nZXRSb290Tm9kZSYmKG9lPWZ1bmN0aW9uKGUpe3JldHVybiBrLmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCxlKXx8ZS5nZXRSb290Tm9kZShhZSk9PT1lLm93bmVyRG9jdW1lbnR9KTt2YXIgc2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm5cIm5vbmVcIj09PShlPXR8fGUpLnN0eWxlLmRpc3BsYXl8fFwiXCI9PT1lLnN0eWxlLmRpc3BsYXkmJm9lKGUpJiZcIm5vbmVcIj09PWsuY3NzKGUsXCJkaXNwbGF5XCIpfSx1ZT1mdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGE9e307Zm9yKG8gaW4gdClhW29dPWUuc3R5bGVbb10sZS5zdHlsZVtvXT10W29dO2ZvcihvIGluIGk9bi5hcHBseShlLHJ8fFtdKSx0KWUuc3R5bGVbb109YVtvXTtyZXR1cm4gaX07ZnVuY3Rpb24gbGUoZSx0LG4scil7dmFyIGksbyxhPTIwLHM9cj9mdW5jdGlvbigpe3JldHVybiByLmN1cigpfTpmdW5jdGlvbigpe3JldHVybiBrLmNzcyhlLHQsXCJcIil9LHU9cygpLGw9biYmblszXXx8KGsuY3NzTnVtYmVyW3RdP1wiXCI6XCJweFwiKSxjPWUubm9kZVR5cGUmJihrLmNzc051bWJlclt0XXx8XCJweFwiIT09bCYmK3UpJiZuZS5leGVjKGsuY3NzKGUsdCkpO2lmKGMmJmNbM10hPT1sKXt1Lz0yLGw9bHx8Y1szXSxjPSt1fHwxO3doaWxlKGEtLSlrLnN0eWxlKGUsdCxjK2wpLCgxLW8pKigxLShvPXMoKS91fHwuNSkpPD0wJiYoYT0wKSxjLz1vO2MqPTIsay5zdHlsZShlLHQsYytsKSxuPW58fFtdfXJldHVybiBuJiYoYz0rY3x8K3V8fDAsaT1uWzFdP2MrKG5bMV0rMSkqblsyXTorblsyXSxyJiYoci51bml0PWwsci5zdGFydD1jLHIuZW5kPWkpKSxpfXZhciBjZT17fTtmdW5jdGlvbiBmZShlLHQpe2Zvcih2YXIgbixyLGksbyxhLHMsdSxsPVtdLGM9MCxmPWUubGVuZ3RoO2M8ZjtjKyspKHI9ZVtjXSkuc3R5bGUmJihuPXIuc3R5bGUuZGlzcGxheSx0PyhcIm5vbmVcIj09PW4mJihsW2NdPVEuZ2V0KHIsXCJkaXNwbGF5XCIpfHxudWxsLGxbY118fChyLnN0eWxlLmRpc3BsYXk9XCJcIikpLFwiXCI9PT1yLnN0eWxlLmRpc3BsYXkmJnNlKHIpJiYobFtjXT0odT1hPW89dm9pZCAwLGE9KGk9cikub3duZXJEb2N1bWVudCxzPWkubm9kZU5hbWUsKHU9Y2Vbc10pfHwobz1hLmJvZHkuYXBwZW5kQ2hpbGQoYS5jcmVhdGVFbGVtZW50KHMpKSx1PWsuY3NzKG8sXCJkaXNwbGF5XCIpLG8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKSxcIm5vbmVcIj09PXUmJih1PVwiYmxvY2tcIiksY2Vbc109dSkpKSk6XCJub25lXCIhPT1uJiYobFtjXT1cIm5vbmVcIixRLnNldChyLFwiZGlzcGxheVwiLG4pKSk7Zm9yKGM9MDtjPGY7YysrKW51bGwhPWxbY10mJihlW2NdLnN0eWxlLmRpc3BsYXk9bFtjXSk7cmV0dXJuIGV9ay5mbi5leHRlbmQoe3Nob3c6ZnVuY3Rpb24oKXtyZXR1cm4gZmUodGhpcywhMCl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gZmUodGhpcyl9LHRvZ2dsZTpmdW5jdGlvbihlKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGU/ZT90aGlzLnNob3coKTp0aGlzLmhpZGUoKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtzZSh0aGlzKT9rKHRoaXMpLnNob3coKTprKHRoaXMpLmhpZGUoKX0pfX0pO3ZhciBwZT0vXig/OmNoZWNrYm94fHJhZGlvKSQvaSxkZT0vPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2ksaGU9L14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSxnZT17b3B0aW9uOlsxLFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLFwiPC9zZWxlY3Q+XCJdLHRoZWFkOlsxLFwiPHRhYmxlPlwiLFwiPC90YWJsZT5cIl0sY29sOlsyLFwiPHRhYmxlPjxjb2xncm91cD5cIixcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sdHI6WzIsXCI8dGFibGU+PHRib2R5PlwiLFwiPC90Ym9keT48L3RhYmxlPlwiXSx0ZDpbMyxcIjx0YWJsZT48dGJvZHk+PHRyPlwiLFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCJdLF9kZWZhdWx0OlswLFwiXCIsXCJcIl19O2Z1bmN0aW9uIHZlKGUsdCl7dmFyIG47cmV0dXJuIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0fHxcIipcIik6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUucXVlcnlTZWxlY3RvckFsbD9lLnF1ZXJ5U2VsZWN0b3JBbGwodHx8XCIqXCIpOltdLHZvaWQgMD09PXR8fHQmJkEoZSx0KT9rLm1lcmdlKFtlXSxuKTpufWZ1bmN0aW9uIHllKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKVEuc2V0KGVbbl0sXCJnbG9iYWxFdmFsXCIsIXR8fFEuZ2V0KHRbbl0sXCJnbG9iYWxFdmFsXCIpKX1nZS5vcHRncm91cD1nZS5vcHRpb24sZ2UudGJvZHk9Z2UudGZvb3Q9Z2UuY29sZ3JvdXA9Z2UuY2FwdGlvbj1nZS50aGVhZCxnZS50aD1nZS50ZDt2YXIgbWUseGUsYmU9Lzx8JiM/XFx3KzsvO2Z1bmN0aW9uIHdlKGUsdCxuLHIsaSl7Zm9yKHZhciBvLGEscyx1LGwsYyxmPXQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHA9W10sZD0wLGg9ZS5sZW5ndGg7ZDxoO2QrKylpZigobz1lW2RdKXx8MD09PW8paWYoXCJvYmplY3RcIj09PXcobykpay5tZXJnZShwLG8ubm9kZVR5cGU/W29dOm8pO2Vsc2UgaWYoYmUudGVzdChvKSl7YT1hfHxmLmFwcGVuZENoaWxkKHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkscz0oZGUuZXhlYyhvKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksdT1nZVtzXXx8Z2UuX2RlZmF1bHQsYS5pbm5lckhUTUw9dVsxXStrLmh0bWxQcmVmaWx0ZXIobykrdVsyXSxjPXVbMF07d2hpbGUoYy0tKWE9YS5sYXN0Q2hpbGQ7ay5tZXJnZShwLGEuY2hpbGROb2RlcyksKGE9Zi5maXJzdENoaWxkKS50ZXh0Q29udGVudD1cIlwifWVsc2UgcC5wdXNoKHQuY3JlYXRlVGV4dE5vZGUobykpO2YudGV4dENvbnRlbnQ9XCJcIixkPTA7d2hpbGUobz1wW2QrK10paWYociYmLTE8ay5pbkFycmF5KG8scikpaSYmaS5wdXNoKG8pO2Vsc2UgaWYobD1vZShvKSxhPXZlKGYuYXBwZW5kQ2hpbGQobyksXCJzY3JpcHRcIiksbCYmeWUoYSksbil7Yz0wO3doaWxlKG89YVtjKytdKWhlLnRlc3Qoby50eXBlfHxcIlwiKSYmbi5wdXNoKG8pfXJldHVybiBmfW1lPUUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLmFwcGVuZENoaWxkKEUuY3JlYXRlRWxlbWVudChcImRpdlwiKSksKHhlPUUuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJyYWRpb1wiKSx4ZS5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsXCJjaGVja2VkXCIpLHhlLnNldEF0dHJpYnV0ZShcIm5hbWVcIixcInRcIiksbWUuYXBwZW5kQ2hpbGQoeGUpLHkuY2hlY2tDbG9uZT1tZS5jbG9uZU5vZGUoITApLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmNoZWNrZWQsbWUuaW5uZXJIVE1MPVwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiLHkubm9DbG9uZUNoZWNrZWQ9ISFtZS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7dmFyIFRlPS9ea2V5LyxDZT0vXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sRWU9L14oW14uXSopKD86XFwuKC4rKXwpLztmdW5jdGlvbiBrZSgpe3JldHVybiEwfWZ1bmN0aW9uIFNlKCl7cmV0dXJuITF9ZnVuY3Rpb24gTmUoZSx0KXtyZXR1cm4gZT09PWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBFLmFjdGl2ZUVsZW1lbnR9Y2F0Y2goZSl7fX0oKT09KFwiZm9jdXNcIj09PXQpfWZ1bmN0aW9uIEFlKGUsdCxuLHIsaSxvKXt2YXIgYSxzO2lmKFwib2JqZWN0XCI9PXR5cGVvZiB0KXtmb3IocyBpblwic3RyaW5nXCIhPXR5cGVvZiBuJiYocj1yfHxuLG49dm9pZCAwKSx0KUFlKGUscyxuLHIsdFtzXSxvKTtyZXR1cm4gZX1pZihudWxsPT1yJiZudWxsPT1pPyhpPW4scj1uPXZvaWQgMCk6bnVsbD09aSYmKFwic3RyaW5nXCI9PXR5cGVvZiBuPyhpPXIscj12b2lkIDApOihpPXIscj1uLG49dm9pZCAwKSksITE9PT1pKWk9U2U7ZWxzZSBpZighaSlyZXR1cm4gZTtyZXR1cm4gMT09PW8mJihhPWksKGk9ZnVuY3Rpb24oZSl7cmV0dXJuIGsoKS5vZmYoZSksYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KS5ndWlkPWEuZ3VpZHx8KGEuZ3VpZD1rLmd1aWQrKykpLGUuZWFjaChmdW5jdGlvbigpe2suZXZlbnQuYWRkKHRoaXMsdCxpLHIsbil9KX1mdW5jdGlvbiBEZShlLGksbyl7bz8oUS5zZXQoZSxpLCExKSxrLmV2ZW50LmFkZChlLGkse25hbWVzcGFjZTohMSxoYW5kbGVyOmZ1bmN0aW9uKGUpe3ZhciB0LG4scj1RLmdldCh0aGlzLGkpO2lmKDEmZS5pc1RyaWdnZXImJnRoaXNbaV0pe2lmKHIubGVuZ3RoKShrLmV2ZW50LnNwZWNpYWxbaV18fHt9KS5kZWxlZ2F0ZVR5cGUmJmUuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihyPXMuY2FsbChhcmd1bWVudHMpLFEuc2V0KHRoaXMsaSxyKSx0PW8odGhpcyxpKSx0aGlzW2ldKCksciE9PShuPVEuZ2V0KHRoaXMsaSkpfHx0P1Euc2V0KHRoaXMsaSwhMSk6bj17fSxyIT09bilyZXR1cm4gZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCksbi52YWx1ZX1lbHNlIHIubGVuZ3RoJiYoUS5zZXQodGhpcyxpLHt2YWx1ZTprLmV2ZW50LnRyaWdnZXIoay5leHRlbmQoclswXSxrLkV2ZW50LnByb3RvdHlwZSksci5zbGljZSgxKSx0aGlzKX0pLGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkpfX0pKTp2b2lkIDA9PT1RLmdldChlLGkpJiZrLmV2ZW50LmFkZChlLGksa2UpfWsuZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24odCxlLG4scixpKXt2YXIgbyxhLHMsdSxsLGMsZixwLGQsaCxnLHY9US5nZXQodCk7aWYodil7bi5oYW5kbGVyJiYobj0obz1uKS5oYW5kbGVyLGk9by5zZWxlY3RvciksaSYmay5maW5kLm1hdGNoZXNTZWxlY3RvcihpZSxpKSxuLmd1aWR8fChuLmd1aWQ9ay5ndWlkKyspLCh1PXYuZXZlbnRzKXx8KHU9di5ldmVudHM9e30pLChhPXYuaGFuZGxlKXx8KGE9di5oYW5kbGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGsmJmsuZXZlbnQudHJpZ2dlcmVkIT09ZS50eXBlP2suZXZlbnQuZGlzcGF0Y2guYXBwbHkodCxhcmd1bWVudHMpOnZvaWQgMH0pLGw9KGU9KGV8fFwiXCIpLm1hdGNoKFIpfHxbXCJcIl0pLmxlbmd0aDt3aGlsZShsLS0pZD1nPShzPUVlLmV4ZWMoZVtsXSl8fFtdKVsxXSxoPShzWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLGQmJihmPWsuZXZlbnQuc3BlY2lhbFtkXXx8e30sZD0oaT9mLmRlbGVnYXRlVHlwZTpmLmJpbmRUeXBlKXx8ZCxmPWsuZXZlbnQuc3BlY2lhbFtkXXx8e30sYz1rLmV4dGVuZCh7dHlwZTpkLG9yaWdUeXBlOmcsZGF0YTpyLGhhbmRsZXI6bixndWlkOm4uZ3VpZCxzZWxlY3RvcjppLG5lZWRzQ29udGV4dDppJiZrLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoaSksbmFtZXNwYWNlOmguam9pbihcIi5cIil9LG8pLChwPXVbZF0pfHwoKHA9dVtkXT1bXSkuZGVsZWdhdGVDb3VudD0wLGYuc2V0dXAmJiExIT09Zi5zZXR1cC5jYWxsKHQscixoLGEpfHx0LmFkZEV2ZW50TGlzdGVuZXImJnQuYWRkRXZlbnRMaXN0ZW5lcihkLGEpKSxmLmFkZCYmKGYuYWRkLmNhbGwodCxjKSxjLmhhbmRsZXIuZ3VpZHx8KGMuaGFuZGxlci5ndWlkPW4uZ3VpZCkpLGk/cC5zcGxpY2UocC5kZWxlZ2F0ZUNvdW50KyssMCxjKTpwLnB1c2goYyksay5ldmVudC5nbG9iYWxbZF09ITApfX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG8sYSxzLHUsbCxjLGYscCxkLGgsZyx2PVEuaGFzRGF0YShlKSYmUS5nZXQoZSk7aWYodiYmKHU9di5ldmVudHMpKXtsPSh0PSh0fHxcIlwiKS5tYXRjaChSKXx8W1wiXCJdKS5sZW5ndGg7d2hpbGUobC0tKWlmKGQ9Zz0ocz1FZS5leGVjKHRbbF0pfHxbXSlbMV0saD0oc1syXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxkKXtmPWsuZXZlbnQuc3BlY2lhbFtkXXx8e30scD11W2Q9KHI/Zi5kZWxlZ2F0ZVR5cGU6Zi5iaW5kVHlwZSl8fGRdfHxbXSxzPXNbMl0mJm5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIitoLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKStcIihcXFxcLnwkKVwiKSxhPW89cC5sZW5ndGg7d2hpbGUoby0tKWM9cFtvXSwhaSYmZyE9PWMub3JpZ1R5cGV8fG4mJm4uZ3VpZCE9PWMuZ3VpZHx8cyYmIXMudGVzdChjLm5hbWVzcGFjZSl8fHImJnIhPT1jLnNlbGVjdG9yJiYoXCIqKlwiIT09cnx8IWMuc2VsZWN0b3IpfHwocC5zcGxpY2UobywxKSxjLnNlbGVjdG9yJiZwLmRlbGVnYXRlQ291bnQtLSxmLnJlbW92ZSYmZi5yZW1vdmUuY2FsbChlLGMpKTthJiYhcC5sZW5ndGgmJihmLnRlYXJkb3duJiYhMSE9PWYudGVhcmRvd24uY2FsbChlLGgsdi5oYW5kbGUpfHxrLnJlbW92ZUV2ZW50KGUsZCx2LmhhbmRsZSksZGVsZXRlIHVbZF0pfWVsc2UgZm9yKGQgaW4gdSlrLmV2ZW50LnJlbW92ZShlLGQrdFtsXSxuLHIsITApO2suaXNFbXB0eU9iamVjdCh1KSYmUS5yZW1vdmUoZSxcImhhbmRsZSBldmVudHNcIil9fSxkaXNwYXRjaDpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaSxvLGEscz1rLmV2ZW50LmZpeChlKSx1PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxsPShRLmdldCh0aGlzLFwiZXZlbnRzXCIpfHx7fSlbcy50eXBlXXx8W10sYz1rLmV2ZW50LnNwZWNpYWxbcy50eXBlXXx8e307Zm9yKHVbMF09cyx0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl1W3RdPWFyZ3VtZW50c1t0XTtpZihzLmRlbGVnYXRlVGFyZ2V0PXRoaXMsIWMucHJlRGlzcGF0Y2h8fCExIT09Yy5wcmVEaXNwYXRjaC5jYWxsKHRoaXMscykpe2E9ay5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMscyxsKSx0PTA7d2hpbGUoKGk9YVt0KytdKSYmIXMuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSl7cy5jdXJyZW50VGFyZ2V0PWkuZWxlbSxuPTA7d2hpbGUoKG89aS5oYW5kbGVyc1tuKytdKSYmIXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSlzLnJuYW1lc3BhY2UmJiExIT09by5uYW1lc3BhY2UmJiFzLnJuYW1lc3BhY2UudGVzdChvLm5hbWVzcGFjZSl8fChzLmhhbmRsZU9iaj1vLHMuZGF0YT1vLmRhdGEsdm9pZCAwIT09KHI9KChrLmV2ZW50LnNwZWNpYWxbby5vcmlnVHlwZV18fHt9KS5oYW5kbGV8fG8uaGFuZGxlcikuYXBwbHkoaS5lbGVtLHUpKSYmITE9PT0ocy5yZXN1bHQ9cikmJihzLnByZXZlbnREZWZhdWx0KCkscy5zdG9wUHJvcGFnYXRpb24oKSkpfXJldHVybiBjLnBvc3REaXNwYXRjaCYmYy5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLHMpLHMucmVzdWx0fX0saGFuZGxlcnM6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbyxhLHM9W10sdT10LmRlbGVnYXRlQ291bnQsbD1lLnRhcmdldDtpZih1JiZsLm5vZGVUeXBlJiYhKFwiY2xpY2tcIj09PWUudHlwZSYmMTw9ZS5idXR0b24pKWZvcig7bCE9PXRoaXM7bD1sLnBhcmVudE5vZGV8fHRoaXMpaWYoMT09PWwubm9kZVR5cGUmJihcImNsaWNrXCIhPT1lLnR5cGV8fCEwIT09bC5kaXNhYmxlZCkpe2ZvcihvPVtdLGE9e30sbj0wO248dTtuKyspdm9pZCAwPT09YVtpPShyPXRbbl0pLnNlbGVjdG9yK1wiIFwiXSYmKGFbaV09ci5uZWVkc0NvbnRleHQ/LTE8ayhpLHRoaXMpLmluZGV4KGwpOmsuZmluZChpLHRoaXMsbnVsbCxbbF0pLmxlbmd0aCksYVtpXSYmby5wdXNoKHIpO28ubGVuZ3RoJiZzLnB1c2goe2VsZW06bCxoYW5kbGVyczpvfSl9cmV0dXJuIGw9dGhpcyx1PHQubGVuZ3RoJiZzLnB1c2goe2VsZW06bCxoYW5kbGVyczp0LnNsaWNlKHUpfSksc30sYWRkUHJvcDpmdW5jdGlvbih0LGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShrLkV2ZW50LnByb3RvdHlwZSx0LHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6bShlKT9mdW5jdGlvbigpe2lmKHRoaXMub3JpZ2luYWxFdmVudClyZXR1cm4gZSh0aGlzLm9yaWdpbmFsRXZlbnQpfTpmdW5jdGlvbigpe2lmKHRoaXMub3JpZ2luYWxFdmVudClyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50W3RdfSxzZXQ6ZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsdCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6ZX0pfX0pfSxmaXg6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbay5leHBhbmRvXT9lOm5ldyBrLkV2ZW50KGUpfSxzcGVjaWFsOntsb2FkOntub0J1YmJsZTohMH0sY2xpY2s6e3NldHVwOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXN8fGU7cmV0dXJuIHBlLnRlc3QodC50eXBlKSYmdC5jbGljayYmQSh0LFwiaW5wdXRcIikmJkRlKHQsXCJjbGlja1wiLGtlKSwhMX0sdHJpZ2dlcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzfHxlO3JldHVybiBwZS50ZXN0KHQudHlwZSkmJnQuY2xpY2smJkEodCxcImlucHV0XCIpJiZEZSh0LFwiY2xpY2tcIiksITB9LF9kZWZhdWx0OmZ1bmN0aW9uKGUpe3ZhciB0PWUudGFyZ2V0O3JldHVybiBwZS50ZXN0KHQudHlwZSkmJnQuY2xpY2smJkEodCxcImlucHV0XCIpJiZRLmdldCh0LFwiY2xpY2tcIil8fEEodCxcImFcIil9fSxiZWZvcmV1bmxvYWQ6e3Bvc3REaXNwYXRjaDpmdW5jdGlvbihlKXt2b2lkIDAhPT1lLnJlc3VsdCYmZS5vcmlnaW5hbEV2ZW50JiYoZS5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlPWUucmVzdWx0KX19fX0say5yZW1vdmVFdmVudD1mdW5jdGlvbihlLHQsbil7ZS5yZW1vdmVFdmVudExpc3RlbmVyJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxuKX0say5FdmVudD1mdW5jdGlvbihlLHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGsuRXZlbnQpKXJldHVybiBuZXcgay5FdmVudChlLHQpO2UmJmUudHlwZT8odGhpcy5vcmlnaW5hbEV2ZW50PWUsdGhpcy50eXBlPWUudHlwZSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1lLmRlZmF1bHRQcmV2ZW50ZWR8fHZvaWQgMD09PWUuZGVmYXVsdFByZXZlbnRlZCYmITE9PT1lLnJldHVyblZhbHVlP2tlOlNlLHRoaXMudGFyZ2V0PWUudGFyZ2V0JiYzPT09ZS50YXJnZXQubm9kZVR5cGU/ZS50YXJnZXQucGFyZW50Tm9kZTplLnRhcmdldCx0aGlzLmN1cnJlbnRUYXJnZXQ9ZS5jdXJyZW50VGFyZ2V0LHRoaXMucmVsYXRlZFRhcmdldD1lLnJlbGF0ZWRUYXJnZXQpOnRoaXMudHlwZT1lLHQmJmsuZXh0ZW5kKHRoaXMsdCksdGhpcy50aW1lU3RhbXA9ZSYmZS50aW1lU3RhbXB8fERhdGUubm93KCksdGhpc1trLmV4cGFuZG9dPSEwfSxrLkV2ZW50LnByb3RvdHlwZT17Y29uc3RydWN0b3I6ay5FdmVudCxpc0RlZmF1bHRQcmV2ZW50ZWQ6U2UsaXNQcm9wYWdhdGlvblN0b3BwZWQ6U2UsaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6U2UsaXNTaW11bGF0ZWQ6ITEscHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9a2UsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUucHJldmVudERlZmF1bHQoKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9a2UsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUuc3RvcFByb3BhZ2F0aW9uKCl9LHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPWtlLGUmJiF0aGlzLmlzU2ltdWxhdGVkJiZlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHRoaXMuc3RvcFByb3BhZ2F0aW9uKCl9fSxrLmVhY2goe2FsdEtleTohMCxidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsY2hhbmdlZFRvdWNoZXM6ITAsY3RybEtleTohMCxkZXRhaWw6ITAsZXZlbnRQaGFzZTohMCxtZXRhS2V5OiEwLHBhZ2VYOiEwLHBhZ2VZOiEwLHNoaWZ0S2V5OiEwLHZpZXc6ITAsXCJjaGFyXCI6ITAsY29kZTohMCxjaGFyQ29kZTohMCxrZXk6ITAsa2V5Q29kZTohMCxidXR0b246ITAsYnV0dG9uczohMCxjbGllbnRYOiEwLGNsaWVudFk6ITAsb2Zmc2V0WDohMCxvZmZzZXRZOiEwLHBvaW50ZXJJZDohMCxwb2ludGVyVHlwZTohMCxzY3JlZW5YOiEwLHNjcmVlblk6ITAsdGFyZ2V0VG91Y2hlczohMCx0b0VsZW1lbnQ6ITAsdG91Y2hlczohMCx3aGljaDpmdW5jdGlvbihlKXt2YXIgdD1lLmJ1dHRvbjtyZXR1cm4gbnVsbD09ZS53aGljaCYmVGUudGVzdChlLnR5cGUpP251bGwhPWUuY2hhckNvZGU/ZS5jaGFyQ29kZTplLmtleUNvZGU6IWUud2hpY2gmJnZvaWQgMCE9PXQmJkNlLnRlc3QoZS50eXBlKT8xJnQ/MToyJnQ/Mzo0JnQ/MjowOmUud2hpY2h9fSxrLmV2ZW50LmFkZFByb3ApLGsuZWFjaCh7Zm9jdXM6XCJmb2N1c2luXCIsYmx1cjpcImZvY3Vzb3V0XCJ9LGZ1bmN0aW9uKGUsdCl7ay5ldmVudC5zcGVjaWFsW2VdPXtzZXR1cDpmdW5jdGlvbigpe3JldHVybiBEZSh0aGlzLGUsTmUpLCExfSx0cmlnZ2VyOmZ1bmN0aW9uKCl7cmV0dXJuIERlKHRoaXMsZSksITB9LGRlbGVnYXRlVHlwZTp0fX0pLGsuZWFjaCh7bW91c2VlbnRlcjpcIm1vdXNlb3ZlclwiLG1vdXNlbGVhdmU6XCJtb3VzZW91dFwiLHBvaW50ZXJlbnRlcjpcInBvaW50ZXJvdmVyXCIscG9pbnRlcmxlYXZlOlwicG9pbnRlcm91dFwifSxmdW5jdGlvbihlLGkpe2suZXZlbnQuc3BlY2lhbFtlXT17ZGVsZWdhdGVUeXBlOmksYmluZFR5cGU6aSxoYW5kbGU6ZnVuY3Rpb24oZSl7dmFyIHQsbj1lLnJlbGF0ZWRUYXJnZXQscj1lLmhhbmRsZU9iajtyZXR1cm4gbiYmKG49PT10aGlzfHxrLmNvbnRhaW5zKHRoaXMsbikpfHwoZS50eXBlPXIub3JpZ1R5cGUsdD1yLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpLGUudHlwZT1pKSx0fX19KSxrLmZuLmV4dGVuZCh7b246ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIEFlKHRoaXMsZSx0LG4scil9LG9uZTpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gQWUodGhpcyxlLHQsbixyLDEpfSxvZmY6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk7aWYoZSYmZS5wcmV2ZW50RGVmYXVsdCYmZS5oYW5kbGVPYmopcmV0dXJuIHI9ZS5oYW5kbGVPYmosayhlLmRlbGVnYXRlVGFyZ2V0KS5vZmYoci5uYW1lc3BhY2U/ci5vcmlnVHlwZStcIi5cIityLm5hbWVzcGFjZTpyLm9yaWdUeXBlLHIuc2VsZWN0b3Isci5oYW5kbGVyKSx0aGlzO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBlKXtmb3IoaSBpbiBlKXRoaXMub2ZmKGksdCxlW2ldKTtyZXR1cm4gdGhpc31yZXR1cm4hMSE9PXQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHR8fChuPXQsdD12b2lkIDApLCExPT09biYmKG49U2UpLHRoaXMuZWFjaChmdW5jdGlvbigpe2suZXZlbnQucmVtb3ZlKHRoaXMsZSxuLHQpfSl9fSk7dmFyIGplPS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLHFlPS88c2NyaXB0fDxzdHlsZXw8bGluay9pLExlPS9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksSGU9L15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO2Z1bmN0aW9uIE9lKGUsdCl7cmV0dXJuIEEoZSxcInRhYmxlXCIpJiZBKDExIT09dC5ub2RlVHlwZT90OnQuZmlyc3RDaGlsZCxcInRyXCIpJiZrKGUpLmNoaWxkcmVuKFwidGJvZHlcIilbMF18fGV9ZnVuY3Rpb24gUGUoZSl7cmV0dXJuIGUudHlwZT0obnVsbCE9PWUuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkrXCIvXCIrZS50eXBlLGV9ZnVuY3Rpb24gUmUoZSl7cmV0dXJuXCJ0cnVlL1wiPT09KGUudHlwZXx8XCJcIikuc2xpY2UoMCw1KT9lLnR5cGU9ZS50eXBlLnNsaWNlKDUpOmUucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKSxlfWZ1bmN0aW9uIE1lKGUsdCl7dmFyIG4scixpLG8sYSxzLHUsbDtpZigxPT09dC5ub2RlVHlwZSl7aWYoUS5oYXNEYXRhKGUpJiYobz1RLmFjY2VzcyhlKSxhPVEuc2V0KHQsbyksbD1vLmV2ZW50cykpZm9yKGkgaW4gZGVsZXRlIGEuaGFuZGxlLGEuZXZlbnRzPXt9LGwpZm9yKG49MCxyPWxbaV0ubGVuZ3RoO248cjtuKyspay5ldmVudC5hZGQodCxpLGxbaV1bbl0pO0ouaGFzRGF0YShlKSYmKHM9Si5hY2Nlc3MoZSksdT1rLmV4dGVuZCh7fSxzKSxKLnNldCh0LHUpKX19ZnVuY3Rpb24gSWUobixyLGksbyl7cj1nLmFwcGx5KFtdLHIpO3ZhciBlLHQsYSxzLHUsbCxjPTAsZj1uLmxlbmd0aCxwPWYtMSxkPXJbMF0saD1tKGQpO2lmKGh8fDE8ZiYmXCJzdHJpbmdcIj09dHlwZW9mIGQmJiF5LmNoZWNrQ2xvbmUmJkxlLnRlc3QoZCkpcmV0dXJuIG4uZWFjaChmdW5jdGlvbihlKXt2YXIgdD1uLmVxKGUpO2gmJihyWzBdPWQuY2FsbCh0aGlzLGUsdC5odG1sKCkpKSxJZSh0LHIsaSxvKX0pO2lmKGYmJih0PShlPXdlKHIsblswXS5vd25lckRvY3VtZW50LCExLG4sbykpLmZpcnN0Q2hpbGQsMT09PWUuY2hpbGROb2Rlcy5sZW5ndGgmJihlPXQpLHR8fG8pKXtmb3Iocz0oYT1rLm1hcCh2ZShlLFwic2NyaXB0XCIpLFBlKSkubGVuZ3RoO2M8ZjtjKyspdT1lLGMhPT1wJiYodT1rLmNsb25lKHUsITAsITApLHMmJmsubWVyZ2UoYSx2ZSh1LFwic2NyaXB0XCIpKSksaS5jYWxsKG5bY10sdSxjKTtpZihzKWZvcihsPWFbYS5sZW5ndGgtMV0ub3duZXJEb2N1bWVudCxrLm1hcChhLFJlKSxjPTA7YzxzO2MrKyl1PWFbY10saGUudGVzdCh1LnR5cGV8fFwiXCIpJiYhUS5hY2Nlc3ModSxcImdsb2JhbEV2YWxcIikmJmsuY29udGFpbnMobCx1KSYmKHUuc3JjJiZcIm1vZHVsZVwiIT09KHUudHlwZXx8XCJcIikudG9Mb3dlckNhc2UoKT9rLl9ldmFsVXJsJiYhdS5ub01vZHVsZSYmay5fZXZhbFVybCh1LnNyYyx7bm9uY2U6dS5ub25jZXx8dS5nZXRBdHRyaWJ1dGUoXCJub25jZVwiKX0pOmIodS50ZXh0Q29udGVudC5yZXBsYWNlKEhlLFwiXCIpLHUsbCkpfXJldHVybiBufWZ1bmN0aW9uIFdlKGUsdCxuKXtmb3IodmFyIHIsaT10P2suZmlsdGVyKHQsZSk6ZSxvPTA7bnVsbCE9KHI9aVtvXSk7bysrKW58fDEhPT1yLm5vZGVUeXBlfHxrLmNsZWFuRGF0YSh2ZShyKSksci5wYXJlbnROb2RlJiYobiYmb2UocikmJnllKHZlKHIsXCJzY3JpcHRcIikpLHIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSk7cmV0dXJuIGV9ay5leHRlbmQoe2h0bWxQcmVmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZShqZSxcIjwkMT48LyQyPlwiKX0sY2xvbmU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsLGM9ZS5jbG9uZU5vZGUoITApLGY9b2UoZSk7aWYoISh5Lm5vQ2xvbmVDaGVja2VkfHwxIT09ZS5ub2RlVHlwZSYmMTEhPT1lLm5vZGVUeXBlfHxrLmlzWE1MRG9jKGUpKSlmb3IoYT12ZShjKSxyPTAsaT0obz12ZShlKSkubGVuZ3RoO3I8aTtyKyspcz1vW3JdLHU9YVtyXSx2b2lkIDAsXCJpbnB1dFwiPT09KGw9dS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSYmcGUudGVzdChzLnR5cGUpP3UuY2hlY2tlZD1zLmNoZWNrZWQ6XCJpbnB1dFwiIT09bCYmXCJ0ZXh0YXJlYVwiIT09bHx8KHUuZGVmYXVsdFZhbHVlPXMuZGVmYXVsdFZhbHVlKTtpZih0KWlmKG4pZm9yKG89b3x8dmUoZSksYT1hfHx2ZShjKSxyPTAsaT1vLmxlbmd0aDtyPGk7cisrKU1lKG9bcl0sYVtyXSk7ZWxzZSBNZShlLGMpO3JldHVybiAwPChhPXZlKGMsXCJzY3JpcHRcIikpLmxlbmd0aCYmeWUoYSwhZiYmdmUoZSxcInNjcmlwdFwiKSksY30sY2xlYW5EYXRhOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuLHIsaT1rLmV2ZW50LnNwZWNpYWwsbz0wO3ZvaWQgMCE9PShuPWVbb10pO28rKylpZihHKG4pKXtpZih0PW5bUS5leHBhbmRvXSl7aWYodC5ldmVudHMpZm9yKHIgaW4gdC5ldmVudHMpaVtyXT9rLmV2ZW50LnJlbW92ZShuLHIpOmsucmVtb3ZlRXZlbnQobixyLHQuaGFuZGxlKTtuW1EuZXhwYW5kb109dm9pZCAwfW5bSi5leHBhbmRvXSYmKG5bSi5leHBhbmRvXT12b2lkIDApfX19KSxrLmZuLmV4dGVuZCh7ZGV0YWNoOmZ1bmN0aW9uKGUpe3JldHVybiBXZSh0aGlzLGUsITApfSxyZW1vdmU6ZnVuY3Rpb24oZSl7cmV0dXJuIFdlKHRoaXMsZSl9LHRleHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIF8odGhpcyxmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZT9rLnRleHQodGhpcyk6dGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKXsxIT09dGhpcy5ub2RlVHlwZSYmMTEhPT10aGlzLm5vZGVUeXBlJiY5IT09dGhpcy5ub2RlVHlwZXx8KHRoaXMudGV4dENvbnRlbnQ9ZSl9KX0sbnVsbCxlLGFyZ3VtZW50cy5sZW5ndGgpfSxhcHBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gSWUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7MSE9PXRoaXMubm9kZVR5cGUmJjExIT09dGhpcy5ub2RlVHlwZSYmOSE9PXRoaXMubm9kZVR5cGV8fE9lKHRoaXMsZSkuYXBwZW5kQ2hpbGQoZSl9KX0scHJlcGVuZDpmdW5jdGlvbigpe3JldHVybiBJZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIHQ9T2UodGhpcyxlKTt0Lmluc2VydEJlZm9yZShlLHQuZmlyc3RDaGlsZCl9fSl9LGJlZm9yZTpmdW5jdGlvbigpe3JldHVybiBJZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSx0aGlzKX0pfSxhZnRlcjpmdW5jdGlvbigpe3JldHVybiBJZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSx0aGlzLm5leHRTaWJsaW5nKX0pfSxlbXB0eTpmdW5jdGlvbigpe2Zvcih2YXIgZSx0PTA7bnVsbCE9KGU9dGhpc1t0XSk7dCsrKTE9PT1lLm5vZGVUeXBlJiYoay5jbGVhbkRhdGEodmUoZSwhMSkpLGUudGV4dENvbnRlbnQ9XCJcIik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bnVsbCE9ZSYmZSx0PW51bGw9PXQ/ZTp0LHRoaXMubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIGsuY2xvbmUodGhpcyxlLHQpfSl9LGh0bWw6ZnVuY3Rpb24oZSl7cmV0dXJuIF8odGhpcyxmdW5jdGlvbihlKXt2YXIgdD10aGlzWzBdfHx7fSxuPTAscj10aGlzLmxlbmd0aDtpZih2b2lkIDA9PT1lJiYxPT09dC5ub2RlVHlwZSlyZXR1cm4gdC5pbm5lckhUTUw7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJiFxZS50ZXN0KGUpJiYhZ2VbKGRlLmV4ZWMoZSl8fFtcIlwiLFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpXSl7ZT1rLmh0bWxQcmVmaWx0ZXIoZSk7dHJ5e2Zvcig7bjxyO24rKykxPT09KHQ9dGhpc1tuXXx8e30pLm5vZGVUeXBlJiYoay5jbGVhbkRhdGEodmUodCwhMSkpLHQuaW5uZXJIVE1MPWUpO3Q9MH1jYXRjaChlKXt9fXQmJnRoaXMuZW1wdHkoKS5hcHBlbmQoZSl9LG51bGwsZSxhcmd1bWVudHMubGVuZ3RoKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oKXt2YXIgbj1bXTtyZXR1cm4gSWUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wYXJlbnROb2RlO2suaW5BcnJheSh0aGlzLG4pPDAmJihrLmNsZWFuRGF0YSh2ZSh0aGlzKSksdCYmdC5yZXBsYWNlQ2hpbGQoZSx0aGlzKSl9LG4pfX0pLGsuZWFjaCh7YXBwZW5kVG86XCJhcHBlbmRcIixwcmVwZW5kVG86XCJwcmVwZW5kXCIsaW5zZXJ0QmVmb3JlOlwiYmVmb3JlXCIsaW5zZXJ0QWZ0ZXI6XCJhZnRlclwiLHJlcGxhY2VBbGw6XCJyZXBsYWNlV2l0aFwifSxmdW5jdGlvbihlLGEpe2suZm5bZV09ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49W10scj1rKGUpLGk9ci5sZW5ndGgtMSxvPTA7bzw9aTtvKyspdD1vPT09aT90aGlzOnRoaXMuY2xvbmUoITApLGsocltvXSlbYV0odCksdS5hcHBseShuLHQuZ2V0KCkpO3JldHVybiB0aGlzLnB1c2hTdGFjayhuKX19KTt2YXIgJGU9bmV3IFJlZ0V4cChcIl4oXCIrdGUrXCIpKD8hcHgpW2EteiVdKyRcIixcImlcIiksRmU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O3JldHVybiB0JiZ0Lm9wZW5lcnx8KHQ9QyksdC5nZXRDb21wdXRlZFN0eWxlKGUpfSxCZT1uZXcgUmVnRXhwKHJlLmpvaW4oXCJ8XCIpLFwiaVwiKTtmdW5jdGlvbiBfZShlLHQsbil7dmFyIHIsaSxvLGEscz1lLnN0eWxlO3JldHVybihuPW58fEZlKGUpKSYmKFwiXCIhPT0oYT1uLmdldFByb3BlcnR5VmFsdWUodCl8fG5bdF0pfHxvZShlKXx8KGE9ay5zdHlsZShlLHQpKSwheS5waXhlbEJveFN0eWxlcygpJiYkZS50ZXN0KGEpJiZCZS50ZXN0KHQpJiYocj1zLndpZHRoLGk9cy5taW5XaWR0aCxvPXMubWF4V2lkdGgscy5taW5XaWR0aD1zLm1heFdpZHRoPXMud2lkdGg9YSxhPW4ud2lkdGgscy53aWR0aD1yLHMubWluV2lkdGg9aSxzLm1heFdpZHRoPW8pKSx2b2lkIDAhPT1hP2ErXCJcIjphfWZ1bmN0aW9uIHplKGUsdCl7cmV0dXJue2dldDpmdW5jdGlvbigpe2lmKCFlKCkpcmV0dXJuKHRoaXMuZ2V0PXQpLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtkZWxldGUgdGhpcy5nZXR9fX0hZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7aWYodSl7cy5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O21hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiLHUuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDttYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjYwJTt0b3A6MSVcIixpZS5hcHBlbmRDaGlsZChzKS5hcHBlbmRDaGlsZCh1KTt2YXIgZT1DLmdldENvbXB1dGVkU3R5bGUodSk7bj1cIjElXCIhPT1lLnRvcCxhPTEyPT09dChlLm1hcmdpbkxlZnQpLHUuc3R5bGUucmlnaHQ9XCI2MCVcIixvPTM2PT09dChlLnJpZ2h0KSxyPTM2PT09dChlLndpZHRoKSx1LnN0eWxlLnBvc2l0aW9uPVwiYWJzb2x1dGVcIixpPTEyPT09dCh1Lm9mZnNldFdpZHRoLzMpLGllLnJlbW92ZUNoaWxkKHMpLHU9bnVsbH19ZnVuY3Rpb24gdChlKXtyZXR1cm4gTWF0aC5yb3VuZChwYXJzZUZsb2F0KGUpKX12YXIgbixyLGksbyxhLHM9RS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHU9RS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3Uuc3R5bGUmJih1LnN0eWxlLmJhY2tncm91bmRDbGlwPVwiY29udGVudC1ib3hcIix1LmNsb25lTm9kZSghMCkuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJcIix5LmNsZWFyQ2xvbmVTdHlsZT1cImNvbnRlbnQtYm94XCI9PT11LnN0eWxlLmJhY2tncm91bmRDbGlwLGsuZXh0ZW5kKHkse2JveFNpemluZ1JlbGlhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxyfSxwaXhlbEJveFN0eWxlczpmdW5jdGlvbigpe3JldHVybiBlKCksb30scGl4ZWxQb3NpdGlvbjpmdW5jdGlvbigpe3JldHVybiBlKCksbn0scmVsaWFibGVNYXJnaW5MZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxhfSxzY3JvbGxib3hTaXplOmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxpfX0pKX0oKTt2YXIgVWU9W1wiV2Via2l0XCIsXCJNb3pcIixcIm1zXCJdLFhlPUUuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxWZT17fTtmdW5jdGlvbiBHZShlKXt2YXIgdD1rLmNzc1Byb3BzW2VdfHxWZVtlXTtyZXR1cm4gdHx8KGUgaW4gWGU/ZTpWZVtlXT1mdW5jdGlvbihlKXt2YXIgdD1lWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxuPVVlLmxlbmd0aDt3aGlsZShuLS0paWYoKGU9VWVbbl0rdClpbiBYZSlyZXR1cm4gZX0oZSl8fGUpfXZhciBZZT0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sUWU9L14tLS8sSmU9e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix2aXNpYmlsaXR5OlwiaGlkZGVuXCIsZGlzcGxheTpcImJsb2NrXCJ9LEtlPXtsZXR0ZXJTcGFjaW5nOlwiMFwiLGZvbnRXZWlnaHQ6XCI0MDBcIn07ZnVuY3Rpb24gWmUoZSx0LG4pe3ZhciByPW5lLmV4ZWModCk7cmV0dXJuIHI/TWF0aC5tYXgoMCxyWzJdLShufHwwKSkrKHJbM118fFwicHhcIik6dH1mdW5jdGlvbiBldChlLHQsbixyLGksbyl7dmFyIGE9XCJ3aWR0aFwiPT09dD8xOjAscz0wLHU9MDtpZihuPT09KHI/XCJib3JkZXJcIjpcImNvbnRlbnRcIikpcmV0dXJuIDA7Zm9yKDthPDQ7YSs9MilcIm1hcmdpblwiPT09biYmKHUrPWsuY3NzKGUsbityZVthXSwhMCxpKSkscj8oXCJjb250ZW50XCI9PT1uJiYodS09ay5jc3MoZSxcInBhZGRpbmdcIityZVthXSwhMCxpKSksXCJtYXJnaW5cIiE9PW4mJih1LT1rLmNzcyhlLFwiYm9yZGVyXCIrcmVbYV0rXCJXaWR0aFwiLCEwLGkpKSk6KHUrPWsuY3NzKGUsXCJwYWRkaW5nXCIrcmVbYV0sITAsaSksXCJwYWRkaW5nXCIhPT1uP3UrPWsuY3NzKGUsXCJib3JkZXJcIityZVthXStcIldpZHRoXCIsITAsaSk6cys9ay5jc3MoZSxcImJvcmRlclwiK3JlW2FdK1wiV2lkdGhcIiwhMCxpKSk7cmV0dXJuIXImJjA8PW8mJih1Kz1NYXRoLm1heCgwLE1hdGguY2VpbChlW1wib2Zmc2V0XCIrdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSldLW8tdS1zLS41KSl8fDApLHV9ZnVuY3Rpb24gdHQoZSx0LG4pe3ZhciByPUZlKGUpLGk9KCF5LmJveFNpemluZ1JlbGlhYmxlKCl8fG4pJiZcImJvcmRlci1ib3hcIj09PWsuY3NzKGUsXCJib3hTaXppbmdcIiwhMSxyKSxvPWksYT1fZShlLHQscikscz1cIm9mZnNldFwiK3RbMF0udG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpO2lmKCRlLnRlc3QoYSkpe2lmKCFuKXJldHVybiBhO2E9XCJhdXRvXCJ9cmV0dXJuKCF5LmJveFNpemluZ1JlbGlhYmxlKCkmJml8fFwiYXV0b1wiPT09YXx8IXBhcnNlRmxvYXQoYSkmJlwiaW5saW5lXCI9PT1rLmNzcyhlLFwiZGlzcGxheVwiLCExLHIpKSYmZS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCYmKGk9XCJib3JkZXItYm94XCI9PT1rLmNzcyhlLFwiYm94U2l6aW5nXCIsITEsciksKG89cyBpbiBlKSYmKGE9ZVtzXSkpLChhPXBhcnNlRmxvYXQoYSl8fDApK2V0KGUsdCxufHwoaT9cImJvcmRlclwiOlwiY29udGVudFwiKSxvLHIsYSkrXCJweFwifWZ1bmN0aW9uIG50KGUsdCxuLHIsaSl7cmV0dXJuIG5ldyBudC5wcm90b3R5cGUuaW5pdChlLHQsbixyLGkpfWsuZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGUsdCl7aWYodCl7dmFyIG49X2UoZSxcIm9wYWNpdHlcIik7cmV0dXJuXCJcIj09PW4/XCIxXCI6bn19fX0sY3NzTnVtYmVyOnthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxjb2x1bW5Db3VudDohMCxmaWxsT3BhY2l0eTohMCxmbGV4R3JvdzohMCxmbGV4U2hyaW5rOiEwLGZvbnRXZWlnaHQ6ITAsZ3JpZEFyZWE6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TdGFydDohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1N0YXJ0OiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMH0sY3NzUHJvcHM6e30sc3R5bGU6ZnVuY3Rpb24oZSx0LG4scil7aWYoZSYmMyE9PWUubm9kZVR5cGUmJjghPT1lLm5vZGVUeXBlJiZlLnN0eWxlKXt2YXIgaSxvLGEscz1WKHQpLHU9UWUudGVzdCh0KSxsPWUuc3R5bGU7aWYodXx8KHQ9R2UocykpLGE9ay5jc3NIb29rc1t0XXx8ay5jc3NIb29rc1tzXSx2b2lkIDA9PT1uKXJldHVybiBhJiZcImdldFwiaW4gYSYmdm9pZCAwIT09KGk9YS5nZXQoZSwhMSxyKSk/aTpsW3RdO1wic3RyaW5nXCI9PT0obz10eXBlb2YgbikmJihpPW5lLmV4ZWMobikpJiZpWzFdJiYobj1sZShlLHQsaSksbz1cIm51bWJlclwiKSxudWxsIT1uJiZuPT1uJiYoXCJudW1iZXJcIiE9PW98fHV8fChuKz1pJiZpWzNdfHwoay5jc3NOdW1iZXJbc10/XCJcIjpcInB4XCIpKSx5LmNsZWFyQ2xvbmVTdHlsZXx8XCJcIiE9PW58fDAhPT10LmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpfHwobFt0XT1cImluaGVyaXRcIiksYSYmXCJzZXRcImluIGEmJnZvaWQgMD09PShuPWEuc2V0KGUsbixyKSl8fCh1P2wuc2V0UHJvcGVydHkodCxuKTpsW3RdPW4pKX19LGNzczpmdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGEscz1WKHQpO3JldHVybiBRZS50ZXN0KHQpfHwodD1HZShzKSksKGE9ay5jc3NIb29rc1t0XXx8ay5jc3NIb29rc1tzXSkmJlwiZ2V0XCJpbiBhJiYoaT1hLmdldChlLCEwLG4pKSx2b2lkIDA9PT1pJiYoaT1fZShlLHQscikpLFwibm9ybWFsXCI9PT1pJiZ0IGluIEtlJiYoaT1LZVt0XSksXCJcIj09PW58fG4/KG89cGFyc2VGbG9hdChpKSwhMD09PW58fGlzRmluaXRlKG8pP298fDA6aSk6aX19KSxrLmVhY2goW1wiaGVpZ2h0XCIsXCJ3aWR0aFwiXSxmdW5jdGlvbihlLHUpe2suY3NzSG9va3NbdV09e2dldDpmdW5jdGlvbihlLHQsbil7aWYodClyZXR1cm4hWWUudGVzdChrLmNzcyhlLFwiZGlzcGxheVwiKSl8fGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgmJmUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg/dHQoZSx1LG4pOnVlKGUsSmUsZnVuY3Rpb24oKXtyZXR1cm4gdHQoZSx1LG4pfSl9LHNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaT1GZShlKSxvPSF5LnNjcm9sbGJveFNpemUoKSYmXCJhYnNvbHV0ZVwiPT09aS5wb3NpdGlvbixhPShvfHxuKSYmXCJib3JkZXItYm94XCI9PT1rLmNzcyhlLFwiYm94U2l6aW5nXCIsITEsaSkscz1uP2V0KGUsdSxuLGEsaSk6MDtyZXR1cm4gYSYmbyYmKHMtPU1hdGguY2VpbChlW1wib2Zmc2V0XCIrdVswXS50b1VwcGVyQ2FzZSgpK3Uuc2xpY2UoMSldLXBhcnNlRmxvYXQoaVt1XSktZXQoZSx1LFwiYm9yZGVyXCIsITEsaSktLjUpKSxzJiYocj1uZS5leGVjKHQpKSYmXCJweFwiIT09KHJbM118fFwicHhcIikmJihlLnN0eWxlW3VdPXQsdD1rLmNzcyhlLHUpKSxaZSgwLHQscyl9fX0pLGsuY3NzSG9va3MubWFyZ2luTGVmdD16ZSh5LnJlbGlhYmxlTWFyZ2luTGVmdCxmdW5jdGlvbihlLHQpe2lmKHQpcmV0dXJuKHBhcnNlRmxvYXQoX2UoZSxcIm1hcmdpbkxlZnRcIikpfHxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQtdWUoZSx7bWFyZ2luTGVmdDowfSxmdW5jdGlvbigpe3JldHVybiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnR9KSkrXCJweFwifSksay5lYWNoKHttYXJnaW46XCJcIixwYWRkaW5nOlwiXCIsYm9yZGVyOlwiV2lkdGhcIn0sZnVuY3Rpb24oaSxvKXtrLmNzc0hvb2tzW2krb109e2V4cGFuZDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPXt9LHI9XCJzdHJpbmdcIj09dHlwZW9mIGU/ZS5zcGxpdChcIiBcIik6W2VdO3Q8NDt0KyspbltpK3JlW3RdK29dPXJbdF18fHJbdC0yXXx8clswXTtyZXR1cm4gbn19LFwibWFyZ2luXCIhPT1pJiYoay5jc3NIb29rc1tpK29dLnNldD1aZSl9KSxrLmZuLmV4dGVuZCh7Y3NzOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIF8odGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPXt9LGE9MDtpZihBcnJheS5pc0FycmF5KHQpKXtmb3Iocj1GZShlKSxpPXQubGVuZ3RoO2E8aTthKyspb1t0W2FdXT1rLmNzcyhlLHRbYV0sITEscik7cmV0dXJuIG99cmV0dXJuIHZvaWQgMCE9PW4/ay5zdHlsZShlLHQsbik6ay5jc3MoZSx0KX0sZSx0LDE8YXJndW1lbnRzLmxlbmd0aCl9fSksKChrLlR3ZWVuPW50KS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOm50LGluaXQ6ZnVuY3Rpb24oZSx0LG4scixpLG8pe3RoaXMuZWxlbT1lLHRoaXMucHJvcD1uLHRoaXMuZWFzaW5nPWl8fGsuZWFzaW5nLl9kZWZhdWx0LHRoaXMub3B0aW9ucz10LHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1yLHRoaXMudW5pdD1vfHwoay5jc3NOdW1iZXJbbl0/XCJcIjpcInB4XCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgZT1udC5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gZSYmZS5nZXQ/ZS5nZXQodGhpcyk6bnQucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKX0scnVuOmZ1bmN0aW9uKGUpe3ZhciB0LG49bnQucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbj90aGlzLnBvcz10PWsuZWFzaW5nW3RoaXMuZWFzaW5nXShlLHRoaXMub3B0aW9ucy5kdXJhdGlvbiplLDAsMSx0aGlzLm9wdGlvbnMuZHVyYXRpb24pOnRoaXMucG9zPXQ9ZSx0aGlzLm5vdz0odGhpcy5lbmQtdGhpcy5zdGFydCkqdCt0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxuJiZuLnNldD9uLnNldCh0aGlzKTpudC5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSkuaW5pdC5wcm90b3R5cGU9bnQucHJvdG90eXBlLChudC5wcm9wSG9va3M9e19kZWZhdWx0OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIDEhPT1lLmVsZW0ubm9kZVR5cGV8fG51bGwhPWUuZWxlbVtlLnByb3BdJiZudWxsPT1lLmVsZW0uc3R5bGVbZS5wcm9wXT9lLmVsZW1bZS5wcm9wXToodD1rLmNzcyhlLmVsZW0sZS5wcm9wLFwiXCIpKSYmXCJhdXRvXCIhPT10P3Q6MH0sc2V0OmZ1bmN0aW9uKGUpe2suZnguc3RlcFtlLnByb3BdP2suZnguc3RlcFtlLnByb3BdKGUpOjEhPT1lLmVsZW0ubm9kZVR5cGV8fCFrLmNzc0hvb2tzW2UucHJvcF0mJm51bGw9PWUuZWxlbS5zdHlsZVtHZShlLnByb3ApXT9lLmVsZW1bZS5wcm9wXT1lLm5vdzprLnN0eWxlKGUuZWxlbSxlLnByb3AsZS5ub3crZS51bml0KX19fSkuc2Nyb2xsVG9wPW50LnByb3BIb29rcy5zY3JvbGxMZWZ0PXtzZXQ6ZnVuY3Rpb24oZSl7ZS5lbGVtLm5vZGVUeXBlJiZlLmVsZW0ucGFyZW50Tm9kZSYmKGUuZWxlbVtlLnByb3BdPWUubm93KX19LGsuZWFzaW5nPXtsaW5lYXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LHN3aW5nOmZ1bmN0aW9uKGUpe3JldHVybi41LU1hdGguY29zKGUqTWF0aC5QSSkvMn0sX2RlZmF1bHQ6XCJzd2luZ1wifSxrLmZ4PW50LnByb3RvdHlwZS5pbml0LGsuZnguc3RlcD17fTt2YXIgcnQsaXQsb3QsYXQsc3Q9L14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLHV0PS9xdWV1ZUhvb2tzJC87ZnVuY3Rpb24gbHQoKXtpdCYmKCExPT09RS5oaWRkZW4mJkMucmVxdWVzdEFuaW1hdGlvbkZyYW1lP0MucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGx0KTpDLnNldFRpbWVvdXQobHQsay5meC5pbnRlcnZhbCksay5meC50aWNrKCkpfWZ1bmN0aW9uIGN0KCl7cmV0dXJuIEMuc2V0VGltZW91dChmdW5jdGlvbigpe3J0PXZvaWQgMH0pLHJ0PURhdGUubm93KCl9ZnVuY3Rpb24gZnQoZSx0KXt2YXIgbixyPTAsaT17aGVpZ2h0OmV9O2Zvcih0PXQ/MTowO3I8NDtyKz0yLXQpaVtcIm1hcmdpblwiKyhuPXJlW3JdKV09aVtcInBhZGRpbmdcIituXT1lO3JldHVybiB0JiYoaS5vcGFjaXR5PWkud2lkdGg9ZSksaX1mdW5jdGlvbiBwdChlLHQsbil7Zm9yKHZhciByLGk9KGR0LnR3ZWVuZXJzW3RdfHxbXSkuY29uY2F0KGR0LnR3ZWVuZXJzW1wiKlwiXSksbz0wLGE9aS5sZW5ndGg7bzxhO28rKylpZihyPWlbb10uY2FsbChuLHQsZSkpcmV0dXJuIHJ9ZnVuY3Rpb24gZHQobyxlLHQpe3ZhciBuLGEscj0wLGk9ZHQucHJlZmlsdGVycy5sZW5ndGgscz1rLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uKCl7ZGVsZXRlIHUuZWxlbX0pLHU9ZnVuY3Rpb24oKXtpZihhKXJldHVybiExO2Zvcih2YXIgZT1ydHx8Y3QoKSx0PU1hdGgubWF4KDAsbC5zdGFydFRpbWUrbC5kdXJhdGlvbi1lKSxuPTEtKHQvbC5kdXJhdGlvbnx8MCkscj0wLGk9bC50d2VlbnMubGVuZ3RoO3I8aTtyKyspbC50d2VlbnNbcl0ucnVuKG4pO3JldHVybiBzLm5vdGlmeVdpdGgobyxbbCxuLHRdKSxuPDEmJmk/dDooaXx8cy5ub3RpZnlXaXRoKG8sW2wsMSwwXSkscy5yZXNvbHZlV2l0aChvLFtsXSksITEpfSxsPXMucHJvbWlzZSh7ZWxlbTpvLHByb3BzOmsuZXh0ZW5kKHt9LGUpLG9wdHM6ay5leHRlbmQoITAse3NwZWNpYWxFYXNpbmc6e30sZWFzaW5nOmsuZWFzaW5nLl9kZWZhdWx0fSx0KSxvcmlnaW5hbFByb3BlcnRpZXM6ZSxvcmlnaW5hbE9wdGlvbnM6dCxzdGFydFRpbWU6cnR8fGN0KCksZHVyYXRpb246dC5kdXJhdGlvbix0d2VlbnM6W10sY3JlYXRlVHdlZW46ZnVuY3Rpb24oZSx0KXt2YXIgbj1rLlR3ZWVuKG8sbC5vcHRzLGUsdCxsLm9wdHMuc3BlY2lhbEVhc2luZ1tlXXx8bC5vcHRzLmVhc2luZyk7cmV0dXJuIGwudHdlZW5zLnB1c2gobiksbn0sc3RvcDpmdW5jdGlvbihlKXt2YXIgdD0wLG49ZT9sLnR3ZWVucy5sZW5ndGg6MDtpZihhKXJldHVybiB0aGlzO2ZvcihhPSEwO3Q8bjt0KyspbC50d2VlbnNbdF0ucnVuKDEpO3JldHVybiBlPyhzLm5vdGlmeVdpdGgobyxbbCwxLDBdKSxzLnJlc29sdmVXaXRoKG8sW2wsZV0pKTpzLnJlamVjdFdpdGgobyxbbCxlXSksdGhpc319KSxjPWwucHJvcHM7Zm9yKCFmdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLGE7Zm9yKG4gaW4gZSlpZihpPXRbcj1WKG4pXSxvPWVbbl0sQXJyYXkuaXNBcnJheShvKSYmKGk9b1sxXSxvPWVbbl09b1swXSksbiE9PXImJihlW3JdPW8sZGVsZXRlIGVbbl0pLChhPWsuY3NzSG9va3Nbcl0pJiZcImV4cGFuZFwiaW4gYSlmb3IobiBpbiBvPWEuZXhwYW5kKG8pLGRlbGV0ZSBlW3JdLG8pbiBpbiBlfHwoZVtuXT1vW25dLHRbbl09aSk7ZWxzZSB0W3JdPWl9KGMsbC5vcHRzLnNwZWNpYWxFYXNpbmcpO3I8aTtyKyspaWYobj1kdC5wcmVmaWx0ZXJzW3JdLmNhbGwobCxvLGMsbC5vcHRzKSlyZXR1cm4gbShuLnN0b3ApJiYoay5fcXVldWVIb29rcyhsLmVsZW0sbC5vcHRzLnF1ZXVlKS5zdG9wPW4uc3RvcC5iaW5kKG4pKSxuO3JldHVybiBrLm1hcChjLHB0LGwpLG0obC5vcHRzLnN0YXJ0KSYmbC5vcHRzLnN0YXJ0LmNhbGwobyxsKSxsLnByb2dyZXNzKGwub3B0cy5wcm9ncmVzcykuZG9uZShsLm9wdHMuZG9uZSxsLm9wdHMuY29tcGxldGUpLmZhaWwobC5vcHRzLmZhaWwpLmFsd2F5cyhsLm9wdHMuYWx3YXlzKSxrLmZ4LnRpbWVyKGsuZXh0ZW5kKHUse2VsZW06byxhbmltOmwscXVldWU6bC5vcHRzLnF1ZXVlfSkpLGx9ay5BbmltYXRpb249ay5leHRlbmQoZHQse3R3ZWVuZXJzOntcIipcIjpbZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmNyZWF0ZVR3ZWVuKGUsdCk7cmV0dXJuIGxlKG4uZWxlbSxlLG5lLmV4ZWModCksbiksbn1dfSx0d2VlbmVyOmZ1bmN0aW9uKGUsdCl7bShlKT8odD1lLGU9W1wiKlwiXSk6ZT1lLm1hdGNoKFIpO2Zvcih2YXIgbixyPTAsaT1lLmxlbmd0aDtyPGk7cisrKW49ZVtyXSxkdC50d2VlbmVyc1tuXT1kdC50d2VlbmVyc1tuXXx8W10sZHQudHdlZW5lcnNbbl0udW5zaGlmdCh0KX0scHJlZmlsdGVyczpbZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsLGMsZj1cIndpZHRoXCJpbiB0fHxcImhlaWdodFwiaW4gdCxwPXRoaXMsZD17fSxoPWUuc3R5bGUsZz1lLm5vZGVUeXBlJiZzZShlKSx2PVEuZ2V0KGUsXCJmeHNob3dcIik7Zm9yKHIgaW4gbi5xdWV1ZXx8KG51bGw9PShhPWsuX3F1ZXVlSG9va3MoZSxcImZ4XCIpKS51bnF1ZXVlZCYmKGEudW5xdWV1ZWQ9MCxzPWEuZW1wdHkuZmlyZSxhLmVtcHR5LmZpcmU9ZnVuY3Rpb24oKXthLnVucXVldWVkfHxzKCl9KSxhLnVucXVldWVkKysscC5hbHdheXMoZnVuY3Rpb24oKXtwLmFsd2F5cyhmdW5jdGlvbigpe2EudW5xdWV1ZWQtLSxrLnF1ZXVlKGUsXCJmeFwiKS5sZW5ndGh8fGEuZW1wdHkuZmlyZSgpfSl9KSksdClpZihpPXRbcl0sc3QudGVzdChpKSl7aWYoZGVsZXRlIHRbcl0sbz1vfHxcInRvZ2dsZVwiPT09aSxpPT09KGc/XCJoaWRlXCI6XCJzaG93XCIpKXtpZihcInNob3dcIiE9PWl8fCF2fHx2b2lkIDA9PT12W3JdKWNvbnRpbnVlO2c9ITB9ZFtyXT12JiZ2W3JdfHxrLnN0eWxlKGUscil9aWYoKHU9IWsuaXNFbXB0eU9iamVjdCh0KSl8fCFrLmlzRW1wdHlPYmplY3QoZCkpZm9yKHIgaW4gZiYmMT09PWUubm9kZVR5cGUmJihuLm92ZXJmbG93PVtoLm92ZXJmbG93LGgub3ZlcmZsb3dYLGgub3ZlcmZsb3dZXSxudWxsPT0obD12JiZ2LmRpc3BsYXkpJiYobD1RLmdldChlLFwiZGlzcGxheVwiKSksXCJub25lXCI9PT0oYz1rLmNzcyhlLFwiZGlzcGxheVwiKSkmJihsP2M9bDooZmUoW2VdLCEwKSxsPWUuc3R5bGUuZGlzcGxheXx8bCxjPWsuY3NzKGUsXCJkaXNwbGF5XCIpLGZlKFtlXSkpKSwoXCJpbmxpbmVcIj09PWN8fFwiaW5saW5lLWJsb2NrXCI9PT1jJiZudWxsIT1sKSYmXCJub25lXCI9PT1rLmNzcyhlLFwiZmxvYXRcIikmJih1fHwocC5kb25lKGZ1bmN0aW9uKCl7aC5kaXNwbGF5PWx9KSxudWxsPT1sJiYoYz1oLmRpc3BsYXksbD1cIm5vbmVcIj09PWM/XCJcIjpjKSksaC5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIpKSxuLm92ZXJmbG93JiYoaC5vdmVyZmxvdz1cImhpZGRlblwiLHAuYWx3YXlzKGZ1bmN0aW9uKCl7aC5vdmVyZmxvdz1uLm92ZXJmbG93WzBdLGgub3ZlcmZsb3dYPW4ub3ZlcmZsb3dbMV0saC5vdmVyZmxvd1k9bi5vdmVyZmxvd1syXX0pKSx1PSExLGQpdXx8KHY/XCJoaWRkZW5cImluIHYmJihnPXYuaGlkZGVuKTp2PVEuYWNjZXNzKGUsXCJmeHNob3dcIix7ZGlzcGxheTpsfSksbyYmKHYuaGlkZGVuPSFnKSxnJiZmZShbZV0sITApLHAuZG9uZShmdW5jdGlvbigpe2ZvcihyIGluIGd8fGZlKFtlXSksUS5yZW1vdmUoZSxcImZ4c2hvd1wiKSxkKWsuc3R5bGUoZSxyLGRbcl0pfSkpLHU9cHQoZz92W3JdOjAscixwKSxyIGluIHZ8fCh2W3JdPXUuc3RhcnQsZyYmKHUuZW5kPXUuc3RhcnQsdS5zdGFydD0wKSl9XSxwcmVmaWx0ZXI6ZnVuY3Rpb24oZSx0KXt0P2R0LnByZWZpbHRlcnMudW5zaGlmdChlKTpkdC5wcmVmaWx0ZXJzLnB1c2goZSl9fSksay5zcGVlZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZSYmXCJvYmplY3RcIj09dHlwZW9mIGU/ay5leHRlbmQoe30sZSk6e2NvbXBsZXRlOm58fCFuJiZ0fHxtKGUpJiZlLGR1cmF0aW9uOmUsZWFzaW5nOm4mJnR8fHQmJiFtKHQpJiZ0fTtyZXR1cm4gay5meC5vZmY/ci5kdXJhdGlvbj0wOlwibnVtYmVyXCIhPXR5cGVvZiByLmR1cmF0aW9uJiYoci5kdXJhdGlvbiBpbiBrLmZ4LnNwZWVkcz9yLmR1cmF0aW9uPWsuZnguc3BlZWRzW3IuZHVyYXRpb25dOnIuZHVyYXRpb249ay5meC5zcGVlZHMuX2RlZmF1bHQpLG51bGwhPXIucXVldWUmJiEwIT09ci5xdWV1ZXx8KHIucXVldWU9XCJmeFwiKSxyLm9sZD1yLmNvbXBsZXRlLHIuY29tcGxldGU9ZnVuY3Rpb24oKXttKHIub2xkKSYmci5vbGQuY2FsbCh0aGlzKSxyLnF1ZXVlJiZrLmRlcXVldWUodGhpcyxyLnF1ZXVlKX0scn0say5mbi5leHRlbmQoe2ZhZGVUbzpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5maWx0ZXIoc2UpLmNzcyhcIm9wYWNpdHlcIiwwKS5zaG93KCkuZW5kKCkuYW5pbWF0ZSh7b3BhY2l0eTp0fSxlLG4scil9LGFuaW1hdGU6ZnVuY3Rpb24odCxlLG4scil7dmFyIGk9ay5pc0VtcHR5T2JqZWN0KHQpLG89ay5zcGVlZChlLG4sciksYT1mdW5jdGlvbigpe3ZhciBlPWR0KHRoaXMsay5leHRlbmQoe30sdCksbyk7KGl8fFEuZ2V0KHRoaXMsXCJmaW5pc2hcIikpJiZlLnN0b3AoITApfTtyZXR1cm4gYS5maW5pc2g9YSxpfHwhMT09PW8ucXVldWU/dGhpcy5lYWNoKGEpOnRoaXMucXVldWUoby5xdWV1ZSxhKX0sc3RvcDpmdW5jdGlvbihpLGUsbyl7dmFyIGE9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zdG9wO2RlbGV0ZSBlLnN0b3AsdChvKX07cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGkmJihvPWUsZT1pLGk9dm9pZCAwKSxlJiYhMSE9PWkmJnRoaXMucXVldWUoaXx8XCJmeFwiLFtdKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT0hMCx0PW51bGwhPWkmJmkrXCJxdWV1ZUhvb2tzXCIsbj1rLnRpbWVycyxyPVEuZ2V0KHRoaXMpO2lmKHQpclt0XSYmclt0XS5zdG9wJiZhKHJbdF0pO2Vsc2UgZm9yKHQgaW4gcilyW3RdJiZyW3RdLnN0b3AmJnV0LnRlc3QodCkmJmEoclt0XSk7Zm9yKHQ9bi5sZW5ndGg7dC0tOyluW3RdLmVsZW0hPT10aGlzfHxudWxsIT1pJiZuW3RdLnF1ZXVlIT09aXx8KG5bdF0uYW5pbS5zdG9wKG8pLGU9ITEsbi5zcGxpY2UodCwxKSk7IWUmJm98fGsuZGVxdWV1ZSh0aGlzLGkpfSl9LGZpbmlzaDpmdW5jdGlvbihhKXtyZXR1cm4hMSE9PWEmJihhPWF8fFwiZnhcIiksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGUsdD1RLmdldCh0aGlzKSxuPXRbYStcInF1ZXVlXCJdLHI9dFthK1wicXVldWVIb29rc1wiXSxpPWsudGltZXJzLG89bj9uLmxlbmd0aDowO2Zvcih0LmZpbmlzaD0hMCxrLnF1ZXVlKHRoaXMsYSxbXSksciYmci5zdG9wJiZyLnN0b3AuY2FsbCh0aGlzLCEwKSxlPWkubGVuZ3RoO2UtLTspaVtlXS5lbGVtPT09dGhpcyYmaVtlXS5xdWV1ZT09PWEmJihpW2VdLmFuaW0uc3RvcCghMCksaS5zcGxpY2UoZSwxKSk7Zm9yKGU9MDtlPG87ZSsrKW5bZV0mJm5bZV0uZmluaXNoJiZuW2VdLmZpbmlzaC5jYWxsKHRoaXMpO2RlbGV0ZSB0LmZpbmlzaH0pfX0pLGsuZWFjaChbXCJ0b2dnbGVcIixcInNob3dcIixcImhpZGVcIl0sZnVuY3Rpb24oZSxyKXt2YXIgaT1rLmZuW3JdO2suZm5bcl09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBudWxsPT1lfHxcImJvb2xlYW5cIj09dHlwZW9mIGU/aS5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKGZ0KHIsITApLGUsdCxuKX19KSxrLmVhY2goe3NsaWRlRG93bjpmdChcInNob3dcIiksc2xpZGVVcDpmdChcImhpZGVcIiksc2xpZGVUb2dnbGU6ZnQoXCJ0b2dnbGVcIiksZmFkZUluOntvcGFjaXR5Olwic2hvd1wifSxmYWRlT3V0OntvcGFjaXR5OlwiaGlkZVwifSxmYWRlVG9nZ2xlOntvcGFjaXR5OlwidG9nZ2xlXCJ9fSxmdW5jdGlvbihlLHIpe2suZm5bZV09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLmFuaW1hdGUocixlLHQsbil9fSksay50aW1lcnM9W10say5meC50aWNrPWZ1bmN0aW9uKCl7dmFyIGUsdD0wLG49ay50aW1lcnM7Zm9yKHJ0PURhdGUubm93KCk7dDxuLmxlbmd0aDt0KyspKGU9blt0XSkoKXx8blt0XSE9PWV8fG4uc3BsaWNlKHQtLSwxKTtuLmxlbmd0aHx8ay5meC5zdG9wKCkscnQ9dm9pZCAwfSxrLmZ4LnRpbWVyPWZ1bmN0aW9uKGUpe2sudGltZXJzLnB1c2goZSksay5meC5zdGFydCgpfSxrLmZ4LmludGVydmFsPTEzLGsuZnguc3RhcnQ9ZnVuY3Rpb24oKXtpdHx8KGl0PSEwLGx0KCkpfSxrLmZ4LnN0b3A9ZnVuY3Rpb24oKXtpdD1udWxsfSxrLmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSxrLmZuLmRlbGF5PWZ1bmN0aW9uKHIsZSl7cmV0dXJuIHI9ay5meCYmay5meC5zcGVlZHNbcl18fHIsZT1lfHxcImZ4XCIsdGhpcy5xdWV1ZShlLGZ1bmN0aW9uKGUsdCl7dmFyIG49Qy5zZXRUaW1lb3V0KGUscik7dC5zdG9wPWZ1bmN0aW9uKCl7Qy5jbGVhclRpbWVvdXQobil9fSl9LG90PUUuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLGF0PUUuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKS5hcHBlbmRDaGlsZChFLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpLG90LnR5cGU9XCJjaGVja2JveFwiLHkuY2hlY2tPbj1cIlwiIT09b3QudmFsdWUseS5vcHRTZWxlY3RlZD1hdC5zZWxlY3RlZCwob3Q9RS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIikpLnZhbHVlPVwidFwiLG90LnR5cGU9XCJyYWRpb1wiLHkucmFkaW9WYWx1ZT1cInRcIj09PW90LnZhbHVlO3ZhciBodCxndD1rLmV4cHIuYXR0ckhhbmRsZTtrLmZuLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihlLHQpe3JldHVybiBfKHRoaXMsay5hdHRyLGUsdCwxPGFyZ3VtZW50cy5sZW5ndGgpfSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtrLnJlbW92ZUF0dHIodGhpcyxlKX0pfX0pLGsuZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89ZS5ub2RlVHlwZTtpZigzIT09byYmOCE9PW8mJjIhPT1vKXJldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBlLmdldEF0dHJpYnV0ZT9rLnByb3AoZSx0LG4pOigxPT09byYmay5pc1hNTERvYyhlKXx8KGk9ay5hdHRySG9va3NbdC50b0xvd2VyQ2FzZSgpXXx8KGsuZXhwci5tYXRjaC5ib29sLnRlc3QodCk/aHQ6dm9pZCAwKSksdm9pZCAwIT09bj9udWxsPT09bj92b2lkIGsucmVtb3ZlQXR0cihlLHQpOmkmJlwic2V0XCJpbiBpJiZ2b2lkIDAhPT0ocj1pLnNldChlLG4sdCkpP3I6KGUuc2V0QXR0cmlidXRlKHQsbitcIlwiKSxuKTppJiZcImdldFwiaW4gaSYmbnVsbCE9PShyPWkuZ2V0KGUsdCkpP3I6bnVsbD09KHI9ay5maW5kLmF0dHIoZSx0KSk/dm9pZCAwOnIpfSxhdHRySG9va3M6e3R5cGU6e3NldDpmdW5jdGlvbihlLHQpe2lmKCF5LnJhZGlvVmFsdWUmJlwicmFkaW9cIj09PXQmJkEoZSxcImlucHV0XCIpKXt2YXIgbj1lLnZhbHVlO3JldHVybiBlLnNldEF0dHJpYnV0ZShcInR5cGVcIix0KSxuJiYoZS52YWx1ZT1uKSx0fX19fSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0wLGk9dCYmdC5tYXRjaChSKTtpZihpJiYxPT09ZS5ub2RlVHlwZSl3aGlsZShuPWlbcisrXSllLnJlbW92ZUF0dHJpYnV0ZShuKX19KSxodD17c2V0OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4hMT09PXQ/ay5yZW1vdmVBdHRyKGUsbik6ZS5zZXRBdHRyaWJ1dGUobixuKSxufX0say5lYWNoKGsuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXFx3Ky9nKSxmdW5jdGlvbihlLHQpe3ZhciBhPWd0W3RdfHxrLmZpbmQuYXR0cjtndFt0XT1mdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPXQudG9Mb3dlckNhc2UoKTtyZXR1cm4gbnx8KGk9Z3Rbb10sZ3Rbb109cixyPW51bGwhPWEoZSx0LG4pP286bnVsbCxndFtvXT1pKSxyfX0pO3ZhciB2dD0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLHl0PS9eKD86YXxhcmVhKSQvaTtmdW5jdGlvbiBtdChlKXtyZXR1cm4oZS5tYXRjaChSKXx8W10pLmpvaW4oXCIgXCIpfWZ1bmN0aW9uIHh0KGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZSYmZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIn1mdW5jdGlvbiBidChlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9lOlwic3RyaW5nXCI9PXR5cGVvZiBlJiZlLm1hdGNoKFIpfHxbXX1rLmZuLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihlLHQpe3JldHVybiBfKHRoaXMsay5wcm9wLGUsdCwxPGFyZ3VtZW50cy5sZW5ndGgpfSxyZW1vdmVQcm9wOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtkZWxldGUgdGhpc1trLnByb3BGaXhbZV18fGVdfSl9fSksay5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz1lLm5vZGVUeXBlO2lmKDMhPT1vJiY4IT09byYmMiE9PW8pcmV0dXJuIDE9PT1vJiZrLmlzWE1MRG9jKGUpfHwodD1rLnByb3BGaXhbdF18fHQsaT1rLnByb3BIb29rc1t0XSksdm9pZCAwIT09bj9pJiZcInNldFwiaW4gaSYmdm9pZCAwIT09KHI9aS5zZXQoZSxuLHQpKT9yOmVbdF09bjppJiZcImdldFwiaW4gaSYmbnVsbCE9PShyPWkuZ2V0KGUsdCkpP3I6ZVt0XX0scHJvcEhvb2tzOnt0YWJJbmRleDp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWsuZmluZC5hdHRyKGUsXCJ0YWJpbmRleFwiKTtyZXR1cm4gdD9wYXJzZUludCh0LDEwKTp2dC50ZXN0KGUubm9kZU5hbWUpfHx5dC50ZXN0KGUubm9kZU5hbWUpJiZlLmhyZWY/MDotMX19fSxwcm9wRml4OntcImZvclwiOlwiaHRtbEZvclwiLFwiY2xhc3NcIjpcImNsYXNzTmFtZVwifX0pLHkub3B0U2VsZWN0ZWR8fChrLnByb3BIb29rcy5zZWxlY3RlZD17Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxudWxsfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3QmJih0LnNlbGVjdGVkSW5kZXgsdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCl9fSksay5lYWNoKFtcInRhYkluZGV4XCIsXCJyZWFkT25seVwiLFwibWF4TGVuZ3RoXCIsXCJjZWxsU3BhY2luZ1wiLFwiY2VsbFBhZGRpbmdcIixcInJvd1NwYW5cIixcImNvbFNwYW5cIixcInVzZU1hcFwiLFwiZnJhbWVCb3JkZXJcIixcImNvbnRlbnRFZGl0YWJsZVwiXSxmdW5jdGlvbigpe2sucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldPXRoaXN9KSxrLmZuLmV4dGVuZCh7YWRkQ2xhc3M6ZnVuY3Rpb24odCl7dmFyIGUsbixyLGksbyxhLHMsdT0wO2lmKG0odCkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtrKHRoaXMpLmFkZENsYXNzKHQuY2FsbCh0aGlzLGUseHQodGhpcykpKX0pO2lmKChlPWJ0KHQpKS5sZW5ndGgpd2hpbGUobj10aGlzW3UrK10paWYoaT14dChuKSxyPTE9PT1uLm5vZGVUeXBlJiZcIiBcIittdChpKStcIiBcIil7YT0wO3doaWxlKG89ZVthKytdKXIuaW5kZXhPZihcIiBcIitvK1wiIFwiKTwwJiYocis9bytcIiBcIik7aSE9PShzPW10KHIpKSYmbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLHMpfXJldHVybiB0aGlzfSxyZW1vdmVDbGFzczpmdW5jdGlvbih0KXt2YXIgZSxuLHIsaSxvLGEscyx1PTA7aWYobSh0KSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpe2sodGhpcykucmVtb3ZlQ2xhc3ModC5jYWxsKHRoaXMsZSx4dCh0aGlzKSkpfSk7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuYXR0cihcImNsYXNzXCIsXCJcIik7aWYoKGU9YnQodCkpLmxlbmd0aCl3aGlsZShuPXRoaXNbdSsrXSlpZihpPXh0KG4pLHI9MT09PW4ubm9kZVR5cGUmJlwiIFwiK210KGkpK1wiIFwiKXthPTA7d2hpbGUobz1lW2ErK10pd2hpbGUoLTE8ci5pbmRleE9mKFwiIFwiK28rXCIgXCIpKXI9ci5yZXBsYWNlKFwiIFwiK28rXCIgXCIsXCIgXCIpO2khPT0ocz1tdChyKSkmJm4uc2V0QXR0cmlidXRlKFwiY2xhc3NcIixzKX1yZXR1cm4gdGhpc30sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oaSx0KXt2YXIgbz10eXBlb2YgaSxhPVwic3RyaW5nXCI9PT1vfHxBcnJheS5pc0FycmF5KGkpO3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgdCYmYT90P3RoaXMuYWRkQ2xhc3MoaSk6dGhpcy5yZW1vdmVDbGFzcyhpKTptKGkpP3RoaXMuZWFjaChmdW5jdGlvbihlKXtrKHRoaXMpLnRvZ2dsZUNsYXNzKGkuY2FsbCh0aGlzLGUseHQodGhpcyksdCksdCl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZSx0LG4scjtpZihhKXt0PTAsbj1rKHRoaXMpLHI9YnQoaSk7d2hpbGUoZT1yW3QrK10pbi5oYXNDbGFzcyhlKT9uLnJlbW92ZUNsYXNzKGUpOm4uYWRkQ2xhc3MoZSl9ZWxzZSB2b2lkIDAhPT1pJiZcImJvb2xlYW5cIiE9PW98fCgoZT14dCh0aGlzKSkmJlEuc2V0KHRoaXMsXCJfX2NsYXNzTmFtZV9fXCIsZSksdGhpcy5zZXRBdHRyaWJ1dGUmJnRoaXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixlfHwhMT09PWk/XCJcIjpRLmdldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiKXx8XCJcIikpfSl9LGhhc0NsYXNzOmZ1bmN0aW9uKGUpe3ZhciB0LG4scj0wO3Q9XCIgXCIrZStcIiBcIjt3aGlsZShuPXRoaXNbcisrXSlpZigxPT09bi5ub2RlVHlwZSYmLTE8KFwiIFwiK210KHh0KG4pKStcIiBcIikuaW5kZXhPZih0KSlyZXR1cm4hMDtyZXR1cm4hMX19KTt2YXIgd3Q9L1xcci9nO2suZm4uZXh0ZW5kKHt2YWw6ZnVuY3Rpb24obil7dmFyIHIsZSxpLHQ9dGhpc1swXTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaT1tKG4pLHRoaXMuZWFjaChmdW5jdGlvbihlKXt2YXIgdDsxPT09dGhpcy5ub2RlVHlwZSYmKG51bGw9PSh0PWk/bi5jYWxsKHRoaXMsZSxrKHRoaXMpLnZhbCgpKTpuKT90PVwiXCI6XCJudW1iZXJcIj09dHlwZW9mIHQ/dCs9XCJcIjpBcnJheS5pc0FycmF5KHQpJiYodD1rLm1hcCh0LGZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP1wiXCI6ZStcIlwifSkpLChyPWsudmFsSG9va3NbdGhpcy50eXBlXXx8ay52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSYmXCJzZXRcImluIHImJnZvaWQgMCE9PXIuc2V0KHRoaXMsdCxcInZhbHVlXCIpfHwodGhpcy52YWx1ZT10KSl9KSk6dD8ocj1rLnZhbEhvb2tzW3QudHlwZV18fGsudmFsSG9va3NbdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJlwiZ2V0XCJpbiByJiZ2b2lkIDAhPT0oZT1yLmdldCh0LFwidmFsdWVcIikpP2U6XCJzdHJpbmdcIj09dHlwZW9mKGU9dC52YWx1ZSk/ZS5yZXBsYWNlKHd0LFwiXCIpOm51bGw9PWU/XCJcIjplOnZvaWQgMH19KSxrLmV4dGVuZCh7dmFsSG9va3M6e29wdGlvbjp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWsuZmluZC5hdHRyKGUsXCJ2YWx1ZVwiKTtyZXR1cm4gbnVsbCE9dD90Om10KGsudGV4dChlKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaT1lLm9wdGlvbnMsbz1lLnNlbGVjdGVkSW5kZXgsYT1cInNlbGVjdC1vbmVcIj09PWUudHlwZSxzPWE/bnVsbDpbXSx1PWE/bysxOmkubGVuZ3RoO2ZvcihyPW88MD91OmE/bzowO3I8dTtyKyspaWYoKChuPWlbcl0pLnNlbGVjdGVkfHxyPT09bykmJiFuLmRpc2FibGVkJiYoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZHx8IUEobi5wYXJlbnROb2RlLFwib3B0Z3JvdXBcIikpKXtpZih0PWsobikudmFsKCksYSlyZXR1cm4gdDtzLnB1c2godCl9cmV0dXJuIHN9LHNldDpmdW5jdGlvbihlLHQpe3ZhciBuLHIsaT1lLm9wdGlvbnMsbz1rLm1ha2VBcnJheSh0KSxhPWkubGVuZ3RoO3doaWxlKGEtLSkoKHI9aVthXSkuc2VsZWN0ZWQ9LTE8ay5pbkFycmF5KGsudmFsSG9va3Mub3B0aW9uLmdldChyKSxvKSkmJihuPSEwKTtyZXR1cm4gbnx8KGUuc2VsZWN0ZWRJbmRleD0tMSksb319fX0pLGsuZWFjaChbXCJyYWRpb1wiLFwiY2hlY2tib3hcIl0sZnVuY3Rpb24oKXtrLnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBlLmNoZWNrZWQ9LTE8ay5pbkFycmF5KGsoZSkudmFsKCksdCl9fSx5LmNoZWNrT258fChrLnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik/XCJvblwiOmUudmFsdWV9KX0pLHkuZm9jdXNpbj1cIm9uZm9jdXNpblwiaW4gQzt2YXIgVHQ9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLEN0PWZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCl9O2suZXh0ZW5kKGsuZXZlbnQse3RyaWdnZXI6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsLGMsZixwPVtufHxFXSxkPXYuY2FsbChlLFwidHlwZVwiKT9lLnR5cGU6ZSxoPXYuY2FsbChlLFwibmFtZXNwYWNlXCIpP2UubmFtZXNwYWNlLnNwbGl0KFwiLlwiKTpbXTtpZihvPWY9YT1uPW58fEUsMyE9PW4ubm9kZVR5cGUmJjghPT1uLm5vZGVUeXBlJiYhVHQudGVzdChkK2suZXZlbnQudHJpZ2dlcmVkKSYmKC0xPGQuaW5kZXhPZihcIi5cIikmJihkPShoPWQuc3BsaXQoXCIuXCIpKS5zaGlmdCgpLGguc29ydCgpKSx1PWQuaW5kZXhPZihcIjpcIik8MCYmXCJvblwiK2QsKGU9ZVtrLmV4cGFuZG9dP2U6bmV3IGsuRXZlbnQoZCxcIm9iamVjdFwiPT10eXBlb2YgZSYmZSkpLmlzVHJpZ2dlcj1yPzI6MyxlLm5hbWVzcGFjZT1oLmpvaW4oXCIuXCIpLGUucm5hbWVzcGFjZT1lLm5hbWVzcGFjZT9uZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIraC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIik6bnVsbCxlLnJlc3VsdD12b2lkIDAsZS50YXJnZXR8fChlLnRhcmdldD1uKSx0PW51bGw9PXQ/W2VdOmsubWFrZUFycmF5KHQsW2VdKSxjPWsuZXZlbnQuc3BlY2lhbFtkXXx8e30scnx8IWMudHJpZ2dlcnx8ITEhPT1jLnRyaWdnZXIuYXBwbHkobix0KSkpe2lmKCFyJiYhYy5ub0J1YmJsZSYmIXgobikpe2ZvcihzPWMuZGVsZWdhdGVUeXBlfHxkLFR0LnRlc3QocytkKXx8KG89by5wYXJlbnROb2RlKTtvO289by5wYXJlbnROb2RlKXAucHVzaChvKSxhPW87YT09PShuLm93bmVyRG9jdW1lbnR8fEUpJiZwLnB1c2goYS5kZWZhdWx0Vmlld3x8YS5wYXJlbnRXaW5kb3d8fEMpfWk9MDt3aGlsZSgobz1wW2krK10pJiYhZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWY9byxlLnR5cGU9MTxpP3M6Yy5iaW5kVHlwZXx8ZCwobD0oUS5nZXQobyxcImV2ZW50c1wiKXx8e30pW2UudHlwZV0mJlEuZ2V0KG8sXCJoYW5kbGVcIikpJiZsLmFwcGx5KG8sdCksKGw9dSYmb1t1XSkmJmwuYXBwbHkmJkcobykmJihlLnJlc3VsdD1sLmFwcGx5KG8sdCksITE9PT1lLnJlc3VsdCYmZS5wcmV2ZW50RGVmYXVsdCgpKTtyZXR1cm4gZS50eXBlPWQscnx8ZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8Yy5fZGVmYXVsdCYmITEhPT1jLl9kZWZhdWx0LmFwcGx5KHAucG9wKCksdCl8fCFHKG4pfHx1JiZtKG5bZF0pJiYheChuKSYmKChhPW5bdV0pJiYoblt1XT1udWxsKSxrLmV2ZW50LnRyaWdnZXJlZD1kLGUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSYmZi5hZGRFdmVudExpc3RlbmVyKGQsQ3QpLG5bZF0oKSxlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkmJmYucmVtb3ZlRXZlbnRMaXN0ZW5lcihkLEN0KSxrLmV2ZW50LnRyaWdnZXJlZD12b2lkIDAsYSYmKG5bdV09YSkpLGUucmVzdWx0fX0sc2ltdWxhdGU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWsuZXh0ZW5kKG5ldyBrLkV2ZW50LG4se3R5cGU6ZSxpc1NpbXVsYXRlZDohMH0pO2suZXZlbnQudHJpZ2dlcihyLG51bGwsdCl9fSksay5mbi5leHRlbmQoe3RyaWdnZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ay5ldmVudC50cmlnZ2VyKGUsdCx0aGlzKX0pfSx0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXNbMF07aWYobilyZXR1cm4gay5ldmVudC50cmlnZ2VyKGUsdCxuLCEwKX19KSx5LmZvY3VzaW58fGsuZWFjaCh7Zm9jdXM6XCJmb2N1c2luXCIsYmx1cjpcImZvY3Vzb3V0XCJ9LGZ1bmN0aW9uKG4scil7dmFyIGk9ZnVuY3Rpb24oZSl7ay5ldmVudC5zaW11bGF0ZShyLGUudGFyZ2V0LGsuZXZlbnQuZml4KGUpKX07ay5ldmVudC5zcGVjaWFsW3JdPXtzZXR1cDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyx0PVEuYWNjZXNzKGUscik7dHx8ZS5hZGRFdmVudExpc3RlbmVyKG4saSwhMCksUS5hY2Nlc3MoZSxyLCh0fHwwKSsxKX0sdGVhcmRvd246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsdD1RLmFjY2VzcyhlLHIpLTE7dD9RLmFjY2VzcyhlLHIsdCk6KGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihuLGksITApLFEucmVtb3ZlKGUscikpfX19KTt2YXIgRXQ9Qy5sb2NhdGlvbixrdD1EYXRlLm5vdygpLFN0PS9cXD8vO2sucGFyc2VYTUw9ZnVuY3Rpb24oZSl7dmFyIHQ7aWYoIWV8fFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBudWxsO3RyeXt0PShuZXcgQy5ET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyhlLFwidGV4dC94bWxcIil9Y2F0Y2goZSl7dD12b2lkIDB9cmV0dXJuIHQmJiF0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIikubGVuZ3RofHxrLmVycm9yKFwiSW52YWxpZCBYTUw6IFwiK2UpLHR9O3ZhciBOdD0vXFxbXFxdJC8sQXQ9L1xccj9cXG4vZyxEdD0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksanQ9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO2Z1bmN0aW9uIHF0KG4sZSxyLGkpe3ZhciB0O2lmKEFycmF5LmlzQXJyYXkoZSkpay5lYWNoKGUsZnVuY3Rpb24oZSx0KXtyfHxOdC50ZXN0KG4pP2kobix0KTpxdChuK1wiW1wiKyhcIm9iamVjdFwiPT10eXBlb2YgdCYmbnVsbCE9dD9lOlwiXCIpK1wiXVwiLHQscixpKX0pO2Vsc2UgaWYocnx8XCJvYmplY3RcIiE9PXcoZSkpaShuLGUpO2Vsc2UgZm9yKHQgaW4gZSlxdChuK1wiW1wiK3QrXCJdXCIsZVt0XSxyLGkpfWsucGFyYW09ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9ZnVuY3Rpb24oZSx0KXt2YXIgbj1tKHQpP3QoKTp0O3Jbci5sZW5ndGhdPWVuY29kZVVSSUNvbXBvbmVudChlKStcIj1cIitlbmNvZGVVUklDb21wb25lbnQobnVsbD09bj9cIlwiOm4pfTtpZihudWxsPT1lKXJldHVyblwiXCI7aWYoQXJyYXkuaXNBcnJheShlKXx8ZS5qcXVlcnkmJiFrLmlzUGxhaW5PYmplY3QoZSkpay5lYWNoKGUsZnVuY3Rpb24oKXtpKHRoaXMubmFtZSx0aGlzLnZhbHVlKX0pO2Vsc2UgZm9yKG4gaW4gZSlxdChuLGVbbl0sdCxpKTtyZXR1cm4gci5qb2luKFwiJlwiKX0say5mbi5leHRlbmQoe3NlcmlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiBrLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGU9ay5wcm9wKHRoaXMsXCJlbGVtZW50c1wiKTtyZXR1cm4gZT9rLm1ha2VBcnJheShlKTp0aGlzfSkuZmlsdGVyKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy50eXBlO3JldHVybiB0aGlzLm5hbWUmJiFrKHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpJiZqdC50ZXN0KHRoaXMubm9kZU5hbWUpJiYhRHQudGVzdChlKSYmKHRoaXMuY2hlY2tlZHx8IXBlLnRlc3QoZSkpfSkubWFwKGZ1bmN0aW9uKGUsdCl7dmFyIG49ayh0aGlzKS52YWwoKTtyZXR1cm4gbnVsbD09bj9udWxsOkFycmF5LmlzQXJyYXkobik/ay5tYXAobixmdW5jdGlvbihlKXtyZXR1cm57bmFtZTp0Lm5hbWUsdmFsdWU6ZS5yZXBsYWNlKEF0LFwiXFxyXFxuXCIpfX0pOntuYW1lOnQubmFtZSx2YWx1ZTpuLnJlcGxhY2UoQXQsXCJcXHJcXG5cIil9fSkuZ2V0KCl9fSk7dmFyIEx0PS8lMjAvZyxIdD0vIy4qJC8sT3Q9LyhbPyZdKV89W14mXSovLFB0PS9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvZ20sUnQ9L14oPzpHRVR8SEVBRCkkLyxNdD0vXlxcL1xcLy8sSXQ9e30sV3Q9e30sJHQ9XCIqL1wiLmNvbmNhdChcIipcIiksRnQ9RS5jcmVhdGVFbGVtZW50KFwiYVwiKTtmdW5jdGlvbiBCdChvKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtcInN0cmluZ1wiIT10eXBlb2YgZSYmKHQ9ZSxlPVwiKlwiKTt2YXIgbixyPTAsaT1lLnRvTG93ZXJDYXNlKCkubWF0Y2goUil8fFtdO2lmKG0odCkpd2hpbGUobj1pW3IrK10pXCIrXCI9PT1uWzBdPyhuPW4uc2xpY2UoMSl8fFwiKlwiLChvW25dPW9bbl18fFtdKS51bnNoaWZ0KHQpKToob1tuXT1vW25dfHxbXSkucHVzaCh0KX19ZnVuY3Rpb24gX3QodCxpLG8sYSl7dmFyIHM9e30sdT10PT09V3Q7ZnVuY3Rpb24gbChlKXt2YXIgcjtyZXR1cm4gc1tlXT0hMCxrLmVhY2godFtlXXx8W10sZnVuY3Rpb24oZSx0KXt2YXIgbj10KGksbyxhKTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2Ygbnx8dXx8c1tuXT91PyEocj1uKTp2b2lkIDA6KGkuZGF0YVR5cGVzLnVuc2hpZnQobiksbChuKSwhMSl9KSxyfXJldHVybiBsKGkuZGF0YVR5cGVzWzBdKXx8IXNbXCIqXCJdJiZsKFwiKlwiKX1mdW5jdGlvbiB6dChlLHQpe3ZhciBuLHIsaT1rLmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9uc3x8e307Zm9yKG4gaW4gdCl2b2lkIDAhPT10W25dJiYoKGlbbl0/ZTpyfHwocj17fSkpW25dPXRbbl0pO3JldHVybiByJiZrLmV4dGVuZCghMCxlLHIpLGV9RnQuaHJlZj1FdC5ocmVmLGsuZXh0ZW5kKHthY3RpdmU6MCxsYXN0TW9kaWZpZWQ6e30sZXRhZzp7fSxhamF4U2V0dGluZ3M6e3VybDpFdC5ocmVmLHR5cGU6XCJHRVRcIixpc0xvY2FsOi9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLnRlc3QoRXQucHJvdG9jb2wpLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZTpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLGFjY2VwdHM6e1wiKlwiOiR0LHRleHQ6XCJ0ZXh0L3BsYWluXCIsaHRtbDpcInRleHQvaHRtbFwiLHhtbDpcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixqc29uOlwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJ9LGNvbnRlbnRzOnt4bWw6L1xcYnhtbFxcYi8saHRtbDovXFxiaHRtbC8sanNvbjovXFxianNvblxcYi99LHJlc3BvbnNlRmllbGRzOnt4bWw6XCJyZXNwb25zZVhNTFwiLHRleHQ6XCJyZXNwb25zZVRleHRcIixqc29uOlwicmVzcG9uc2VKU09OXCJ9LGNvbnZlcnRlcnM6e1wiKiB0ZXh0XCI6U3RyaW5nLFwidGV4dCBodG1sXCI6ITAsXCJ0ZXh0IGpzb25cIjpKU09OLnBhcnNlLFwidGV4dCB4bWxcIjprLnBhcnNlWE1MfSxmbGF0T3B0aW9uczp7dXJsOiEwLGNvbnRleHQ6ITB9fSxhamF4U2V0dXA6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD96dCh6dChlLGsuYWpheFNldHRpbmdzKSx0KTp6dChrLmFqYXhTZXR0aW5ncyxlKX0sYWpheFByZWZpbHRlcjpCdChJdCksYWpheFRyYW5zcG9ydDpCdChXdCksYWpheDpmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBlJiYodD1lLGU9dm9pZCAwKSx0PXR8fHt9O3ZhciBjLGYscCxuLGQscixoLGcsaSxvLHY9ay5hamF4U2V0dXAoe30sdCkseT12LmNvbnRleHR8fHYsbT12LmNvbnRleHQmJih5Lm5vZGVUeXBlfHx5LmpxdWVyeSk/ayh5KTprLmV2ZW50LHg9ay5EZWZlcnJlZCgpLGI9ay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSx3PXYuc3RhdHVzQ29kZXx8e30sYT17fSxzPXt9LHU9XCJjYW5jZWxlZFwiLFQ9e3JlYWR5U3RhdGU6MCxnZXRSZXNwb25zZUhlYWRlcjpmdW5jdGlvbihlKXt2YXIgdDtpZihoKXtpZighbil7bj17fTt3aGlsZSh0PVB0LmV4ZWMocCkpblt0WzFdLnRvTG93ZXJDYXNlKCkrXCIgXCJdPShuW3RbMV0udG9Mb3dlckNhc2UoKStcIiBcIl18fFtdKS5jb25jYXQodFsyXSl9dD1uW2UudG9Mb3dlckNhc2UoKStcIiBcIl19cmV0dXJuIG51bGw9PXQ/bnVsbDp0LmpvaW4oXCIsIFwiKX0sZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIGg/cDpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG51bGw9PWgmJihlPXNbZS50b0xvd2VyQ2FzZSgpXT1zW2UudG9Mb3dlckNhc2UoKV18fGUsYVtlXT10KSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1oJiYodi5taW1lVHlwZT1lKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGUpaWYoaClULmFsd2F5cyhlW1Quc3RhdHVzXSk7ZWxzZSBmb3IodCBpbiBlKXdbdF09W3dbdF0sZVt0XV07cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKGUpe3ZhciB0PWV8fHU7cmV0dXJuIGMmJmMuYWJvcnQodCksbCgwLHQpLHRoaXN9fTtpZih4LnByb21pc2UoVCksdi51cmw9KChlfHx2LnVybHx8RXQuaHJlZikrXCJcIikucmVwbGFjZShNdCxFdC5wcm90b2NvbCtcIi8vXCIpLHYudHlwZT10Lm1ldGhvZHx8dC50eXBlfHx2Lm1ldGhvZHx8di50eXBlLHYuZGF0YVR5cGVzPSh2LmRhdGFUeXBlfHxcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChSKXx8W1wiXCJdLG51bGw9PXYuY3Jvc3NEb21haW4pe3I9RS5jcmVhdGVFbGVtZW50KFwiYVwiKTt0cnl7ci5ocmVmPXYudXJsLHIuaHJlZj1yLmhyZWYsdi5jcm9zc0RvbWFpbj1GdC5wcm90b2NvbCtcIi8vXCIrRnQuaG9zdCE9ci5wcm90b2NvbCtcIi8vXCIrci5ob3N0fWNhdGNoKGUpe3YuY3Jvc3NEb21haW49ITB9fWlmKHYuZGF0YSYmdi5wcm9jZXNzRGF0YSYmXCJzdHJpbmdcIiE9dHlwZW9mIHYuZGF0YSYmKHYuZGF0YT1rLnBhcmFtKHYuZGF0YSx2LnRyYWRpdGlvbmFsKSksX3QoSXQsdix0LFQpLGgpcmV0dXJuIFQ7Zm9yKGkgaW4oZz1rLmV2ZW50JiZ2Lmdsb2JhbCkmJjA9PWsuYWN0aXZlKysmJmsuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKSx2LnR5cGU9di50eXBlLnRvVXBwZXJDYXNlKCksdi5oYXNDb250ZW50PSFSdC50ZXN0KHYudHlwZSksZj12LnVybC5yZXBsYWNlKEh0LFwiXCIpLHYuaGFzQ29udGVudD92LmRhdGEmJnYucHJvY2Vzc0RhdGEmJjA9PT0odi5jb250ZW50VHlwZXx8XCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSYmKHYuZGF0YT12LmRhdGEucmVwbGFjZShMdCxcIitcIikpOihvPXYudXJsLnNsaWNlKGYubGVuZ3RoKSx2LmRhdGEmJih2LnByb2Nlc3NEYXRhfHxcInN0cmluZ1wiPT10eXBlb2Ygdi5kYXRhKSYmKGYrPShTdC50ZXN0KGYpP1wiJlwiOlwiP1wiKSt2LmRhdGEsZGVsZXRlIHYuZGF0YSksITE9PT12LmNhY2hlJiYoZj1mLnJlcGxhY2UoT3QsXCIkMVwiKSxvPShTdC50ZXN0KGYpP1wiJlwiOlwiP1wiKStcIl89XCIra3QrKytvKSx2LnVybD1mK28pLHYuaWZNb2RpZmllZCYmKGsubGFzdE1vZGlmaWVkW2ZdJiZULnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Nb2RpZmllZC1TaW5jZVwiLGsubGFzdE1vZGlmaWVkW2ZdKSxrLmV0YWdbZl0mJlQuc2V0UmVxdWVzdEhlYWRlcihcIklmLU5vbmUtTWF0Y2hcIixrLmV0YWdbZl0pKSwodi5kYXRhJiZ2Lmhhc0NvbnRlbnQmJiExIT09di5jb250ZW50VHlwZXx8dC5jb250ZW50VHlwZSkmJlQuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLHYuY29udGVudFR5cGUpLFQuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLHYuZGF0YVR5cGVzWzBdJiZ2LmFjY2VwdHNbdi5kYXRhVHlwZXNbMF1dP3YuYWNjZXB0c1t2LmRhdGFUeXBlc1swXV0rKFwiKlwiIT09di5kYXRhVHlwZXNbMF0/XCIsIFwiKyR0K1wiOyBxPTAuMDFcIjpcIlwiKTp2LmFjY2VwdHNbXCIqXCJdKSx2LmhlYWRlcnMpVC5zZXRSZXF1ZXN0SGVhZGVyKGksdi5oZWFkZXJzW2ldKTtpZih2LmJlZm9yZVNlbmQmJighMT09PXYuYmVmb3JlU2VuZC5jYWxsKHksVCx2KXx8aCkpcmV0dXJuIFQuYWJvcnQoKTtpZih1PVwiYWJvcnRcIixiLmFkZCh2LmNvbXBsZXRlKSxULmRvbmUodi5zdWNjZXNzKSxULmZhaWwodi5lcnJvciksYz1fdChXdCx2LHQsVCkpe2lmKFQucmVhZHlTdGF0ZT0xLGcmJm0udHJpZ2dlcihcImFqYXhTZW5kXCIsW1Qsdl0pLGgpcmV0dXJuIFQ7di5hc3luYyYmMDx2LnRpbWVvdXQmJihkPUMuc2V0VGltZW91dChmdW5jdGlvbigpe1QuYWJvcnQoXCJ0aW1lb3V0XCIpfSx2LnRpbWVvdXQpKTt0cnl7aD0hMSxjLnNlbmQoYSxsKX1jYXRjaChlKXtpZihoKXRocm93IGU7bCgtMSxlKX19ZWxzZSBsKC0xLFwiTm8gVHJhbnNwb3J0XCIpO2Z1bmN0aW9uIGwoZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPXQ7aHx8KGg9ITAsZCYmQy5jbGVhclRpbWVvdXQoZCksYz12b2lkIDAscD1yfHxcIlwiLFQucmVhZHlTdGF0ZT0wPGU/NDowLGk9MjAwPD1lJiZlPDMwMHx8MzA0PT09ZSxuJiYocz1mdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscz1lLmNvbnRlbnRzLHU9ZS5kYXRhVHlwZXM7d2hpbGUoXCIqXCI9PT11WzBdKXUuc2hpZnQoKSx2b2lkIDA9PT1yJiYocj1lLm1pbWVUeXBlfHx0LmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKTtpZihyKWZvcihpIGluIHMpaWYoc1tpXSYmc1tpXS50ZXN0KHIpKXt1LnVuc2hpZnQoaSk7YnJlYWt9aWYodVswXWluIG4pbz11WzBdO2Vsc2V7Zm9yKGkgaW4gbil7aWYoIXVbMF18fGUuY29udmVydGVyc1tpK1wiIFwiK3VbMF1dKXtvPWk7YnJlYWt9YXx8KGE9aSl9bz1vfHxhfWlmKG8pcmV0dXJuIG8hPT11WzBdJiZ1LnVuc2hpZnQobyksbltvXX0odixULG4pKSxzPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzLHUsbD17fSxjPWUuZGF0YVR5cGVzLnNsaWNlKCk7aWYoY1sxXSlmb3IoYSBpbiBlLmNvbnZlcnRlcnMpbFthLnRvTG93ZXJDYXNlKCldPWUuY29udmVydGVyc1thXTtvPWMuc2hpZnQoKTt3aGlsZShvKWlmKGUucmVzcG9uc2VGaWVsZHNbb10mJihuW2UucmVzcG9uc2VGaWVsZHNbb11dPXQpLCF1JiZyJiZlLmRhdGFGaWx0ZXImJih0PWUuZGF0YUZpbHRlcih0LGUuZGF0YVR5cGUpKSx1PW8sbz1jLnNoaWZ0KCkpaWYoXCIqXCI9PT1vKW89dTtlbHNlIGlmKFwiKlwiIT09dSYmdSE9PW8pe2lmKCEoYT1sW3UrXCIgXCIrb118fGxbXCIqIFwiK29dKSlmb3IoaSBpbiBsKWlmKChzPWkuc3BsaXQoXCIgXCIpKVsxXT09PW8mJihhPWxbdStcIiBcIitzWzBdXXx8bFtcIiogXCIrc1swXV0pKXshMD09PWE/YT1sW2ldOiEwIT09bFtpXSYmKG89c1swXSxjLnVuc2hpZnQoc1sxXSkpO2JyZWFrfWlmKCEwIT09YSlpZihhJiZlW1widGhyb3dzXCJdKXQ9YSh0KTtlbHNlIHRyeXt0PWEodCl9Y2F0Y2goZSl7cmV0dXJue3N0YXRlOlwicGFyc2VyZXJyb3JcIixlcnJvcjphP2U6XCJObyBjb252ZXJzaW9uIGZyb20gXCIrdStcIiB0byBcIitvfX19cmV0dXJue3N0YXRlOlwic3VjY2Vzc1wiLGRhdGE6dH19KHYscyxULGkpLGk/KHYuaWZNb2RpZmllZCYmKCh1PVQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpKSYmKGsubGFzdE1vZGlmaWVkW2ZdPXUpLCh1PVQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpKSYmKGsuZXRhZ1tmXT11KSksMjA0PT09ZXx8XCJIRUFEXCI9PT12LnR5cGU/bD1cIm5vY29udGVudFwiOjMwND09PWU/bD1cIm5vdG1vZGlmaWVkXCI6KGw9cy5zdGF0ZSxvPXMuZGF0YSxpPSEoYT1zLmVycm9yKSkpOihhPWwsIWUmJmx8fChsPVwiZXJyb3JcIixlPDAmJihlPTApKSksVC5zdGF0dXM9ZSxULnN0YXR1c1RleHQ9KHR8fGwpK1wiXCIsaT94LnJlc29sdmVXaXRoKHksW28sbCxUXSk6eC5yZWplY3RXaXRoKHksW1QsbCxhXSksVC5zdGF0dXNDb2RlKHcpLHc9dm9pZCAwLGcmJm0udHJpZ2dlcihpP1wiYWpheFN1Y2Nlc3NcIjpcImFqYXhFcnJvclwiLFtULHYsaT9vOmFdKSxiLmZpcmVXaXRoKHksW1QsbF0pLGcmJihtLnRyaWdnZXIoXCJhamF4Q29tcGxldGVcIixbVCx2XSksLS1rLmFjdGl2ZXx8ay5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIikpKX1yZXR1cm4gVH0sZ2V0SlNPTjpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGsuZ2V0KGUsdCxuLFwianNvblwiKX0sZ2V0U2NyaXB0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGsuZ2V0KGUsdm9pZCAwLHQsXCJzY3JpcHRcIil9fSksay5lYWNoKFtcImdldFwiLFwicG9zdFwiXSxmdW5jdGlvbihlLGkpe2tbaV09ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIG0odCkmJihyPXJ8fG4sbj10LHQ9dm9pZCAwKSxrLmFqYXgoay5leHRlbmQoe3VybDplLHR5cGU6aSxkYXRhVHlwZTpyLGRhdGE6dCxzdWNjZXNzOm59LGsuaXNQbGFpbk9iamVjdChlKSYmZSkpfX0pLGsuX2V2YWxVcmw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gay5hamF4KHt1cmw6ZSx0eXBlOlwiR0VUXCIsZGF0YVR5cGU6XCJzY3JpcHRcIixjYWNoZTohMCxhc3luYzohMSxnbG9iYWw6ITEsY29udmVydGVyczp7XCJ0ZXh0IHNjcmlwdFwiOmZ1bmN0aW9uKCl7fX0sZGF0YUZpbHRlcjpmdW5jdGlvbihlKXtrLmdsb2JhbEV2YWwoZSx0KX19KX0say5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIHRoaXNbMF0mJihtKGUpJiYoZT1lLmNhbGwodGhpc1swXSkpLHQ9ayhlLHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApLHRoaXNbMF0ucGFyZW50Tm9kZSYmdC5pbnNlcnRCZWZvcmUodGhpc1swXSksdC5tYXAoZnVuY3Rpb24oKXt2YXIgZT10aGlzO3doaWxlKGUuZmlyc3RFbGVtZW50Q2hpbGQpZT1lLmZpcnN0RWxlbWVudENoaWxkO3JldHVybiBlfSkuYXBwZW5kKHRoaXMpKSx0aGlzfSx3cmFwSW5uZXI6ZnVuY3Rpb24obil7cmV0dXJuIG0obik/dGhpcy5lYWNoKGZ1bmN0aW9uKGUpe2sodGhpcykud3JhcElubmVyKG4uY2FsbCh0aGlzLGUpKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlPWsodGhpcyksdD1lLmNvbnRlbnRzKCk7dC5sZW5ndGg/dC53cmFwQWxsKG4pOmUuYXBwZW5kKG4pfSl9LHdyYXA6ZnVuY3Rpb24odCl7dmFyIG49bSh0KTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpe2sodGhpcykud3JhcEFsbChuP3QuY2FsbCh0aGlzLGUpOnQpfSl9LHVud3JhcDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wYXJlbnQoZSkubm90KFwiYm9keVwiKS5lYWNoKGZ1bmN0aW9uKCl7ayh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSksdGhpc319KSxrLmV4cHIucHNldWRvcy5oaWRkZW49ZnVuY3Rpb24oZSl7cmV0dXJuIWsuZXhwci5wc2V1ZG9zLnZpc2libGUoZSl9LGsuZXhwci5wc2V1ZG9zLnZpc2libGU9ZnVuY3Rpb24oZSl7cmV0dXJuISEoZS5vZmZzZXRXaWR0aHx8ZS5vZmZzZXRIZWlnaHR8fGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpfSxrLmFqYXhTZXR0aW5ncy54aHI9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG5ldyBDLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGUpe319O3ZhciBVdD17MDoyMDAsMTIyMzoyMDR9LFh0PWsuYWpheFNldHRpbmdzLnhocigpO3kuY29ycz0hIVh0JiZcIndpdGhDcmVkZW50aWFsc1wiaW4gWHQseS5hamF4PVh0PSEhWHQsay5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKGkpe3ZhciBvLGE7aWYoeS5jb3JzfHxYdCYmIWkuY3Jvc3NEb21haW4pcmV0dXJue3NlbmQ6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPWkueGhyKCk7aWYoci5vcGVuKGkudHlwZSxpLnVybCxpLmFzeW5jLGkudXNlcm5hbWUsaS5wYXNzd29yZCksaS54aHJGaWVsZHMpZm9yKG4gaW4gaS54aHJGaWVsZHMpcltuXT1pLnhockZpZWxkc1tuXTtmb3IobiBpbiBpLm1pbWVUeXBlJiZyLm92ZXJyaWRlTWltZVR5cGUmJnIub3ZlcnJpZGVNaW1lVHlwZShpLm1pbWVUeXBlKSxpLmNyb3NzRG9tYWlufHxlW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXXx8KGVbXCJYLVJlcXVlc3RlZC1XaXRoXCJdPVwiWE1MSHR0cFJlcXVlc3RcIiksZSlyLnNldFJlcXVlc3RIZWFkZXIobixlW25dKTtvPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe28mJihvPWE9ci5vbmxvYWQ9ci5vbmVycm9yPXIub25hYm9ydD1yLm9udGltZW91dD1yLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLFwiYWJvcnRcIj09PWU/ci5hYm9ydCgpOlwiZXJyb3JcIj09PWU/XCJudW1iZXJcIiE9dHlwZW9mIHIuc3RhdHVzP3QoMCxcImVycm9yXCIpOnQoci5zdGF0dXMsci5zdGF0dXNUZXh0KTp0KFV0W3Iuc3RhdHVzXXx8ci5zdGF0dXMsci5zdGF0dXNUZXh0LFwidGV4dFwiIT09KHIucmVzcG9uc2VUeXBlfHxcInRleHRcIil8fFwic3RyaW5nXCIhPXR5cGVvZiByLnJlc3BvbnNlVGV4dD97YmluYXJ5OnIucmVzcG9uc2V9Ont0ZXh0OnIucmVzcG9uc2VUZXh0fSxyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9fSxyLm9ubG9hZD1vKCksYT1yLm9uZXJyb3I9ci5vbnRpbWVvdXQ9byhcImVycm9yXCIpLHZvaWQgMCE9PXIub25hYm9ydD9yLm9uYWJvcnQ9YTpyLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQ9PT1yLnJlYWR5U3RhdGUmJkMuc2V0VGltZW91dChmdW5jdGlvbigpe28mJmEoKX0pfSxvPW8oXCJhYm9ydFwiKTt0cnl7ci5zZW5kKGkuaGFzQ29udGVudCYmaS5kYXRhfHxudWxsKX1jYXRjaChlKXtpZihvKXRocm93IGV9fSxhYm9ydDpmdW5jdGlvbigpe28mJm8oKX19fSksay5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uKGUpe2UuY3Jvc3NEb21haW4mJihlLmNvbnRlbnRzLnNjcmlwdD0hMSl9KSxrLmFqYXhTZXR1cCh7YWNjZXB0czp7c2NyaXB0OlwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIn0sY29udGVudHM6e3NjcmlwdDovXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi99LGNvbnZlcnRlcnM6e1widGV4dCBzY3JpcHRcIjpmdW5jdGlvbihlKXtyZXR1cm4gay5nbG9iYWxFdmFsKGUpLGV9fX0pLGsuYWpheFByZWZpbHRlcihcInNjcmlwdFwiLGZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUuY2FjaGUmJihlLmNhY2hlPSExKSxlLmNyb3NzRG9tYWluJiYoZS50eXBlPVwiR0VUXCIpfSksay5hamF4VHJhbnNwb3J0KFwic2NyaXB0XCIsZnVuY3Rpb24obil7dmFyIHIsaTtpZihuLmNyb3NzRG9tYWlufHxuLnNjcmlwdEF0dHJzKXJldHVybntzZW5kOmZ1bmN0aW9uKGUsdCl7cj1rKFwiPHNjcmlwdD5cIikuYXR0cihuLnNjcmlwdEF0dHJzfHx7fSkucHJvcCh7Y2hhcnNldDpuLnNjcmlwdENoYXJzZXQsc3JjOm4udXJsfSkub24oXCJsb2FkIGVycm9yXCIsaT1mdW5jdGlvbihlKXtyLnJlbW92ZSgpLGk9bnVsbCxlJiZ0KFwiZXJyb3JcIj09PWUudHlwZT80MDQ6MjAwLGUudHlwZSl9KSxFLmhlYWQuYXBwZW5kQ2hpbGQoclswXSl9LGFib3J0OmZ1bmN0aW9uKCl7aSYmaSgpfX19KTt2YXIgVnQsR3Q9W10sWXQ9Lyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztrLmFqYXhTZXR1cCh7anNvbnA6XCJjYWxsYmFja1wiLGpzb25wQ2FsbGJhY2s6ZnVuY3Rpb24oKXt2YXIgZT1HdC5wb3AoKXx8ay5leHBhbmRvK1wiX1wiK2t0Kys7cmV0dXJuIHRoaXNbZV09ITAsZX19KSxrLmFqYXhQcmVmaWx0ZXIoXCJqc29uIGpzb25wXCIsZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPSExIT09ZS5qc29ucCYmKFl0LnRlc3QoZS51cmwpP1widXJsXCI6XCJzdHJpbmdcIj09dHlwZW9mIGUuZGF0YSYmMD09PShlLmNvbnRlbnRUeXBlfHxcIlwiKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpJiZZdC50ZXN0KGUuZGF0YSkmJlwiZGF0YVwiKTtpZihhfHxcImpzb25wXCI9PT1lLmRhdGFUeXBlc1swXSlyZXR1cm4gcj1lLmpzb25wQ2FsbGJhY2s9bShlLmpzb25wQ2FsbGJhY2spP2UuanNvbnBDYWxsYmFjaygpOmUuanNvbnBDYWxsYmFjayxhP2VbYV09ZVthXS5yZXBsYWNlKFl0LFwiJDFcIityKTohMSE9PWUuanNvbnAmJihlLnVybCs9KFN0LnRlc3QoZS51cmwpP1wiJlwiOlwiP1wiKStlLmpzb25wK1wiPVwiK3IpLGUuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdPWZ1bmN0aW9uKCl7cmV0dXJuIG98fGsuZXJyb3IocitcIiB3YXMgbm90IGNhbGxlZFwiKSxvWzBdfSxlLmRhdGFUeXBlc1swXT1cImpzb25cIixpPUNbcl0sQ1tyXT1mdW5jdGlvbigpe289YXJndW1lbnRzfSxuLmFsd2F5cyhmdW5jdGlvbigpe3ZvaWQgMD09PWk/ayhDKS5yZW1vdmVQcm9wKHIpOkNbcl09aSxlW3JdJiYoZS5qc29ucENhbGxiYWNrPXQuanNvbnBDYWxsYmFjayxHdC5wdXNoKHIpKSxvJiZtKGkpJiZpKG9bMF0pLG89aT12b2lkIDB9KSxcInNjcmlwdFwifSkseS5jcmVhdGVIVE1MRG9jdW1lbnQ9KChWdD1FLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKS5ib2R5KS5pbm5lckhUTUw9XCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiLDI9PT1WdC5jaGlsZE5vZGVzLmxlbmd0aCksay5wYXJzZUhUTUw9ZnVuY3Rpb24oZSx0LG4pe3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlP1tdOihcImJvb2xlYW5cIj09dHlwZW9mIHQmJihuPXQsdD0hMSksdHx8KHkuY3JlYXRlSFRNTERvY3VtZW50Pygocj0odD1FLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKSkuY3JlYXRlRWxlbWVudChcImJhc2VcIikpLmhyZWY9RS5sb2NhdGlvbi5ocmVmLHQuaGVhZC5hcHBlbmRDaGlsZChyKSk6dD1FKSxvPSFuJiZbXSwoaT1ELmV4ZWMoZSkpP1t0LmNyZWF0ZUVsZW1lbnQoaVsxXSldOihpPXdlKFtlXSx0LG8pLG8mJm8ubGVuZ3RoJiZrKG8pLnJlbW92ZSgpLGsubWVyZ2UoW10saS5jaGlsZE5vZGVzKSkpO3ZhciByLGksb30say5mbi5sb2FkPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYT10aGlzLHM9ZS5pbmRleE9mKFwiIFwiKTtyZXR1cm4tMTxzJiYocj1tdChlLnNsaWNlKHMpKSxlPWUuc2xpY2UoMCxzKSksbSh0KT8obj10LHQ9dm9pZCAwKTp0JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmKGk9XCJQT1NUXCIpLDA8YS5sZW5ndGgmJmsuYWpheCh7dXJsOmUsdHlwZTppfHxcIkdFVFwiLGRhdGFUeXBlOlwiaHRtbFwiLGRhdGE6dH0pLmRvbmUoZnVuY3Rpb24oZSl7bz1hcmd1bWVudHMsYS5odG1sKHI/ayhcIjxkaXY+XCIpLmFwcGVuZChrLnBhcnNlSFRNTChlKSkuZmluZChyKTplKX0pLmFsd2F5cyhuJiZmdW5jdGlvbihlLHQpe2EuZWFjaChmdW5jdGlvbigpe24uYXBwbHkodGhpcyxvfHxbZS5yZXNwb25zZVRleHQsdCxlXSl9KX0pLHRoaXN9LGsuZWFjaChbXCJhamF4U3RhcnRcIixcImFqYXhTdG9wXCIsXCJhamF4Q29tcGxldGVcIixcImFqYXhFcnJvclwiLFwiYWpheFN1Y2Nlc3NcIixcImFqYXhTZW5kXCJdLGZ1bmN0aW9uKGUsdCl7ay5mblt0XT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5vbih0LGUpfX0pLGsuZXhwci5wc2V1ZG9zLmFuaW1hdGVkPWZ1bmN0aW9uKHQpe3JldHVybiBrLmdyZXAoay50aW1lcnMsZnVuY3Rpb24oZSl7cmV0dXJuIHQ9PT1lLmVsZW19KS5sZW5ndGh9LGsub2Zmc2V0PXtzZXRPZmZzZXQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsPWsuY3NzKGUsXCJwb3NpdGlvblwiKSxjPWsoZSksZj17fTtcInN0YXRpY1wiPT09bCYmKGUuc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiKSxzPWMub2Zmc2V0KCksbz1rLmNzcyhlLFwidG9wXCIpLHU9ay5jc3MoZSxcImxlZnRcIiksKFwiYWJzb2x1dGVcIj09PWx8fFwiZml4ZWRcIj09PWwpJiYtMTwobyt1KS5pbmRleE9mKFwiYXV0b1wiKT8oYT0ocj1jLnBvc2l0aW9uKCkpLnRvcCxpPXIubGVmdCk6KGE9cGFyc2VGbG9hdChvKXx8MCxpPXBhcnNlRmxvYXQodSl8fDApLG0odCkmJih0PXQuY2FsbChlLG4say5leHRlbmQoe30scykpKSxudWxsIT10LnRvcCYmKGYudG9wPXQudG9wLXMudG9wK2EpLG51bGwhPXQubGVmdCYmKGYubGVmdD10LmxlZnQtcy5sZWZ0K2kpLFwidXNpbmdcImluIHQ/dC51c2luZy5jYWxsKGUsZik6Yy5jc3MoZil9fSxrLmZuLmV4dGVuZCh7b2Zmc2V0OmZ1bmN0aW9uKHQpe2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PXQ/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oZSl7ay5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsdCxlKX0pO3ZhciBlLG4scj10aGlzWzBdO3JldHVybiByP3IuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGg/KGU9ci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPXIub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldyx7dG9wOmUudG9wK24ucGFnZVlPZmZzZXQsbGVmdDplLmxlZnQrbi5wYWdlWE9mZnNldH0pOnt0b3A6MCxsZWZ0OjB9OnZvaWQgMH0scG9zaXRpb246ZnVuY3Rpb24oKXtpZih0aGlzWzBdKXt2YXIgZSx0LG4scj10aGlzWzBdLGk9e3RvcDowLGxlZnQ6MH07aWYoXCJmaXhlZFwiPT09ay5jc3MocixcInBvc2l0aW9uXCIpKXQ9ci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtlbHNle3Q9dGhpcy5vZmZzZXQoKSxuPXIub3duZXJEb2N1bWVudCxlPXIub2Zmc2V0UGFyZW50fHxuLmRvY3VtZW50RWxlbWVudDt3aGlsZShlJiYoZT09PW4uYm9keXx8ZT09PW4uZG9jdW1lbnRFbGVtZW50KSYmXCJzdGF0aWNcIj09PWsuY3NzKGUsXCJwb3NpdGlvblwiKSllPWUucGFyZW50Tm9kZTtlJiZlIT09ciYmMT09PWUubm9kZVR5cGUmJigoaT1rKGUpLm9mZnNldCgpKS50b3ArPWsuY3NzKGUsXCJib3JkZXJUb3BXaWR0aFwiLCEwKSxpLmxlZnQrPWsuY3NzKGUsXCJib3JkZXJMZWZ0V2lkdGhcIiwhMCkpfXJldHVybnt0b3A6dC50b3AtaS50b3Atay5jc3MocixcIm1hcmdpblRvcFwiLCEwKSxsZWZ0OnQubGVmdC1pLmxlZnQtay5jc3MocixcIm1hcmdpbkxlZnRcIiwhMCl9fX0sb2Zmc2V0UGFyZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vZmZzZXRQYXJlbnQ7d2hpbGUoZSYmXCJzdGF0aWNcIj09PWsuY3NzKGUsXCJwb3NpdGlvblwiKSllPWUub2Zmc2V0UGFyZW50O3JldHVybiBlfHxpZX0pfX0pLGsuZWFjaCh7c2Nyb2xsTGVmdDpcInBhZ2VYT2Zmc2V0XCIsc2Nyb2xsVG9wOlwicGFnZVlPZmZzZXRcIn0sZnVuY3Rpb24odCxpKXt2YXIgbz1cInBhZ2VZT2Zmc2V0XCI9PT1pO2suZm5bdF09ZnVuY3Rpb24oZSl7cmV0dXJuIF8odGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYoeChlKT9yPWU6OT09PWUubm9kZVR5cGUmJihyPWUuZGVmYXVsdFZpZXcpLHZvaWQgMD09PW4pcmV0dXJuIHI/cltpXTplW3RdO3I/ci5zY3JvbGxUbyhvP3IucGFnZVhPZmZzZXQ6bixvP246ci5wYWdlWU9mZnNldCk6ZVt0XT1ufSx0LGUsYXJndW1lbnRzLmxlbmd0aCl9fSksay5lYWNoKFtcInRvcFwiLFwibGVmdFwiXSxmdW5jdGlvbihlLG4pe2suY3NzSG9va3Nbbl09emUoeS5waXhlbFBvc2l0aW9uLGZ1bmN0aW9uKGUsdCl7aWYodClyZXR1cm4gdD1fZShlLG4pLCRlLnRlc3QodCk/ayhlKS5wb3NpdGlvbigpW25dK1wicHhcIjp0fSl9KSxrLmVhY2goe0hlaWdodDpcImhlaWdodFwiLFdpZHRoOlwid2lkdGhcIn0sZnVuY3Rpb24oYSxzKXtrLmVhY2goe3BhZGRpbmc6XCJpbm5lclwiK2EsY29udGVudDpzLFwiXCI6XCJvdXRlclwiK2F9LGZ1bmN0aW9uKHIsbyl7ay5mbltvXT1mdW5jdGlvbihlLHQpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGgmJihyfHxcImJvb2xlYW5cIiE9dHlwZW9mIGUpLGk9cnx8KCEwPT09ZXx8ITA9PT10P1wibWFyZ2luXCI6XCJib3JkZXJcIik7cmV0dXJuIF8odGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHI7cmV0dXJuIHgoZSk/MD09PW8uaW5kZXhPZihcIm91dGVyXCIpP2VbXCJpbm5lclwiK2FdOmUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W1wiY2xpZW50XCIrYV06OT09PWUubm9kZVR5cGU/KHI9ZS5kb2N1bWVudEVsZW1lbnQsTWF0aC5tYXgoZS5ib2R5W1wic2Nyb2xsXCIrYV0scltcInNjcm9sbFwiK2FdLGUuYm9keVtcIm9mZnNldFwiK2FdLHJbXCJvZmZzZXRcIithXSxyW1wiY2xpZW50XCIrYV0pKTp2b2lkIDA9PT1uP2suY3NzKGUsdCxpKTprLnN0eWxlKGUsdCxuLGkpfSxzLG4/ZTp2b2lkIDAsbil9fSl9KSxrLmVhY2goXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGUsbil7ay5mbltuXT1mdW5jdGlvbihlLHQpe3JldHVybiAwPGFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vbihuLG51bGwsZSx0KTp0aGlzLnRyaWdnZXIobil9fSksay5mbi5leHRlbmQoe2hvdmVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubW91c2VlbnRlcihlKS5tb3VzZWxlYXZlKHR8fGUpfX0pLGsuZm4uZXh0ZW5kKHtiaW5kOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5vbihlLG51bGwsdCxuKX0sdW5iaW5kOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMub2ZmKGUsbnVsbCx0KX0sZGVsZWdhdGU6ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIHRoaXMub24odCxlLG4scil9LHVuZGVsZWdhdGU6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLm9mZihlLFwiKipcIik6dGhpcy5vZmYodCxlfHxcIioqXCIsbil9fSksay5wcm94eT1mdW5jdGlvbihlLHQpe3ZhciBuLHIsaTtpZihcInN0cmluZ1wiPT10eXBlb2YgdCYmKG49ZVt0XSx0PWUsZT1uKSxtKGUpKXJldHVybiByPXMuY2FsbChhcmd1bWVudHMsMiksKGk9ZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0fHx0aGlzLHIuY29uY2F0KHMuY2FsbChhcmd1bWVudHMpKSl9KS5ndWlkPWUuZ3VpZD1lLmd1aWR8fGsuZ3VpZCsrLGl9LGsuaG9sZFJlYWR5PWZ1bmN0aW9uKGUpe2U/ay5yZWFkeVdhaXQrKzprLnJlYWR5KCEwKX0say5pc0FycmF5PUFycmF5LmlzQXJyYXksay5wYXJzZUpTT049SlNPTi5wYXJzZSxrLm5vZGVOYW1lPUEsay5pc0Z1bmN0aW9uPW0say5pc1dpbmRvdz14LGsuY2FtZWxDYXNlPVYsay50eXBlPXcsay5ub3c9RGF0ZS5ub3csay5pc051bWVyaWM9ZnVuY3Rpb24oZSl7dmFyIHQ9ay50eXBlKGUpO3JldHVybihcIm51bWJlclwiPT09dHx8XCJzdHJpbmdcIj09PXQpJiYhaXNOYU4oZS1wYXJzZUZsb2F0KGUpKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoXCJqcXVlcnlcIixbXSxmdW5jdGlvbigpe3JldHVybiBrfSk7dmFyIFF0PUMualF1ZXJ5LEp0PUMuJDtyZXR1cm4gay5ub0NvbmZsaWN0PWZ1bmN0aW9uKGUpe3JldHVybiBDLiQ9PT1rJiYoQy4kPUp0KSxlJiZDLmpRdWVyeT09PWsmJihDLmpRdWVyeT1RdCksa30sZXx8KEMualF1ZXJ5PUMuJD1rKSxrfSk7XHJcbi8qKiFcclxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxyXG4gKiBAdmVyc2lvbiAxLjE0LjdcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IChjKSAyMDE2IEZlZGVyaWNvIFppdm9sbyBhbmQgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXHJcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcclxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxyXG4gKiBTT0ZUV0FSRS5cclxuICovXHJcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxyXG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XHJcblx0KGdsb2JhbC5Qb3BwZXIgPSBmYWN0b3J5KCkpO1xyXG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xyXG5cclxudmFyIGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcclxudmFyIHRpbWVvdXREdXJhdGlvbiA9IDA7XHJcbmZvciAodmFyIGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XHJcbiAgICB0aW1lb3V0RHVyYXRpb24gPSAxO1xyXG4gICAgYnJlYWs7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xyXG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcclxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKGNhbGxlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjYWxsZWQgPSB0cnVlO1xyXG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICBjYWxsZWQgPSBmYWxzZTtcclxuICAgICAgZm4oKTtcclxuICAgIH0pO1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRhc2tEZWJvdW5jZShmbikge1xyXG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcclxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCFzY2hlZHVsZWQpIHtcclxuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XHJcbiAgICAgICAgZm4oKTtcclxuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xyXG5cclxuLyoqXHJcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxyXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cclxuKlxyXG4qIEBtZXRob2RcclxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXHJcbiogQGFyZ3VtZW50IHtGdW5jdGlvbn0gZm5cclxuKiBAcmV0dXJucyB7RnVuY3Rpb259XHJcbiovXHJcbnZhciBkZWJvdW5jZSA9IHN1cHBvcnRzTWljcm9UYXNrcyA/IG1pY3JvdGFza0RlYm91bmNlIDogdGFza0RlYm91bmNlO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uXHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2tcclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cclxuICovXHJcbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XHJcbiAgdmFyIGdldFR5cGUgPSB7fTtcclxuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IENTUyBjb21wdXRlZCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQGFyZ3VtZW50IHtFZW1lbnR9IGVsZW1lbnRcclxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHkpIHtcclxuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxyXG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XHJcbiAgdmFyIGNzcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xyXG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50XHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcclxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XHJcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgfVxyXG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XHJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xyXG4gIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdFxyXG4gIGlmICghZWxlbWVudCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XHJcbiAgfVxyXG5cclxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcclxuICAgIGNhc2UgJ0hUTUwnOlxyXG4gICAgY2FzZSAnQk9EWSc6XHJcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcclxuICAgIGNhc2UgJyNkb2N1bWVudCc6XHJcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XHJcbiAgfVxyXG5cclxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcclxuXHJcbiAgdmFyIF9nZXRTdHlsZUNvbXB1dGVkUHJvcCA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KSxcclxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXHJcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsXHJcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1k7XHJcblxyXG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xyXG59XHJcblxyXG52YXIgaXNJRTExID0gaXNCcm93c2VyICYmICEhKHdpbmRvdy5NU0lucHV0TWV0aG9kQ29udGV4dCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpO1xyXG52YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG5cclxuLyoqXHJcbiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXJcclxuICogQG1ldGhvZFxyXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0lFKHZlcnNpb24pIHtcclxuICBpZiAodmVyc2lvbiA9PT0gMTEpIHtcclxuICAgIHJldHVybiBpc0lFMTE7XHJcbiAgfVxyXG4gIGlmICh2ZXJzaW9uID09PSAxMCkge1xyXG4gICAgcmV0dXJuIGlzSUUxMDtcclxuICB9XHJcbiAgcmV0dXJuIGlzSUUxMSB8fCBpc0lFMTA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBvZmZzZXQgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcclxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcclxuICovXHJcbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XHJcbiAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgdmFyIG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcclxuXHJcbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcclxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgbnVsbDtcclxuICAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudFxyXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgPT09IG5vT2Zmc2V0UGFyZW50ICYmIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSB7XHJcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XHJcbiAgfVxyXG5cclxuICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xyXG5cclxuICBpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgLy8gLm9mZnNldFBhcmVudCB3aWxsIHJldHVybiB0aGUgY2xvc2VzdCBUSCwgVEQgb3IgVEFCTEUgaW4gY2FzZVxyXG4gIC8vIG5vIG9mZnNldFBhcmVudCBpcyBwcmVzZW50LCBJIGhhdGUgdGhpcyBqb2IuLi5cclxuICBpZiAoWydUSCcsICdURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XHJcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XHJcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcclxuXHJcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXHJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcclxuICovXHJcbmZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xyXG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcclxuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbm9kZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZpbmRzIHRoZSBvZmZzZXQgcGFyZW50IGNvbW1vbiB0byB0aGUgdHdvIHByb3ZpZGVkIG5vZGVzXHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQxXHJcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcclxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XHJcbiAqL1xyXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xyXG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxyXG4gIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHtcclxuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cclxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcclxuICB2YXIgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XHJcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcclxuXHJcbiAgLy8gR2V0IGNvbW1vbiBhbmNlc3RvciBjb250YWluZXJcclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcclxuICByYW5nZS5zZXRFbmQoZW5kLCAwKTtcclxuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuXHJcbiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudFxyXG5cclxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XHJcbiAgICBpZiAoaXNPZmZzZXRDb250YWluZXIoY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7XHJcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcclxuICB9XHJcblxyXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcclxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XHJcbiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7XHJcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcclxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcclxuICovXHJcbmZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50KSB7XHJcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xyXG5cclxuICB2YXIgdXBwZXJTaWRlID0gc2lkZSA9PT0gJ3RvcCcgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JztcclxuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xyXG5cclxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XHJcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XHJcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudFt1cHBlclNpZGVdO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTtcclxufVxyXG5cclxuLypcclxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcclxuICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzXHJcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxyXG4gKi9cclxuZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50KSB7XHJcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcclxuXHJcbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XHJcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcclxuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcclxuICByZWN0LnRvcCArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcclxuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcclxuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xyXG4gIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xyXG4gIHJldHVybiByZWN0O1xyXG59XHJcblxyXG4vKlxyXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xyXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXHJcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcclxuICovXHJcblxyXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcclxuICB2YXIgc2lkZUEgPSBheGlzID09PSAneCcgPyAnTGVmdCcgOiAnVG9wJztcclxuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xyXG5cclxuICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQSArICdXaWR0aCddLCAxMCkgKyBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVCICsgJ1dpZHRoJ10sIDEwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U2l6ZShheGlzLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSB7XHJcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IHBhcnNlSW50KGh0bWxbJ29mZnNldCcgKyBheGlzXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ1RvcCcgOiAnTGVmdCcpXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnKV0pIDogMCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKGRvY3VtZW50KSB7XHJcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG4gIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRSgxMCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksXHJcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxyXG4gIH07XHJcbn1cclxuXHJcbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcclxuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcclxuICB9XHJcbn07XHJcblxyXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XHJcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcclxuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xyXG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xyXG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcclxuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xyXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xyXG4gIH07XHJcbn0oKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7XHJcbiAgaWYgKGtleSBpbiBvYmopIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xyXG4gICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgd3JpdGFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxuXHJcbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xyXG5cclxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcclxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcclxuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGFyZ2V0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcclxuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHtcclxuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxyXG4gICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxyXG4gKiBAcmV0dXJuIHtPYmplY3R9IGNsaWVudCByZWN0XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xyXG4gIHZhciByZWN0ID0ge307XHJcblxyXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcclxuICAvLyBjb25zaWRlcmVkIGluIERPTSBpbiBzb21lIGNpcmN1bXN0YW5jZXMuLi5cclxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXHJcbiAgdHJ5IHtcclxuICAgIGlmIChpc0lFKDEwKSkge1xyXG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XHJcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XHJcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcclxuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XHJcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcclxuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZSkge31cclxuXHJcbiAgdmFyIHJlc3VsdCA9IHtcclxuICAgIGxlZnQ6IHJlY3QubGVmdCxcclxuICAgIHRvcDogcmVjdC50b3AsXHJcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcclxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxyXG4gIH07XHJcblxyXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcclxuICB2YXIgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcyhlbGVtZW50Lm93bmVyRG9jdW1lbnQpIDoge307XHJcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQucmlnaHQgLSByZXN1bHQubGVmdDtcclxuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5ib3R0b20gLSByZXN1bHQudG9wO1xyXG5cclxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XHJcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcclxuXHJcbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcclxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcclxuICBpZiAoaG9yaXpTY3JvbGxiYXIgfHwgdmVydFNjcm9sbGJhcikge1xyXG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcclxuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcclxuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xyXG5cclxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcclxuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcclxuICB9XHJcblxyXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShjaGlsZHJlbiwgcGFyZW50KSB7XHJcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xyXG5cclxuICB2YXIgaXNJRTEwID0gaXNJRSgxMCk7XHJcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xyXG4gIHZhciBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xyXG4gIHZhciBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XHJcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XHJcblxyXG4gIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTtcclxuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCwgMTApO1xyXG4gIHZhciBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgsIDEwKTtcclxuXHJcbiAgLy8gSW4gY2FzZXMgd2hlcmUgdGhlIHBhcmVudCBpcyBmaXhlZCwgd2UgbXVzdCBpZ25vcmUgbmVnYXRpdmUgc2Nyb2xsIGluIG9mZnNldCBjYWxjXHJcbiAgaWYgKGZpeGVkUG9zaXRpb24gJiYgaXNIVE1MKSB7XHJcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcclxuICAgIHBhcmVudFJlY3QubGVmdCA9IE1hdGgubWF4KHBhcmVudFJlY3QubGVmdCwgMCk7XHJcbiAgfVxyXG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XHJcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxyXG4gICAgbGVmdDogY2hpbGRyZW5SZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgLSBib3JkZXJMZWZ0V2lkdGgsXHJcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxyXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0XHJcbiAgfSk7XHJcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xyXG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XHJcblxyXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxyXG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xyXG4gIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluXHJcbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxyXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xyXG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCwgMTApO1xyXG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7XHJcblxyXG4gICAgb2Zmc2V0cy50b3AgLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XHJcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcclxuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xyXG4gICAgb2Zmc2V0cy5yaWdodCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xyXG5cclxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxyXG4gICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XHJcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcclxuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb2Zmc2V0cztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcclxuICB2YXIgZXhjbHVkZVNjcm9sbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XHJcblxyXG4gIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoZWxlbWVudCwgaHRtbCk7XHJcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XHJcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XHJcblxyXG4gIHZhciBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XHJcbiAgdmFyIHNjcm9sbExlZnQgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sLCAnbGVmdCcpIDogMDtcclxuXHJcbiAgdmFyIG9mZnNldCA9IHtcclxuICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLFxyXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxyXG4gICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgaGVpZ2h0OiBoZWlnaHRcclxuICB9O1xyXG5cclxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcclxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcclxuICovXHJcbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xyXG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XHJcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgdmFyIHBhcmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xyXG4gIGlmICghcGFyZW50Tm9kZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICByZXR1cm4gaXNGaXhlZChwYXJlbnROb2RlKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZpbmRzIHRoZSBmaXJzdCBwYXJlbnQgb2YgYW4gZWxlbWVudCB0aGF0IGhhcyBhIHRyYW5zZm9ybWVkIHByb3BlcnR5IGRlZmluZWRcclxuICogQG1ldGhvZFxyXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXHJcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gZmlyc3QgdHJhbnNmb3JtZWQgcGFyZW50IG9yIGRvY3VtZW50RWxlbWVudFxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQoZWxlbWVudCkge1xyXG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxyXG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzSUUoKSkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICB9XHJcbiAgdmFyIGVsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gIHdoaWxlIChlbCAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWwsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnKSB7XHJcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XHJcbiAgfVxyXG4gIHJldHVybiBlbCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkUG9zaXRpb24gLSBJcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkge1xyXG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcclxuXHJcbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcclxuXHJcbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xyXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XHJcblxyXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXHJcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7XHJcbiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcclxuICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDtcclxuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcclxuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTtcclxuICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcclxuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcclxuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGJvdW5kYXJpZXNOb2RlLCBvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xyXG5cclxuICAgIC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvblxyXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xyXG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMocG9wcGVyLm93bmVyRG9jdW1lbnQpLFxyXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcclxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xyXG5cclxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcclxuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcclxuICAgICAgYm91bmRhcmllcy5sZWZ0ICs9IG9mZnNldHMubGVmdCAtIG9mZnNldHMubWFyZ2luTGVmdDtcclxuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gZm9yIGFsbCB0aGUgb3RoZXIgRE9NIGVsZW1lbnRzLCB0aGlzIG9uZSBpcyBnb29kXHJcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQWRkIHBhZGRpbmdzXHJcbiAgcGFkZGluZyA9IHBhZGRpbmcgfHwgMDtcclxuICB2YXIgaXNQYWRkaW5nTnVtYmVyID0gdHlwZW9mIHBhZGRpbmcgPT09ICdudW1iZXInO1xyXG4gIGJvdW5kYXJpZXMubGVmdCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5sZWZ0IHx8IDA7XHJcbiAgYm91bmRhcmllcy50b3AgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wIHx8IDA7XHJcbiAgYm91bmRhcmllcy5yaWdodCAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5yaWdodCB8fCAwO1xyXG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmJvdHRvbSB8fCAwO1xyXG5cclxuICByZXR1cm4gYm91bmRhcmllcztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QXJlYShfcmVmKSB7XHJcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcclxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XHJcblxyXG4gIHJldHVybiB3aWR0aCAqIGhlaWdodDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcclxuICogYXZhaWxhYmxlIHNwYWNlLlxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChwbGFjZW1lbnQsIHJlZlJlY3QsIHBvcHBlciwgcmVmZXJlbmNlLCBib3VuZGFyaWVzRWxlbWVudCkge1xyXG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xyXG5cclxuICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2F1dG8nKSA9PT0gLTEpIHtcclxuICAgIHJldHVybiBwbGFjZW1lbnQ7XHJcbiAgfVxyXG5cclxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcclxuXHJcbiAgdmFyIHJlY3RzID0ge1xyXG4gICAgdG9wOiB7XHJcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxyXG4gICAgICBoZWlnaHQ6IHJlZlJlY3QudG9wIC0gYm91bmRhcmllcy50b3BcclxuICAgIH0sXHJcbiAgICByaWdodDoge1xyXG4gICAgICB3aWR0aDogYm91bmRhcmllcy5yaWdodCAtIHJlZlJlY3QucmlnaHQsXHJcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcclxuICAgIH0sXHJcbiAgICBib3R0b206IHtcclxuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXHJcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5ib3R0b20gLSByZWZSZWN0LmJvdHRvbVxyXG4gICAgfSxcclxuICAgIGxlZnQ6IHtcclxuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcclxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcclxuICAgICAga2V5OiBrZXlcclxuICAgIH0sIHJlY3RzW2tleV0sIHtcclxuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKVxyXG4gICAgfSk7XHJcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgcmV0dXJuIGIuYXJlYSAtIGEuYXJlYTtcclxuICB9KTtcclxuXHJcbiAgdmFyIGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XHJcbiAgICB2YXIgd2lkdGggPSBfcmVmMi53aWR0aCxcclxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XHJcbiAgICByZXR1cm4gd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0O1xyXG4gIH0pO1xyXG5cclxuICB2YXIgY29tcHV0ZWRQbGFjZW1lbnQgPSBmaWx0ZXJlZEFyZWFzLmxlbmd0aCA+IDAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleSA6IHNvcnRlZEFyZWFzWzBdLmtleTtcclxuXHJcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xyXG5cclxuICByZXR1cm4gY29tcHV0ZWRQbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcclxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xyXG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xyXG5cclxuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xyXG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKVxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7XHJcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcclxuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XHJcbiAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20gfHwgMCk7XHJcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0IHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQgfHwgMCk7XHJcbiAgdmFyIHJlc3VsdCA9IHtcclxuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcclxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4XHJcbiAgfTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XHJcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcclxuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xyXG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyXHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxyXG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0UG9wcGVyT2Zmc2V0cyhwb3BwZXIsIHJlZmVyZW5jZU9mZnNldHMsIHBsYWNlbWVudCkge1xyXG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xyXG5cclxuICAvLyBHZXQgcG9wcGVyIG5vZGUgc2l6ZXNcclxuICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTtcclxuXHJcbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxyXG4gIHZhciBwb3BwZXJPZmZzZXRzID0ge1xyXG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXHJcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0XHJcbiAgfTtcclxuXHJcbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxyXG4gIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcclxuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XHJcbiAgdmFyIHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XHJcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcclxuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcclxuXHJcbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW21haW5TaWRlXSArIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcclxuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XHJcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcclxufVxyXG5cclxuLyoqXHJcbiAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheVxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXHJcbiAqIEBhcmd1bWVudCBwcm9wXHJcbiAqIEBhcmd1bWVudCB2YWx1ZVxyXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxyXG4gKi9cclxuZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XHJcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxyXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xyXG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcclxuICB9XHJcblxyXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXHJcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcclxuICogQGFyZ3VtZW50IHByb3BcclxuICogQGFyZ3VtZW50IHZhbHVlXHJcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXHJcbiAqL1xyXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xyXG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxyXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XHJcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChmdW5jdGlvbiAoY3VyKSB7XHJcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxyXG4gIHZhciBtYXRjaCA9IGZpbmQoYXJyLCBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTtcclxuICB9KTtcclxuICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpO1xyXG59XHJcblxyXG4vKipcclxuICogTG9vcCB0cm91Z2ggdGhlIGxpc3Qgb2YgbW9kaWZpZXJzIGFuZCBydW4gdGhlbSBpbiBvcmRlcixcclxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cclxuICogQG1ldGhvZFxyXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXHJcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxyXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcclxuICogQHBhcmFtIHtTdHJpbmd9IGVuZHMgLSBPcHRpb25hbCBtb2RpZmllciBuYW1lIHVzZWQgYXMgc3RvcHBlclxyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHtcclxuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XHJcblxyXG4gIG1vZGlmaWVyc1RvUnVuLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XHJcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cclxuICAgICAgY29uc29sZS53YXJuKCdgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIScpO1xyXG4gICAgfVxyXG4gICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXHJcbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xyXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyB0byBvZmZzZXRzIHRvIG1ha2UgdGhlbSBhIGNvbXBsZXRlIGNsaWVudFJlY3Qgb2JqZWN0XHJcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxyXG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXHJcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xyXG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcclxuXHJcbiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBkYXRhO1xyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcclxuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cclxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlclxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlKCkge1xyXG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXHJcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciBkYXRhID0ge1xyXG4gICAgaW5zdGFuY2U6IHRoaXMsXHJcbiAgICBzdHlsZXM6IHt9LFxyXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxyXG4gICAgYXR0cmlidXRlczoge30sXHJcbiAgICBmbGlwcGVkOiBmYWxzZSxcclxuICAgIG9mZnNldHM6IHt9XHJcbiAgfTtcclxuXHJcbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXHJcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHModGhpcy5zdGF0ZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCk7XHJcblxyXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxyXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcclxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcclxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XHJcblxyXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcclxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XHJcblxyXG4gIGRhdGEucG9zaXRpb25GaXhlZCA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkO1xyXG5cclxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xyXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7XHJcblxyXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnO1xyXG5cclxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xyXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xyXG5cclxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcclxuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xyXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcclxuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcclxuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XHJcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7XHJcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcclxuICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkO1xyXG4gICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lO1xyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByZWZpeGVkIHByb3BlcnR5IChjYW1lbENhc2Ugb3IgUGFzY2FsQ2FzZSwgZGVwZW5kaW5nIG9uIHRoZSB2ZW5kb3IgcHJlZml4KVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XHJcbiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XHJcbiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcclxuICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTtcclxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgcmV0dXJuIHRvQ2hlY2s7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogRGVzdHJveXMgdGhlIHBvcHBlci5cclxuICogQG1ldGhvZFxyXG4gKiBAbWVtYmVyb2YgUG9wcGVyXHJcbiAqL1xyXG5mdW5jdGlvbiBkZXN0cm95KCkge1xyXG4gIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xyXG5cclxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZCh0aGlzLm1vZGlmaWVycywgJ2FwcGx5U3R5bGUnKSkge1xyXG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xyXG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcclxuICAgIHRoaXMucG9wcGVyLnN0eWxlLnRvcCA9ICcnO1xyXG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xyXG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcclxuICAgIHRoaXMucG9wcGVyLnN0eWxlLmJvdHRvbSA9ICcnO1xyXG4gICAgdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZSA9ICcnO1xyXG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcclxuICB9XHJcblxyXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXR5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxyXG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxyXG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7XHJcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcclxuICB9XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcclxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XHJcbiAqIEByZXR1cm5zIHtXaW5kb3d9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xyXG4gIHZhciBvd25lckRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xyXG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcclxufVxyXG5cclxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XHJcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xyXG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBzY3JvbGxQYXJlbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHNjcm9sbFBhcmVudDtcclxuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuXHJcbiAgaWYgKCFpc0JvZHkpIHtcclxuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xyXG4gIH1cclxuICBzY3JvbGxQYXJlbnRzLnB1c2godGFyZ2V0KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHNldHVwRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBvcHRpb25zLCBzdGF0ZSwgdXBkYXRlQm91bmQpIHtcclxuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XHJcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcclxuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG5cclxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcclxuICB2YXIgc2Nyb2xsRWxlbWVudCA9IGdldFNjcm9sbFBhcmVudChyZWZlcmVuY2UpO1xyXG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xyXG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xyXG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSB0cnVlO1xyXG5cclxuICByZXR1cm4gc3RhdGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJdCB3aWxsIGFkZCByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgc3RhcnQgcmVjYWxjdWxhdGluZ1xyXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlclxyXG4gKi9cclxuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcclxuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcclxuICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xyXG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcclxuXHJcbiAgLy8gUmVtb3ZlIHNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xyXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBSZXNldCBzdGF0ZVxyXG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gbnVsbDtcclxuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XHJcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XHJcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGZhbHNlO1xyXG4gIHJldHVybiBzdGF0ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cclxuICogd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuIEl0IGFsc28gd29uJ3QgdHJpZ2dlciBgb25VcGRhdGVgIGNhbGxiYWNrIGFueW1vcmUsXHJcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlclxyXG4gKi9cclxuZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xyXG4gIGlmICh0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcclxuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xyXG4gIHJldHVybiBuICE9PSAnJyAmJiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXJcclxuICogQG1ldGhvZFxyXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXHJcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcclxuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcclxuICovXHJcbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcclxuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuICAgIHZhciB1bml0ID0gJyc7XHJcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcclxuICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PSAtMSAmJiBpc051bWVyaWMoc3R5bGVzW3Byb3BdKSkge1xyXG4gICAgICB1bml0ID0gJ3B4JztcclxuICAgIH1cclxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcclxuICogQG1ldGhvZFxyXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXHJcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cclxuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xyXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxyXG4gKi9cclxuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XHJcbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xyXG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcclxuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcclxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocHJvcCwgYXR0cmlidXRlc1twcm9wXSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLmF0dHJpYnV0ZXMgLSBMaXN0IG9mIGF0dHJpYnV0ZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcclxuICovXHJcbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xyXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXHJcbiAgLy8gaW4gdGhpcyB3YXkgd2UgY2FuIG1ha2UgdGhlIDNyZCBwYXJ0eSBtb2RpZmllcnMgYWRkIGN1c3RvbSBzdHlsZXMgdG8gaXRcclxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXHJcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcclxuICBzZXRTdHlsZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuc3R5bGVzKTtcclxuXHJcbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXHJcbiAgLy8gdGhleSB3aWxsIGJlIHNldCBhcyBIVE1MIGF0dHJpYnV0ZXMgb2YgdGhlIGVsZW1lbnRcclxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xyXG5cclxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgZGVmaW5lZCBhbmQgYXJyb3dTdHlsZXMgaGFzIHNvbWUgcHJvcGVydGllc1xyXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcclxuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZGF0YTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgeC1wbGFjZW1lbnQgYXR0cmlidXRlIGJlZm9yZSBldmVyeXRoaW5nIGVsc2UgYmVjYXVzZSBpdCBjb3VsZCBiZSB1c2VkXHJcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcclxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cclxuICogQG1ldGhvZFxyXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXJcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xyXG4gKi9cclxuZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBzdGF0ZSkge1xyXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xyXG4gIHZhciByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7XHJcblxyXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxyXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcclxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcclxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xyXG5cclxuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHBsYWNlbWVudCk7XHJcblxyXG4gIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2VcclxuICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9uc1xyXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xyXG5cclxuICByZXR1cm4gb3B0aW9ucztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcclxuICogQGFyZ3VtZW50IHtCb29sZWFufSBzaG91bGRSb3VuZCAtIElmIHRoZSBvZmZzZXRzIHNob3VsZCBiZSByb3VuZGVkIGF0IGFsbFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcG9wcGVyJ3MgcG9zaXRpb24gb2Zmc2V0cyByb3VuZGVkXHJcbiAqXHJcbiAqIFRoZSB0YWxlIG9mIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcuIEl0J3Mgc3RpbGwgbm90IDEwMCUgcGVyZmVjdCwgYnV0IGFzXHJcbiAqIGdvb2QgYXMgaXQgY2FuIGJlIHdpdGhpbiByZWFzb24uXHJcbiAqIERpc2N1c3Npb24gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvcHVsbC83MTVcclxuICpcclxuICogTG93IERQSSBzY3JlZW5zIGNhdXNlIGEgcG9wcGVyIHRvIGJlIGJsdXJyeSBpZiBub3QgdXNpbmcgZnVsbCBwaXhlbHMgKFNhZmFyaVxyXG4gKiBhcyB3ZWxsIG9uIEhpZ2ggRFBJIHNjcmVlbnMpLlxyXG4gKlxyXG4gKiBGaXJlZm94IHByZWZlcnMgbm8gcm91bmRpbmcgZm9yIHBvc2l0aW9uaW5nIGFuZCBkb2VzIG5vdCBoYXZlIGJsdXJyaW5lc3Mgb25cclxuICogaGlnaCBEUEkgc2NyZWVucy5cclxuICpcclxuICogT25seSBob3Jpem9udGFsIHBsYWNlbWVudCBhbmQgbGVmdC9yaWdodCB2YWx1ZXMgbmVlZCB0byBiZSBjb25zaWRlcmVkLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgc2hvdWxkUm91bmQpIHtcclxuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcclxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXHJcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xyXG4gIHZhciByb3VuZCA9IE1hdGgucm91bmQsXHJcbiAgICAgIGZsb29yID0gTWF0aC5mbG9vcjtcclxuXHJcbiAgdmFyIG5vUm91bmQgPSBmdW5jdGlvbiBub1JvdW5kKHYpIHtcclxuICAgIHJldHVybiB2O1xyXG4gIH07XHJcblxyXG4gIHZhciByZWZlcmVuY2VXaWR0aCA9IHJvdW5kKHJlZmVyZW5jZS53aWR0aCk7XHJcbiAgdmFyIHBvcHBlcldpZHRoID0gcm91bmQocG9wcGVyLndpZHRoKTtcclxuXHJcbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGRhdGEucGxhY2VtZW50KSAhPT0gLTE7XHJcbiAgdmFyIGlzVmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuaW5kZXhPZignLScpICE9PSAtMTtcclxuICB2YXIgc2FtZVdpZHRoUGFyaXR5ID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSBwb3BwZXJXaWR0aCAlIDI7XHJcbiAgdmFyIGJvdGhPZGRXaWR0aCA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gMSAmJiBwb3BwZXJXaWR0aCAlIDIgPT09IDE7XHJcblxyXG4gIHZhciBob3Jpem9udGFsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IGlzVmVydGljYWwgfHwgaXNWYXJpYXRpb24gfHwgc2FtZVdpZHRoUGFyaXR5ID8gcm91bmQgOiBmbG9vcjtcclxuICB2YXIgdmVydGljYWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogcm91bmQ7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBsZWZ0OiBob3Jpem9udGFsVG9JbnRlZ2VyKGJvdGhPZGRXaWR0aCAmJiAhaXNWYXJpYXRpb24gJiYgc2hvdWxkUm91bmQgPyBwb3BwZXIubGVmdCAtIDEgOiBwb3BwZXIubGVmdCksXHJcbiAgICB0b3A6IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci50b3ApLFxyXG4gICAgYm90dG9tOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIuYm90dG9tKSxcclxuICAgIHJpZ2h0OiBob3Jpem9udGFsVG9JbnRlZ2VyKHBvcHBlci5yaWdodClcclxuICB9O1xyXG59XHJcblxyXG52YXIgaXNGaXJlZm94ID0gaXNCcm93c2VyICYmIC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb25cclxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xyXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxyXG4gKi9cclxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcclxuICB2YXIgeCA9IG9wdGlvbnMueCxcclxuICAgICAgeSA9IG9wdGlvbnMueTtcclxuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcclxuXHJcbiAgLy8gUmVtb3ZlIHRoaXMgbGVnYWN5IHN1cHBvcnQgaW4gUG9wcGVyLmpzIHYyXHJcblxyXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcclxuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZSc7XHJcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xyXG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpO1xyXG4gIH1cclxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcclxuXHJcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XHJcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcclxuXHJcbiAgLy8gU3R5bGVzXHJcbiAgdmFyIHN0eWxlcyA9IHtcclxuICAgIHBvc2l0aW9uOiBwb3BwZXIucG9zaXRpb25cclxuICB9O1xyXG5cclxuICB2YXIgb2Zmc2V0cyA9IGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDwgMiB8fCAhaXNGaXJlZm94KTtcclxuXHJcbiAgdmFyIHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xyXG4gIHZhciBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xyXG5cclxuICAvLyBpZiBncHVBY2NlbGVyYXRpb24gaXMgc2V0IHRvIGB0cnVlYCBhbmQgdHJhbnNmb3JtIGlzIHN1cHBvcnRlZCxcclxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcclxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXHJcbiAgdmFyIHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xyXG5cclxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXHJcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxyXG4gIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50XHJcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XHJcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcclxuICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLlxyXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XHJcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXHJcbiAgLy8gaXRzIGJvdHRvbS5cclxuICB2YXIgbGVmdCA9IHZvaWQgMCxcclxuICAgICAgdG9wID0gdm9pZCAwO1xyXG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcclxuICAgIC8vIHdoZW4gb2Zmc2V0UGFyZW50IGlzIDxodG1sPiB0aGUgcG9zaXRpb25pbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIChleGNsdWRpbmcgdGhlIHNjcm9sbGJhcilcclxuICAgIC8vIGFuZCBub3QgdGhlIGJvdHRvbSBvZiB0aGUgaHRtbCBlbGVtZW50XHJcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcclxuICAgICAgdG9wID0gLW9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnRSZWN0LmhlaWdodCArIG9mZnNldHMuYm90dG9tO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcclxuICB9XHJcbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XHJcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcclxuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbGVmdCA9IG9mZnNldHMubGVmdDtcclxuICB9XHJcbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XHJcbiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSAndHJhbnNsYXRlM2QoJyArIGxlZnQgKyAncHgsICcgKyB0b3AgKyAncHgsIDApJztcclxuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xyXG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XHJcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xyXG4gICAgdmFyIGludmVydFRvcCA9IHNpZGVBID09PSAnYm90dG9tJyA/IC0xIDogMTtcclxuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XHJcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xyXG4gICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0O1xyXG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcclxuICB9XHJcblxyXG4gIC8vIEF0dHJpYnV0ZXNcclxuICB2YXIgYXR0cmlidXRlcyA9IHtcclxuICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50XHJcbiAgfTtcclxuXHJcbiAgLy8gVXBkYXRlIGBkYXRhYCBhdHRyaWJ1dGVzLCBzdHlsZXMgYW5kIGFycm93U3R5bGVzXHJcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XHJcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XHJcbiAgZGF0YS5hcnJvd1N0eWxlcyA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMuYXJyb3csIGRhdGEuYXJyb3dTdHlsZXMpO1xyXG5cclxuICByZXR1cm4gZGF0YTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGRlcGVuZHMgZnJvbSBhbm90aGVyIG9uZS48YnIgLz5cclxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxyXG4gKiBAbWV0aG9kXHJcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcclxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0ZWROYW1lIC0gbmFtZSBvZiByZXF1ZXN0ZWQgbW9kaWZpZXJcclxuICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc01vZGlmaWVyUmVxdWlyZWQobW9kaWZpZXJzLCByZXF1ZXN0aW5nTmFtZSwgcmVxdWVzdGVkTmFtZSkge1xyXG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XHJcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcclxuICAgIHJldHVybiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZTtcclxuICB9KTtcclxuXHJcbiAgdmFyIGlzUmVxdWlyZWQgPSAhIXJlcXVlc3RpbmcgJiYgbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XHJcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcclxuICB9KTtcclxuXHJcbiAgaWYgKCFpc1JlcXVpcmVkKSB7XHJcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcclxuICAgIHZhciByZXF1ZXN0ZWQgPSAnYCcgKyByZXF1ZXN0ZWROYW1lICsgJ2AnO1xyXG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XHJcbiAgfVxyXG4gIHJldHVybiBpc1JlcXVpcmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXHJcbiAqL1xyXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XHJcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XHJcblxyXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcclxuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcblxyXG4gIHZhciBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XHJcblxyXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXHJcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XHJcblxyXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXHJcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcclxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcclxuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcclxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXHJcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xyXG5cclxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XHJcblxyXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xyXG4gIHZhciBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XHJcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcclxuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcclxuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcclxuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xyXG5cclxuICAvL1xyXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xyXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVuY3Rpb25cclxuICAvL1xyXG5cclxuICAvLyB0b3AvbGVmdCBzaWRlXHJcbiAgaWYgKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSA8IHBvcHBlcltzaWRlXSkge1xyXG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcclxuICB9XHJcbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcclxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XHJcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdICs9IHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcclxuICB9XHJcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XHJcblxyXG4gIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXJcclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XHJcblxyXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xyXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXHJcbiAgdmFyIGNzcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShkYXRhLmluc3RhbmNlLnBvcHBlcik7XHJcbiAgdmFyIHBvcHBlck1hcmdpblNpZGUgPSBwYXJzZUZsb2F0KGNzc1snbWFyZ2luJyArIHNpZGVDYXBpdGFsaXplZF0sIDEwKTtcclxuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10sIDEwKTtcclxuICB2YXIgc2lkZVZhbHVlID0gY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xyXG5cclxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xyXG5cclxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcclxuICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpO1xyXG5cclxuICByZXR1cm4gZGF0YTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXHJcbiAqIEBtZXRob2RcclxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xyXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudCB2YXJpYXRpb25cclxuICovXHJcbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xyXG4gIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7XHJcbiAgICByZXR1cm4gJ3N0YXJ0JztcclxuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xyXG4gICAgcmV0dXJuICdlbmQnO1xyXG4gIH1cclxuICByZXR1cm4gdmFyaWF0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cclxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XHJcbiAqIC0gYGF1dG9gXHJcbiAqIC0gYHRvcGBcclxuICogLSBgcmlnaHRgXHJcbiAqIC0gYGJvdHRvbWBcclxuICogLSBgbGVmdGBcclxuICpcclxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XHJcbiAqIC0gYC1zdGFydGBcclxuICogLSBgLWVuZGBcclxuICpcclxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XHJcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcclxuICogaXMgcmlnaHQuPGJyIC8+XHJcbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXHJcbiAqXHJcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxyXG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcclxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxyXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxyXG4gKiAtIGBhdXRvLWVuZGAgKG9uIHRoZSBzaWRlIHdpdGggbW9yZSBzcGFjZSBhdmFpbGFibGUsIGFsaWdubWVudCBkZXBlbmRzIGJ5IHBsYWNlbWVudClcclxuICpcclxuICogQHN0YXRpY1xyXG4gKiBAdHlwZSB7QXJyYXl9XHJcbiAqIEBlbnVtIHtTdHJpbmd9XHJcbiAqIEByZWFkb25seVxyXG4gKiBAbWV0aG9kIHBsYWNlbWVudHNcclxuICogQG1lbWJlcm9mIFBvcHBlclxyXG4gKi9cclxudmFyIHBsYWNlbWVudHMgPSBbJ2F1dG8tc3RhcnQnLCAnYXV0bycsICdhdXRvLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJywgJ3RvcC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAncmlnaHQtZW5kJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tJywgJ2JvdHRvbS1zdGFydCcsICdsZWZ0LWVuZCcsICdsZWZ0JywgJ2xlZnQtc3RhcnQnXTtcclxuXHJcbi8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYFxyXG52YXIgdmFsaWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5zbGljZSgzKTtcclxuXHJcbi8qKlxyXG4gKiBHaXZlbiBhbiBpbml0aWFsIHBsYWNlbWVudCwgcmV0dXJucyBhbGwgdGhlIHN1YnNlcXVlbnQgcGxhY2VtZW50c1xyXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cclxuICpcclxuICogQG1ldGhvZFxyXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXHJcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxyXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IGNvdW50ZXIgLSBTZXQgdG8gdHJ1ZSB0byB3YWxrIHRoZSBwbGFjZW1lbnRzIGNvdW50ZXJjbG9ja3dpc2VcclxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXHJcbiAqL1xyXG5mdW5jdGlvbiBjbG9ja3dpc2UocGxhY2VtZW50KSB7XHJcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xyXG5cclxuICB2YXIgaW5kZXggPSB2YWxpZFBsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpO1xyXG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XHJcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xyXG59XHJcblxyXG52YXIgQkVIQVZJT1JTID0ge1xyXG4gIEZMSVA6ICdmbGlwJyxcclxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxyXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJ1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxyXG4gKi9cclxuZnVuY3Rpb24gZmxpcChkYXRhLCBvcHRpb25zKSB7XHJcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2lubmVyJykpIHtcclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH1cclxuXHJcbiAgaWYgKGRhdGEuZmxpcHBlZCAmJiBkYXRhLnBsYWNlbWVudCA9PT0gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCkge1xyXG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH1cclxuXHJcbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xyXG5cclxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcclxuICB2YXIgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xyXG4gIHZhciB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnO1xyXG5cclxuICB2YXIgZmxpcE9yZGVyID0gW107XHJcblxyXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xyXG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcclxuICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcclxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcclxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjtcclxuICB9XHJcblxyXG4gIGZsaXBPcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwLCBpbmRleCkge1xyXG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcclxuICAgIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcclxuXHJcbiAgICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XHJcbiAgICB2YXIgcmVmT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XHJcblxyXG4gICAgLy8gdXNpbmcgZmxvb3IgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgbWF5IGNvbnRhaW4gZGVjaW1hbHMgd2UgYXJlIG5vdCBnb2luZyB0byBjb25zaWRlciBoZXJlXHJcbiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xyXG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XHJcblxyXG4gICAgdmFyIG92ZXJmbG93c0xlZnQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IoYm91bmRhcmllcy5sZWZ0KTtcclxuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XHJcbiAgICB2YXIgb3ZlcmZsb3dzVG9wID0gZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IoYm91bmRhcmllcy50b3ApO1xyXG4gICAgdmFyIG92ZXJmbG93c0JvdHRvbSA9IGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcclxuXHJcbiAgICB2YXIgb3ZlcmZsb3dzQm91bmRhcmllcyA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tO1xyXG5cclxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxyXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xyXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3AgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xyXG5cclxuICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzIHx8IGZsaXBwZWRWYXJpYXRpb24pIHtcclxuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXHJcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XHJcblxyXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xyXG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xyXG4gICAgICAgIHZhcmlhdGlvbiA9IGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRhdGEucGxhY2VtZW50ID0gcGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcclxuXHJcbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxyXG4gICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmVcclxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMucG9wcGVyLCBnZXRQb3BwZXJPZmZzZXRzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCkpO1xyXG5cclxuICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gZGF0YTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxyXG4gKi9cclxuZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcclxuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcclxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXHJcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xyXG5cclxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcclxuICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xyXG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcclxuICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7XHJcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcclxuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xyXG5cclxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XHJcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xyXG4gIH1cclxuICBpZiAocG9wcGVyW29wU2lkZV0gPiBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pKSB7XHJcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XHJcbiAqIEBwcml2YXRlXHJcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nXHJcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcclxuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XHJcbiAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZFxyXG4gKi9cclxuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XHJcbiAgLy8gc2VwYXJhdGUgdmFsdWUgZnJvbSB1bml0XHJcbiAgdmFyIHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKTtcclxuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XHJcbiAgdmFyIHVuaXQgPSBzcGxpdFsyXTtcclxuXHJcbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xyXG4gIGlmICghdmFsdWUpIHtcclxuICAgIHJldHVybiBzdHI7XHJcbiAgfVxyXG5cclxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcclxuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xyXG4gICAgc3dpdGNoICh1bml0KSB7XHJcbiAgICAgIGNhc2UgJyVwJzpcclxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnJSc6XHJcbiAgICAgIGNhc2UgJyVyJzpcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7XHJcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcclxuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3Jykge1xyXG4gICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydFxyXG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XHJcbiAgICBpZiAodW5pdCA9PT0gJ3ZoJykge1xyXG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZVxyXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XHJcbiAqIEBwcml2YXRlXHJcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBvZmZzZXRcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcclxuICogQGFyZ3VtZW50IHtTdHJpbmd9IGJhc2VQbGFjZW1lbnRcclxuICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMsIGJhc2VQbGFjZW1lbnQpIHtcclxuICB2YXIgb2Zmc2V0cyA9IFswLCAwXTtcclxuXHJcbiAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoXHJcbiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZVxyXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcclxuICB2YXIgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XHJcblxyXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xyXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcclxuICB2YXIgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnVuY3Rpb24gKGZyYWcpIHtcclxuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcclxuICB9KTtcclxuXHJcbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXHJcbiAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2VcclxuICB2YXIgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKGZpbmQoZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykge1xyXG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcclxuICB9KSk7XHJcblxyXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcclxuICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpO1xyXG4gIH1cclxuXHJcbiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlXHJcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxyXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcclxuICB2YXIgb3BzID0gZGl2aWRlciAhPT0gLTEgPyBbZnJhZ21lbnRzLnNsaWNlKDAsIGRpdmlkZXIpLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpKV0gOiBbZnJhZ21lbnRzXTtcclxuXHJcbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcclxuICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcclxuICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXJcclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xyXG4gICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XHJcbiAgICByZXR1cm4gb3BcclxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXHJcbiAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdXHJcbiAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcclxuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiO1xyXG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gYTtcclxuICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykge1xyXG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xyXG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xyXG4gICAgICB9XHJcbiAgICB9LCBbXSlcclxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxyXG4gICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAgIHJldHVybiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xyXG4gIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcclxuICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4Mikge1xyXG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XHJcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIG9mZnNldHM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb25cclxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xyXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxyXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXHJcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxyXG4gKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cclxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxyXG4gKi9cclxuZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHtcclxuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XHJcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LFxyXG4gICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxyXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcclxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XHJcblxyXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XHJcblxyXG4gIHZhciBvZmZzZXRzID0gdm9pZCAwO1xyXG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcclxuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XHJcbiAgfSBlbHNlIHtcclxuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcclxuICB9XHJcblxyXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcclxuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcclxuICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07XHJcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XHJcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XHJcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdO1xyXG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcclxuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XHJcbiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07XHJcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xyXG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcclxuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTtcclxuICB9XHJcblxyXG4gIGRhdGEucG9wcGVyID0gcG9wcGVyO1xyXG4gIHJldHVybiBkYXRhO1xyXG59XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxyXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcclxuICovXHJcbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XHJcbiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xyXG5cclxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xyXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xyXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cclxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XHJcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XHJcbiAgfVxyXG5cclxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcclxuICAvLyByZXNldHMgdGhlIHBvcHBlcidzIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGRvY3VtZW50IHNpemUgY2FuIGJlIGNhbGN1bGF0ZWQgZXhjbHVkaW5nXHJcbiAgLy8gdGhlIHNpemUgb2YgdGhlIHBvcHBlciBlbGVtZW50IGl0c2VsZlxyXG4gIHZhciB0cmFuc2Zvcm1Qcm9wID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcclxuICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cclxuICB2YXIgdG9wID0gcG9wcGVyU3R5bGVzLnRvcCxcclxuICAgICAgbGVmdCA9IHBvcHBlclN0eWxlcy5sZWZ0LFxyXG4gICAgICB0cmFuc2Zvcm0gPSBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF07XHJcblxyXG4gIHBvcHBlclN0eWxlcy50b3AgPSAnJztcclxuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xyXG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9ICcnO1xyXG5cclxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xyXG5cclxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcclxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcclxuICBwb3BwZXJTdHlsZXMudG9wID0gdG9wO1xyXG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gbGVmdDtcclxuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XHJcblxyXG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XHJcblxyXG4gIHZhciBvcmRlciA9IG9wdGlvbnMucHJpb3JpdHk7XHJcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XHJcblxyXG4gIHZhciBjaGVjayA9IHtcclxuICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7XHJcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xyXG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPCBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xyXG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBwbGFjZW1lbnQsIHZhbHVlKTtcclxuICAgIH0sXHJcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcclxuICAgICAgdmFyIG1haW5TaWRlID0gcGxhY2VtZW50ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3RvcCc7XHJcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XHJcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XHJcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihwb3BwZXJbbWFpblNpZGVdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0gLSAocGxhY2VtZW50ID09PSAncmlnaHQnID8gcG9wcGVyLndpZHRoIDogcG9wcGVyLmhlaWdodCkpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcclxuICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JztcclxuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xyXG4gIH0pO1xyXG5cclxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xyXG5cclxuICByZXR1cm4gZGF0YTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXHJcbiAqL1xyXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XHJcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xyXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XHJcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XHJcblxyXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xyXG4gICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXHJcbiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsXHJcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XHJcblxyXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcclxuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcclxuXHJcbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xyXG4gICAgICBzdGFydDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSksXHJcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKVxyXG4gICAgfTtcclxuXHJcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZGF0YTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxyXG4gKi9cclxuZnVuY3Rpb24gaGlkZShkYXRhKSB7XHJcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdoaWRlJywgJ3ByZXZlbnRPdmVyZmxvdycpKSB7XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcblxyXG4gIHZhciByZWZSZWN0ID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcclxuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcclxuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcclxuICB9KS5ib3VuZGFyaWVzO1xyXG5cclxuICBpZiAocmVmUmVjdC5ib3R0b20gPCBib3VuZC50b3AgfHwgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHwgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHwgcmVmUmVjdC5yaWdodCA8IGJvdW5kLmxlZnQpIHtcclxuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxyXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xyXG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXHJcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xyXG4gICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcclxuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZGF0YTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXHJcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcclxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXHJcbiAqL1xyXG5mdW5jdGlvbiBpbm5lcihkYXRhKSB7XHJcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xyXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XHJcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXHJcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxyXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcclxuXHJcbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcclxuXHJcbiAgdmFyIHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xyXG5cclxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9IHJlZmVyZW5jZVtiYXNlUGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xyXG5cclxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XHJcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcclxuXHJcbiAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZFxyXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cclxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcclxuICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxyXG4gKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxyXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIE1vZGlmaWVycyBhcmUgcGx1Z2lucyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvciBvZiB5b3VyIHBvcHBlcnMuPGJyIC8+XHJcbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcclxuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxyXG4gKlxyXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cclxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXHJcbiAqIEBuYW1lc3BhY2UgbW9kaWZpZXJzXHJcbiAqL1xyXG52YXIgbW9kaWZpZXJzID0ge1xyXG4gIC8qKlxyXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gc2hpZnQgdGhlIHBvcHBlciBvbiB0aGUgc3RhcnQgb3IgZW5kIG9mIGl0cyByZWZlcmVuY2VcclxuICAgKiBlbGVtZW50LjxiciAvPlxyXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cclxuICAgKiBJdCBjYW4gYmUgb25lIGVpdGhlciBgLWVuZGAgb3IgYC1zdGFydGAuXHJcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xyXG4gICAqIEBpbm5lclxyXG4gICAqL1xyXG4gIHNoaWZ0OiB7XHJcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xyXG4gICAgb3JkZXI6IDEwMCxcclxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cclxuICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXHJcbiAgICBmbjogc2hpZnRcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuXHJcbiAgICpcclxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XHJcbiAgICogLSBgcHhgIG9yIHVuaXQtbGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXHJcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxyXG4gICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxyXG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcclxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxyXG4gICAqXHJcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cclxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxyXG4gICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGBoZWlnaHRgLlxyXG4gICAqXHJcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcclxuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XHJcbiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlXHJcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cclxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXHJcbiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuXHJcbiAgICpcclxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XHJcbiAgICogYGBgXHJcbiAgICogMTBcclxuICAgKiAnMTAlJ1xyXG4gICAqICcxMCwgMTAnXHJcbiAgICogJzEwJSwgMTAnXHJcbiAgICogJzEwICsgMTAlJ1xyXG4gICAqICcxMCAtIDV2aCArIDMlJ1xyXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXHJcbiAgICogYGBgXHJcbiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXBcclxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxyXG4gICAqID4gWW91IGNhbiByZWFkIG1vcmUgb24gdGhpcyBhdCB0aGlzIFtpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MykuXHJcbiAgICpcclxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXHJcbiAgICogQGlubmVyXHJcbiAgICovXHJcbiAgb2Zmc2V0OiB7XHJcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xyXG4gICAgb3JkZXI6IDIwMCxcclxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cclxuICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXHJcbiAgICBmbjogb2Zmc2V0LFxyXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxyXG4gICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXHJcbiAgICAgKi9cclxuICAgIG9mZnNldDogMFxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cclxuICAgKlxyXG4gICAqIEEgc2NlbmFyaW8gZXhpc3RzIHdoZXJlIHRoZSByZWZlcmVuY2UgaXRzZWxmIGlzIG5vdCB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuPGJyIC8+XHJcbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XHJcbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxyXG4gICAqXHJcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXHJcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcclxuICAgKlxyXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcclxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXHJcbiAgICogdGhlIGJvdW5kYXJpZXMgaW4gb3JkZXIgdG8gcmVtYWluIGF0dGFjaGVkIHRvIHRoZSBlZGdlIG9mIHRoZSByZWZlcmVuY2UuXHJcbiAgICpcclxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXHJcbiAgICogQGlubmVyXHJcbiAgICovXHJcbiAgcHJldmVudE92ZXJmbG93OiB7XHJcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xyXG4gICAgb3JkZXI6IDMwMCxcclxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cclxuICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXHJcbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxyXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcclxuICAgICAqIHRoZW4sIGl0IGNvdWxkIG92ZXJmbG93IG9uIHRoZSBsZWZ0IGFuZCBvbiB0b3Agb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcclxuICAgICAqL1xyXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXHJcbiAgICAvKipcclxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxyXG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXHJcbiAgICAgKiBhbmQgdGhlIHBvcHBlci4gVGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgYWx3YXlzIGhhcyBhIGxpdHRsZSBwYWRkaW5nXHJcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXHJcbiAgICAgKi9cclxuICAgIHBhZGRpbmc6IDUsXHJcbiAgICAvKipcclxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXHJcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLiBDYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxyXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXHJcbiAgICAgKi9cclxuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2ggb3RoZXJcclxuICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEVzcGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzXHJcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgaXQgcG9pbnRzIHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cclxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLiBZb3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxyXG4gICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxyXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcclxuICAgKiBAaW5uZXJcclxuICAgKi9cclxuICBrZWVwVG9nZXRoZXI6IHtcclxuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXHJcbiAgICBvcmRlcjogNDAwLFxyXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xyXG4gICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cclxuICAgIGZuOiBrZWVwVG9nZXRoZXJcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlXHJcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXHJcbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxyXG4gICAqIHBpeGVscyBvZiBjb25qdW5jdGlvbiBhcmUgbmVlZGVkLlxyXG4gICAqXHJcbiAgICogSXQgaGFzIG5vIGVmZmVjdCBpZiBubyBgYXJyb3dFbGVtZW50YCBpcyBwcm92aWRlZC5cclxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXHJcbiAgICogQGlubmVyXHJcbiAgICovXHJcbiAgYXJyb3c6IHtcclxuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXHJcbiAgICBvcmRlcjogNTAwLFxyXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xyXG4gICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cclxuICAgIGZuOiBhcnJvdyxcclxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXHJcbiAgICBlbGVtZW50OiAnW3gtYXJyb3ddJ1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXHJcbiAgICogcmVmZXJlbmNlIGVsZW1lbnQuXHJcbiAgICpcclxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXHJcbiAgICpcclxuICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGxcclxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxyXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcclxuICAgKiBAaW5uZXJcclxuICAgKi9cclxuICBmbGlwOiB7XHJcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xyXG4gICAgb3JkZXI6IDYwMCxcclxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cclxuICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXHJcbiAgICBmbjogZmxpcCxcclxuICAgIC8qKlxyXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXHJcbiAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZlxyXG4gICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkXHJcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpXHJcbiAgICAgKi9cclxuICAgIGJlaGF2aW9yOiAnZmxpcCcsXHJcbiAgICAvKipcclxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxyXG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcclxuICAgICAqL1xyXG4gICAgcGFkZGluZzogNSxcclxuICAgIC8qKlxyXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xyXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbi5cclxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXHJcbiAgICAgKiAoZXhjZXB0IGlmIGBrZWVwVG9nZXRoZXJgIGlzIGVuYWJsZWQpXHJcbiAgICAgKi9cclxuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAndmlld3BvcnQnXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cclxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxyXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cclxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXHJcbiAgICogQGlubmVyXHJcbiAgICovXHJcbiAgaW5uZXI6IHtcclxuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXHJcbiAgICBvcmRlcjogNzAwLFxyXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cclxuICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xyXG4gICAgZm46IGlubmVyXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcclxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxyXG4gICAqIGJlIHVzZWQgdG8gaGlkZSB3aXRoIGEgQ1NTIHNlbGVjdG9yIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGlzXHJcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXHJcbiAgICpcclxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXHJcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xyXG4gICAqIEBpbm5lclxyXG4gICAqL1xyXG4gIGhpZGU6IHtcclxuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXHJcbiAgICBvcmRlcjogODAwLFxyXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xyXG4gICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cclxuICAgIGZuOiBoaWRlXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQ29tcHV0ZXMgdGhlIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgZWxlbWVudCB0byBnZXRzXHJcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cclxuICAgKlxyXG4gICAqIE5vdGUgdGhhdCB0aGlzIG1vZGlmaWVyIHdpbGwgbm90IHRvdWNoIHRoZSBET00sIGl0IGp1c3QgcHJlcGFyZXMgdGhlIHN0eWxlc1xyXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxyXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cclxuICAgKlxyXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxyXG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcclxuICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIG1ham9yIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LlxyXG4gICAqXHJcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xyXG4gICAqIEBpbm5lclxyXG4gICAqL1xyXG4gIGNvbXB1dGVTdHlsZToge1xyXG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTg1MCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cclxuICAgIG9yZGVyOiA4NTAsXHJcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXHJcbiAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xyXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcclxuICAgIC8qKlxyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXHJcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cclxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xyXG4gICAgICovXHJcbiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsXHJcbiAgICAvKipcclxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxyXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi5cclxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gXHJcbiAgICAgKi9cclxuICAgIHg6ICdib3R0b20nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXHJcbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLlxyXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YFxyXG4gICAgICovXHJcbiAgICB5OiAncmlnaHQnXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cclxuICAgKlxyXG4gICAqIEFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgYXJlIGxpbWl0ZWQgdG8gdGhpcyBtb2RpZmllci4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZVxyXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XHJcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxyXG4gICAqXHJcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcclxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxyXG4gICAqXHJcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3VyIG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cclxuICAgKlxyXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcclxuICAgKiBAaW5uZXJcclxuICAgKi9cclxuICBhcHBseVN0eWxlOiB7XHJcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xyXG4gICAgb3JkZXI6IDkwMCxcclxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cclxuICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXHJcbiAgICBmbjogYXBwbHlTdHlsZSxcclxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXHJcbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxyXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXHJcbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcclxuICAgICAqL1xyXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWRcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9uIHVzZWQgYnkgUG9wcGVyLmpzLlxyXG4gKiBUaGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXHJcbiAqIEBuYW1lIGRhdGFPYmplY3RcclxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXHJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyXHJcbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGRhdGEuYXJyb3dFbGVtZW50IE5vZGUgdXNlZCBhcyBhcnJvdyBieSBhcnJvdyBtb2RpZmllclxyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5ib3VuZGFyaWVzIE9mZnNldHMgb2YgdGhlIHBvcHBlciBib3VuZGFyaWVzXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHNcclxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5wb3BwZXIgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucmVmZXJlbmNlIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+XHJcbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIHVzaW5nIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2YgUG9wcGVyLmpzLjxiciAvPlxyXG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXHJcbiAqIHN0cnVjdHVyZSBvZiB0aGUgYG9wdGlvbnNgIG9iamVjdCwgYXMgdGhlIDNyZCBhcmd1bWVudC4gRm9yIGV4YW1wbGU6XHJcbiAqIGBgYFxyXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XHJcbiAqICAgbW9kaWZpZXJzOiB7XHJcbiAqICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogZmFsc2UgfVxyXG4gKiAgIH1cclxuICogfSlcclxuICogYGBgXHJcbiAqIEB0eXBlIHtPYmplY3R9XHJcbiAqIEBzdGF0aWNcclxuICogQG1lbWJlcm9mIFBvcHBlclxyXG4gKi9cclxudmFyIERlZmF1bHRzID0ge1xyXG4gIC8qKlxyXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudC5cclxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xyXG4gICAqL1xyXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdhbnQgcG9wcGVyIHRvIHBvc2l0aW9uIGl0IHNlbGYgaW4gJ2ZpeGVkJyBtb2RlXHJcbiAgICogQHByb3Age0Jvb2xlYW59IHBvc2l0aW9uRml4ZWQ9ZmFsc2VcclxuICAgKi9cclxuICBwb3NpdGlvbkZpeGVkOiBmYWxzZSxcclxuXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWQuXHJcbiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZVxyXG4gICAqL1xyXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxyXG4gICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLlxyXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcclxuICAgKi9cclxuICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLFxyXG5cclxuICAvKipcclxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+XHJcbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxyXG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXHJcbiAgICogQHByb3Age29uQ3JlYXRlfVxyXG4gICAqL1xyXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxyXG5cclxuICAvKipcclxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxyXG4gICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50XHJcbiAgICogdXBkYXRlcy48YnIgLz5cclxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XHJcbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cclxuICAgKiBAcHJvcCB7b25VcGRhdGV9XHJcbiAgICovXHJcbiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKCkge30sXHJcblxyXG4gIC8qKlxyXG4gICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuXHJcbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanMuXHJcbiAgICogQHByb3Age21vZGlmaWVyc31cclxuICAgKi9cclxuICBtb2RpZmllcnM6IG1vZGlmaWVyc1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBvbkNyZWF0ZVxyXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcclxuICovXHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIG9uVXBkYXRlXHJcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxyXG4gKi9cclxuXHJcbi8vIFV0aWxzXHJcbi8vIE1ldGhvZHNcclxudmFyIFBvcHBlciA9IGZ1bmN0aW9uICgpIHtcclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZS5cclxuICAgKiBAY2xhc3MgUG9wcGVyXHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgdGhlIHBvcHBlclxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxyXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XHJcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xyXG5cclxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xyXG4gICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcclxuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMsIG9wdGlvbnMpO1xyXG5cclxuICAgIC8vIGluaXQgc3RhdGVcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcclxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcclxuICAgICAgc2Nyb2xsUGFyZW50czogW11cclxuICAgIH07XHJcblxyXG4gICAgLy8gZ2V0IHJlZmVyZW5jZSBhbmQgcG9wcGVyIGVsZW1lbnRzIChhbGxvdyBqUXVlcnkgd3JhcHBlcnMpXHJcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xyXG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcclxuXHJcbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXHJcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XHJcbiAgICBPYmplY3Qua2V5cyhfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVycywgb3B0aW9ucy5tb2RpZmllcnMpKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcclxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XHJcbiAgICAgICAgbmFtZTogbmFtZVxyXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XHJcbiAgICB9KVxyXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXHJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBtb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIHdoZW4gUG9wcGVyLmpzIGdldCBpbml0ZWRcclxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxyXG4gICAgLy8gQkUgQVdBUkU6IGRvbid0IGFkZCBvcHRpb25zIHRvIGBvcHRpb25zLm1vZGlmaWVycy5uYW1lYCBidXQgdG8gYG1vZGlmaWVyT3B0aW9uc2AhXHJcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcclxuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcclxuICAgICAgICBtb2RpZmllck9wdGlvbnMub25Mb2FkKF90aGlzLnJlZmVyZW5jZSwgX3RoaXMucG9wcGVyLCBfdGhpcy5vcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIF90aGlzLnN0YXRlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XHJcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xyXG4gICAgICAvLyBzZXR1cCBldmVudCBsaXN0ZW5lcnMsIHRoZXkgd2lsbCB0YWtlIGNhcmUgb2YgdXBkYXRlIHRoZSBwb3NpdGlvbiBpbiBzcGVjaWZpYyBzaXR1YXRpb25zXHJcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xyXG4gIH1cclxuXHJcbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXHJcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXHJcblxyXG5cclxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XHJcbiAgICBrZXk6ICd1cGRhdGUnLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcclxuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogJ2Rlc3Ryb3knLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3kkJDEoKSB7XHJcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xyXG4gICAgICByZXR1cm4gZW5hYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6ICdkaXNhYmxlRXZlbnRMaXN0ZW5lcnMnLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcclxuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2NoZWR1bGVzIGFuIHVwZGF0ZS4gSXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZS5cclxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcclxuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cclxuICAgICAqIFN0YXJ0aW5nIGZyb20gdmVyc2lvbiAxLjcsIHRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHlvdVxyXG4gICAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXHJcbiAgICAgKlxyXG4gICAgICogKipERVBSRUNBVElPTioqOiBUaGlzIHdheSB0byBhY2Nlc3MgUG9wcGVyVXRpbHMgaXMgZGVwcmVjYXRlZFxyXG4gICAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cclxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XHJcbiAgICAgKiBndWFyYW50ZWUgdGhlbSB0byBmb2xsb3cgc2VtdmVyLiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrIVxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxyXG4gICAgICogQG1lbWJlciBVdGlsc1xyXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxyXG4gICAgICovXHJcblxyXG4gIH1dKTtcclxuICByZXR1cm4gUG9wcGVyO1xyXG59KCk7XHJcblxyXG4vKipcclxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXHJcbiAqIGFuZCBsZXRzIHlvdSB1c2UgaXQgYXMgcmVwbGFjZW1lbnQgb2YgYSByZWFsIERPTSBub2RlLjxiciAvPlxyXG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXHJcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxyXG4gKlxyXG4gKiBgYGBcclxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xyXG4gKiBgYGBcclxuICpcclxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXHJcbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxyXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBkYXRhLmdldEJvdW5kaW5nQ2xpZW50UmVjdFxyXG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXHJcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgd2lkdGggb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxyXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cclxuICovXHJcblxyXG5cclxuUG9wcGVyLlV0aWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKS5Qb3BwZXJVdGlscztcclxuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xyXG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcclxuXHJcbnJldHVybiBQb3BwZXI7XHJcblxyXG59KSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXIuanMubWFwXHJcblxyXG4vLy8gPSBsaWIvaXNvdG9wZS5qc1xyXG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBDdXJ0YWlucyh0KXt2YXIgZTsodGhpcy5wbGFuZXM9W10sdGhpcy5yZW5kZXJUYXJnZXRzPVtdLHRoaXMuc2hhZGVyUGFzc2VzPVtdLHRoaXMuX2ltYWdlQ2FjaGU9W10sdGhpcy5fZHJhd1N0YWNrcz17b3BhcXVlOntsZW5ndGg6MCxwcm9ncmFtczpbXX0sdHJhbnNwYXJlbnQ6e2xlbmd0aDowLHByb2dyYW1zOltdfSxyZW5kZXJQYXNzZXM6W10sc2NlbmVQYXNzZXM6W119LHRoaXMuX2RyYXdpbmdFbmFibGVkPSEwLHRoaXMuX2ZvcmNlUmVuZGVyPSExLFwic3RyaW5nXCI9PXR5cGVvZiB0KSYmKGNvbnNvbGUud2FybihcIlNpbmNlIHY0LjAgeW91IHNob3VsZCB1c2UgYW4gb2JqZWN0IHRvIHBhc3MgeW91ciBjb250YWluZXIgYW5kIG90aGVyIHBhcmFtZXRlcnMuIFBsZWFzZSByZWZlciB0byB0aGUgZG9jczogaHR0cHM6Ly93d3cuY3VydGFpbnNqcy5jb20vZG9jdW1lbnRhdGlvbi5odG1sXCIpLHQ9e2NvbnRhaW5lcjplPXR9KTt0LmNvbnRhaW5lcj9cInN0cmluZ1wiPT10eXBlb2YgdC5jb250YWluZXI/dGhpcy5jb250YWluZXI9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodC5jb250YWluZXIpOnQuY29udGFpbmVyIGluc3RhbmNlb2YgRWxlbWVudCYmKHRoaXMuY29udGFpbmVyPXQuY29udGFpbmVyKTooKGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuc2V0QXR0cmlidXRlKFwiaWRcIixcImN1cnRhaW5zLWNhbnZhc1wiKSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpLHRoaXMuY29udGFpbmVyPWUpO2lmKHRoaXMuX2F1dG9SZXNpemU9dC5hdXRvUmVzaXplLG51bGwhPT10aGlzLl9hdXRvUmVzaXplJiZ2b2lkIDAhPT10aGlzLl9hdXRvUmVzaXplfHwodGhpcy5fYXV0b1Jlc2l6ZT0hMCksdGhpcy5fYXV0b1JlbmRlcj10LmF1dG9SZW5kZXIsbnVsbCE9PXRoaXMuX2F1dG9SZW5kZXImJnZvaWQgMCE9PXRoaXMuX2F1dG9SZW5kZXJ8fCh0aGlzLl9hdXRvUmVuZGVyPSEwKSx0aGlzLl93YXRjaFNjcm9sbD10LndhdGNoU2Nyb2xsLG51bGwhPT10aGlzLl93YXRjaFNjcm9sbCYmdm9pZCAwIT09dGhpcy5fd2F0Y2hTY3JvbGx8fCh0aGlzLl93YXRjaFNjcm9sbD0hMCksdGhpcy5waXhlbFJhdGlvPXQucGl4ZWxSYXRpb3x8d2luZG93LmRldmljZVBpeGVsUmF0aW98fDEsdC5yZW5kZXJpbmdTY2FsZT1pc05hTih0LnJlbmRlcmluZ1NjYWxlKT8xOnBhcnNlRmxvYXQodC5yZW5kZXJpbmdTY2FsZSksdGhpcy5fcmVuZGVyaW5nU2NhbGU9TWF0aC5tYXgoLjI1LE1hdGgubWluKDEsdC5yZW5kZXJpbmdTY2FsZSkpLHRoaXMucHJlbXVsdGlwbGllZEFscGhhPXQucHJlbXVsdGlwbGllZEFscGhhfHwhMSx0aGlzLmFscGhhPXQuYWxwaGEsbnVsbCE9PXRoaXMuYWxwaGEmJnZvaWQgMCE9PXRoaXMuYWxwaGF8fCh0aGlzLmFscGhhPSEwKSx0aGlzLnByb2R1Y3Rpb25Nb2RlPXQucHJvZHVjdGlvbnx8ITEsIXRoaXMuY29udGFpbmVyKXJldHVybiB0aGlzLnByb2R1Y3Rpb25Nb2RlfHxjb25zb2xlLndhcm4oXCJZb3UgbXVzdCBzcGVjaWZ5IGEgdmFsaWQgY29udGFpbmVyIElEXCIpLHZvaWQodGhpcy5fb25FcnJvckNhbGxiYWNrJiZ0aGlzLl9vbkVycm9yQ2FsbGJhY2soKSk7dGhpcy5faW5pdCgpfUN1cnRhaW5zLnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbigpe3RoaXMuZ2xDYW52YXM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTt2YXIgdD17YWxwaGE6dGhpcy5hbHBoYSxwcmVtdWx0aXBsaWVkQWxwaGE6dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGF9O2lmKHRoaXMuZ2w9dGhpcy5nbENhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2wyXCIsdCksdGhpcy5faXNXZWJHTDI9ISF0aGlzLmdsLHRoaXMuZ2x8fCh0aGlzLmdsPXRoaXMuZ2xDYW52YXMuZ2V0Q29udGV4dChcIndlYmdsXCIsdCl8fHRoaXMuZ2xDYW52YXMuZ2V0Q29udGV4dChcImV4cGVyaW1lbnRhbC13ZWJnbFwiLHQpKSwhdGhpcy5nbClyZXR1cm4gdGhpcy5wcm9kdWN0aW9uTW9kZXx8Y29uc29sZS53YXJuKFwiV2ViR0wgY29udGV4dCBjb3VsZCBub3QgYmUgY3JlYXRlZFwiKSx2b2lkKHRoaXMuX29uRXJyb3JDYWxsYmFjayYmdGhpcy5fb25FcnJvckNhbGxiYWNrKCkpO3RoaXMuX2dldEV4dGVuc2lvbnMoKSx0aGlzLl9nbFN0YXRlPXtjdXJyZW50UHJvZ3JhbUlEOm51bGwscHJvZ3JhbXM6W10sY3VycmVudEJ1ZmZlcnNJRDowLHNldERlcHRoOm51bGwsZnJhbWVCdWZmZXJJRDpudWxsLHNjZW5lUGFzc0luZGV4Om51bGx9LHRoaXMuX2NvbnRleHRMb3N0SGFuZGxlcj10aGlzLl9jb250ZXh0TG9zdC5iaW5kKHRoaXMpLHRoaXMuZ2xDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dGxvc3RcIix0aGlzLl9jb250ZXh0TG9zdEhhbmRsZXIsITEpLHRoaXMuX2NvbnRleHRSZXN0b3JlZEhhbmRsZXI9dGhpcy5fY29udGV4dFJlc3RvcmVkLmJpbmQodGhpcyksdGhpcy5nbENhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwid2ViZ2xjb250ZXh0cmVzdG9yZWRcIix0aGlzLl9jb250ZXh0UmVzdG9yZWRIYW5kbGVyLCExKSx0aGlzLl9zY3JvbGxNYW5hZ2VyPXtoYW5kbGVyOnRoaXMuX3Njcm9sbC5iaW5kKHRoaXMsITApLHNob3VsZFdhdGNoOnRoaXMuX3dhdGNoU2Nyb2xsLHhPZmZzZXQ6d2luZG93LnBhZ2VYT2Zmc2V0LHlPZmZzZXQ6d2luZG93LnBhZ2VZT2Zmc2V0LGxhc3RYRGVsdGE6MCxsYXN0WURlbHRhOjB9LHRoaXMuX3dhdGNoU2Nyb2xsJiZ3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHRoaXMuX3Njcm9sbE1hbmFnZXIuaGFuZGxlcix7cGFzc2l2ZTohMH0pLHRoaXMuc2V0UGl4ZWxSYXRpbyh0aGlzLnBpeGVsUmF0aW8sITEpLHRoaXMuX3Jlc2l6ZUhhbmRsZXI9bnVsbCx0aGlzLl9hdXRvUmVzaXplJiYodGhpcy5fcmVzaXplSGFuZGxlcj10aGlzLnJlc2l6ZS5iaW5kKHRoaXMsITApLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5fcmVzaXplSGFuZGxlciwhMSkpLHRoaXMuX3JlYWR5VG9EcmF3KCl9LEN1cnRhaW5zLnByb3RvdHlwZS5fZ2V0RXh0ZW5zaW9ucz1mdW5jdGlvbigpe3RoaXMuX2V4dGVuc2lvbnM9W10sdGhpcy5faXNXZWJHTDI/KHRoaXMuX2V4dGVuc2lvbnMuRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdD10aGlzLmdsLmdldEV4dGVuc2lvbihcIkVYVF9jb2xvcl9idWZmZXJfZmxvYXRcIiksdGhpcy5fZXh0ZW5zaW9ucy5PRVNfdGV4dHVyZV9mbG9hdF9saW5lYXI9dGhpcy5nbC5nZXRFeHRlbnNpb24oXCJPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXJcIiksdGhpcy5fZXh0ZW5zaW9ucy5XRUJHTF9sb3NlX2NvbnRleHQ9dGhpcy5nbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9sb3NlX2NvbnRleHRcIikpOih0aGlzLl9leHRlbnNpb25zLk9FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0PXRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX3ZlcnRleF9hcnJheV9vYmplY3RcIiksdGhpcy5fZXh0ZW5zaW9ucy5PRVNfdGV4dHVyZV9mbG9hdD10aGlzLmdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2Zsb2F0XCIpLHRoaXMuX2V4dGVuc2lvbnMuT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyPXRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyXCIpLHRoaXMuX2V4dGVuc2lvbnMuT0VTX3RleHR1cmVfaGFsZl9mbG9hdD10aGlzLmdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2hhbGZfZmxvYXRcIiksdGhpcy5fZXh0ZW5zaW9ucy5PRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcj10aGlzLmdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyXCIpLHRoaXMuX2V4dGVuc2lvbnMuT0VTX2VsZW1lbnRfaW5kZXhfdWludD10aGlzLmdsLmdldEV4dGVuc2lvbihcIk9FU19lbGVtZW50X2luZGV4X3VpbnRcIiksdGhpcy5fZXh0ZW5zaW9ucy5PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXM9dGhpcy5nbC5nZXRFeHRlbnNpb24oXCJPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcIiksdGhpcy5fZXh0ZW5zaW9ucy5FWFRfc1JHQj10aGlzLmdsLmdldEV4dGVuc2lvbihcIkVYVF9zUkdCXCIpLHRoaXMuX2V4dGVuc2lvbnMuV0VCR0xfZGVwdGhfdGV4dHVyZT10aGlzLmdsLmdldEV4dGVuc2lvbihcIldFQkdMX2RlcHRoX3RleHR1cmVcIiksdGhpcy5fZXh0ZW5zaW9ucy5XRUJHTF9kcmF3X2J1ZmZlcnM9dGhpcy5nbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9kcmF3X2J1ZmZlcnNcIiksdGhpcy5fZXh0ZW5zaW9ucy5XRUJHTF9sb3NlX2NvbnRleHQ9dGhpcy5nbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9sb3NlX2NvbnRleHRcIikpfSxDdXJ0YWlucy5wcm90b3R5cGUuc2V0UGl4ZWxSYXRpbz1mdW5jdGlvbih0LGUpe3RoaXMucGl4ZWxSYXRpbz1wYXJzZUZsb2F0KE1hdGgubWF4KHQsMSkpfHwxLHRoaXMucmVzaXplKGUpfSxDdXJ0YWlucy5wcm90b3R5cGUuX3NldFNpemU9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0aGlzLl9ib3VuZGluZ1JlY3Q9e3dpZHRoOnQud2lkdGgqdGhpcy5waXhlbFJhdGlvLGhlaWdodDp0LmhlaWdodCp0aGlzLnBpeGVsUmF0aW8sdG9wOnQudG9wKnRoaXMucGl4ZWxSYXRpbyxsZWZ0OnQubGVmdCp0aGlzLnBpeGVsUmF0aW99O3ZhciBlPSEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVmVyc2lvblxcL1tcXGRcXC5dKy4qU2FmYXJpLyksaT0vaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmIXdpbmRvdy5NU1N0cmVhbTtpZihlJiZpKXt0aGlzLl9ib3VuZGluZ1JlY3QudG9wPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO3QmJiFpc05hTih0Lm9mZnNldFRvcCk7KWUrPXQub2Zmc2V0VG9wLXQuc2Nyb2xsVG9wLHQ9dC5vZmZzZXRQYXJlbnQ7cmV0dXJuIGV9KHRoaXMuY29udGFpbmVyKSp0aGlzLnBpeGVsUmF0aW99dGhpcy5nbENhbnZhcy5zdHlsZS53aWR0aD1NYXRoLmZsb29yKHRoaXMuX2JvdW5kaW5nUmVjdC53aWR0aC90aGlzLnBpeGVsUmF0aW8pK1wicHhcIix0aGlzLmdsQ2FudmFzLnN0eWxlLmhlaWdodD1NYXRoLmZsb29yKHRoaXMuX2JvdW5kaW5nUmVjdC5oZWlnaHQvdGhpcy5waXhlbFJhdGlvKStcInB4XCIsdGhpcy5nbENhbnZhcy53aWR0aD1NYXRoLmZsb29yKHRoaXMuX2JvdW5kaW5nUmVjdC53aWR0aCp0aGlzLl9yZW5kZXJpbmdTY2FsZS90aGlzLnBpeGVsUmF0aW8pLHRoaXMuZ2xDYW52YXMuaGVpZ2h0PU1hdGguZmxvb3IodGhpcy5fYm91bmRpbmdSZWN0LmhlaWdodCp0aGlzLl9yZW5kZXJpbmdTY2FsZS90aGlzLnBpeGVsUmF0aW8pLHRoaXMuZ2wudmlld3BvcnQoMCwwLHRoaXMuZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLHRoaXMuZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCksdGhpcy5fc2Nyb2xsTWFuYWdlci5zaG91bGRXYXRjaCYmKHRoaXMuX3Njcm9sbE1hbmFnZXIueE9mZnNldD13aW5kb3cucGFnZVhPZmZzZXQsdGhpcy5fc2Nyb2xsTWFuYWdlci55T2Zmc2V0PXdpbmRvdy5wYWdlWU9mZnNldCl9LEN1cnRhaW5zLnByb3RvdHlwZS5nZXRCb3VuZGluZ1JlY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYm91bmRpbmdSZWN0fSxDdXJ0YWlucy5wcm90b3R5cGUucmVzaXplPWZ1bmN0aW9uKHQpe3RoaXMuX3NldFNpemUoKTtmb3IodmFyIGU9MDtlPHRoaXMucGxhbmVzLmxlbmd0aDtlKyspdGhpcy5wbGFuZXNbZV0uX2NhbkRyYXcmJnRoaXMucGxhbmVzW2VdLnBsYW5lUmVzaXplKCk7Zm9yKGU9MDtlPHRoaXMuc2hhZGVyUGFzc2VzLmxlbmd0aDtlKyspdGhpcy5zaGFkZXJQYXNzZXNbZV0uX2NhbkRyYXcmJnRoaXMuc2hhZGVyUGFzc2VzW2VdLnBsYW5lUmVzaXplKCk7Zm9yKGU9MDtlPHRoaXMucmVuZGVyVGFyZ2V0cy5sZW5ndGg7ZSsrKXRoaXMucmVuZGVyVGFyZ2V0c1tlXS5yZXNpemUoKTt0aGlzLm5lZWRSZW5kZXIoKTt2YXIgaT10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtpLl9vbkFmdGVyUmVzaXplQ2FsbGJhY2smJnQmJmkuX29uQWZ0ZXJSZXNpemVDYWxsYmFjaygpfSwwKX0sQ3VydGFpbnMucHJvdG90eXBlLl9zY3JvbGw9ZnVuY3Rpb24oKXt2YXIgdD17eDp3aW5kb3cucGFnZVhPZmZzZXQseTp3aW5kb3cucGFnZVlPZmZzZXR9O2lmKHRoaXMudXBkYXRlU2Nyb2xsVmFsdWVzKHQueCx0LnkpLHRoaXMuX3Njcm9sbE1hbmFnZXIuc2hvdWxkV2F0Y2gpe2Zvcih2YXIgZT0wO2U8dGhpcy5wbGFuZXMubGVuZ3RoO2UrKyl0aGlzLnBsYW5lc1tlXS53YXRjaFNjcm9sbCYmdGhpcy5wbGFuZXNbZV0udXBkYXRlU2Nyb2xsUG9zaXRpb24oKTt0aGlzLm5lZWRSZW5kZXIoKX12YXIgaT10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtpLl9vblNjcm9sbENhbGxiYWNrJiZpLl9vblNjcm9sbENhbGxiYWNrKCl9LDApfSxDdXJ0YWlucy5wcm90b3R5cGUudXBkYXRlU2Nyb2xsVmFsdWVzPWZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcy5fc2Nyb2xsTWFuYWdlci54T2Zmc2V0O3RoaXMuX3Njcm9sbE1hbmFnZXIueE9mZnNldD10LHRoaXMuX3Njcm9sbE1hbmFnZXIubGFzdFhEZWx0YT1pLXRoaXMuX3Njcm9sbE1hbmFnZXIueE9mZnNldDt2YXIgcz10aGlzLl9zY3JvbGxNYW5hZ2VyLnlPZmZzZXQ7dGhpcy5fc2Nyb2xsTWFuYWdlci55T2Zmc2V0PWUsdGhpcy5fc2Nyb2xsTWFuYWdlci5sYXN0WURlbHRhPXMtdGhpcy5fc2Nyb2xsTWFuYWdlci55T2Zmc2V0fSxDdXJ0YWlucy5wcm90b3R5cGUuZ2V0U2Nyb2xsRGVsdGFzPWZ1bmN0aW9uKCl7cmV0dXJue3g6dGhpcy5fc2Nyb2xsTWFuYWdlci5sYXN0WERlbHRhLHk6dGhpcy5fc2Nyb2xsTWFuYWdlci5sYXN0WURlbHRhfX0sQ3VydGFpbnMucHJvdG90eXBlLmdldFNjcm9sbFZhbHVlcz1mdW5jdGlvbigpe3JldHVybnt4OnRoaXMuX3Njcm9sbE1hbmFnZXIueE9mZnNldCx5OnRoaXMuX3Njcm9sbE1hbmFnZXIueU9mZnNldH19LEN1cnRhaW5zLnByb3RvdHlwZS5lbmFibGVEcmF3aW5nPWZ1bmN0aW9uKCl7dGhpcy5fZHJhd2luZ0VuYWJsZWQ9ITB9LEN1cnRhaW5zLnByb3RvdHlwZS5kaXNhYmxlRHJhd2luZz1mdW5jdGlvbigpe3RoaXMuX2RyYXdpbmdFbmFibGVkPSExfSxDdXJ0YWlucy5wcm90b3R5cGUubmVlZFJlbmRlcj1mdW5jdGlvbigpe3RoaXMuX2ZvcmNlUmVuZGVyPSEwfSxDdXJ0YWlucy5wcm90b3R5cGUuX2NvbnRleHRMb3N0PWZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0aGlzLl9nbFN0YXRlPXtjdXJyZW50UHJvZ3JhbUlEOm51bGwscHJvZ3JhbXM6W10sY3VycmVudEJ1ZmZlcnNJRDowLHNldERlcHRoOm51bGwsZnJhbWVCdWZmZXJJRDpudWxsLHNjZW5lUGFzc0luZGV4Om51bGx9LHRoaXMuX2FuaW1hdGlvbkZyYW1lSUQmJndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZUlEKTt2YXIgZT10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtlLl9vbkNvbnRleHRMb3N0Q2FsbGJhY2smJmUuX29uQ29udGV4dExvc3RDYWxsYmFjaygpfSwwKX0sQ3VydGFpbnMucHJvdG90eXBlLnJlc3RvcmVDb250ZXh0PWZ1bmN0aW9uKCl7dGhpcy5nbCYmdGhpcy5fZXh0ZW5zaW9ucy5XRUJHTF9sb3NlX2NvbnRleHQ/dGhpcy5fZXh0ZW5zaW9ucy5XRUJHTF9sb3NlX2NvbnRleHQucmVzdG9yZUNvbnRleHQoKTp0aGlzLnByb2R1Y3Rpb25Nb2RlfHwodGhpcy5nbD90aGlzLl9leHRlbnNpb25zLldFQkdMX2xvc2VfY29udGV4dHx8Y29uc29sZS53YXJuKFwiQ291bGQgbm90IHJlc3RvcmUgY29udGV4dCBiZWNhdXNlIHRoZSByZXN0b3JlIGNvbnRleHQgZXh0ZW5zaW9uIGlzIG5vdCBkZWZpbmVkXCIpOmNvbnNvbGUud2FybihcIkNvdWxkIG5vdCByZXN0b3JlIGNvbnRleHQgYmVjYXVzZSB0aGUgY29udGV4dCBpcyBub3QgZGVmaW5lZFwiKSl9LEN1cnRhaW5zLnByb3RvdHlwZS5fY29udGV4dFJlc3RvcmVkPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZHJhd2luZ0VuYWJsZWQ7dGhpcy5fZHJhd2luZ0VuYWJsZWQ9ITEsdGhpcy5fZ2V0RXh0ZW5zaW9ucygpLHRoaXMuX3NldEJsZW5kRnVuYygpLHRoaXMuX3NldERlcHRoKCEwKSx0aGlzLl9kcmF3U3RhY2tzPXtvcGFxdWU6e2xlbmd0aDowLHByb2dyYW1zOltdfSx0cmFuc3BhcmVudDp7bGVuZ3RoOjAscHJvZ3JhbXM6W119LHJlbmRlclBhc3NlczpbXSxzY2VuZVBhc3NlczpbXX0sdGhpcy5faW1hZ2VDYWNoZT1bXTtmb3IodmFyIGU9MDtlPHRoaXMucmVuZGVyVGFyZ2V0cy5sZW5ndGg7ZSsrKXRoaXMucmVuZGVyVGFyZ2V0c1tlXS5fcmVzdG9yZUNvbnRleHQoKTtmb3IoZT0wO2U8dGhpcy5wbGFuZXMubGVuZ3RoO2UrKyl0aGlzLnBsYW5lc1tlXS5fcmVzdG9yZUNvbnRleHQoKTtmb3IoZT0wO2U8dGhpcy5zaGFkZXJQYXNzZXMubGVuZ3RoO2UrKyl0aGlzLnNoYWRlclBhc3Nlc1tlXS5fcmVzdG9yZUNvbnRleHQoKTt0aGlzLl9vbkNvbnRleHRSZXN0b3JlZENhbGxiYWNrJiZ0aGlzLl9vbkNvbnRleHRSZXN0b3JlZENhbGxiYWNrKCksdGhpcy5fZHJhd2luZ0VuYWJsZWQ9dCx0aGlzLl9hdXRvUmVuZGVyJiZ0aGlzLl9hbmltYXRlKCl9LEN1cnRhaW5zLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7Zm9yKHRoaXMuX2lzRGVzdHJveWluZz0hMDt0aGlzLnBsYW5lcy5sZW5ndGg+MDspdGhpcy5yZW1vdmVQbGFuZSh0aGlzLnBsYW5lc1swXSk7Zm9yKDt0aGlzLnNoYWRlclBhc3Nlcy5sZW5ndGg+MDspdGhpcy5yZW1vdmVTaGFkZXJQYXNzKHRoaXMuc2hhZGVyUGFzc2VzWzBdKTtmb3IoO3RoaXMucmVuZGVyVGFyZ2V0cy5sZW5ndGg+MDspdGhpcy5yZW1vdmVSZW5kZXJUYXJnZXQodGhpcy5yZW5kZXJUYXJnZXRzWzBdKTtmb3IodmFyIHQ9MDt0PHRoaXMuX2dsU3RhdGUucHJvZ3JhbXMubGVuZ3RoO3QrKyl7dmFyIGU9dGhpcy5fZ2xTdGF0ZS5wcm9ncmFtc1t0XTt0aGlzLmdsLmRlbGV0ZVNoYWRlcihlLmZyYWdtZW50U2hhZGVyKSx0aGlzLmdsLmRlbGV0ZVNoYWRlcihlLnZlcnRleFNoYWRlciksdGhpcy5nbC5kZWxldGVQcm9ncmFtKGUucHJvZ3JhbSl9dGhpcy5fZ2xTdGF0ZT17Y3VycmVudFByb2dyYW1JRDpudWxsLHByb2dyYW1zOltdLGN1cnJlbnRCdWZmZXJzSUQ6MCxzZXREZXB0aDpudWxsLGZyYW1lQnVmZmVySUQ6bnVsbCxzY2VuZVBhc3NJbmRleDpudWxsfTt2YXIgaT10aGlzLHM9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXswPT09aS5wbGFuZXMubGVuZ3RoJiYwPT09aS5zaGFkZXJQYXNzZXMubGVuZ3RoJiYwPT09aS5yZW5kZXJUYXJnZXRzLmxlbmd0aCYmKGNsZWFySW50ZXJ2YWwocyksaS5fY2xlYXIoKSxpLl9hbmltYXRpb25GcmFtZUlEJiZ3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaS5fYW5pbWF0aW9uRnJhbWVJRCksdGhpcy5fcmVzaXplSGFuZGxlciYmd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixpLl9yZXNpemVIYW5kbGVyLCExKSx0aGlzLl93YXRjaFNjcm9sbCYmd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix0aGlzLl9zY3JvbGxNYW5hZ2VyLmhhbmRsZXIse3Bhc3NpdmU6ITB9KSxpLmdsQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGxvc3RcIixpLl9jb250ZXh0TG9zdEhhbmRsZXIsITEpLGkuZ2xDYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndlYmdscmVzdG9yZWRcIixpLl9jb250ZXh0UmVzdG9yZWRIYW5kbGVyLCExKSxpLmdsJiZpLl9leHRlbnNpb25zLldFQkdMX2xvc2VfY29udGV4dCYmaS5fZXh0ZW5zaW9ucy5XRUJHTF9sb3NlX2NvbnRleHQubG9zZUNvbnRleHQoKSxpLmdsQ2FudmFzLndpZHRoPWkuZ2xDYW52YXMud2lkdGgsaS5nbD1udWxsLGkuY29udGFpbmVyLnJlbW92ZUNoaWxkKGkuZ2xDYW52YXMpLGkuY29udGFpbmVyPW51bGwsaS5nbENhbnZhcz1udWxsKX0sMTAwKX0sQ3VydGFpbnMucHJvdG90eXBlLl9jcmVhdGVTaGFkZXI9ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLmdsLmNyZWF0ZVNoYWRlcihlKTtpZih0aGlzLmdsLnNoYWRlclNvdXJjZShpLHQpLHRoaXMuZ2wuY29tcGlsZVNoYWRlcihpKSwhdGhpcy5wcm9kdWN0aW9uTW9kZSYmIXRoaXMuZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKGksdGhpcy5nbC5DT01QSUxFX1NUQVRVUykpe2Zvcih2YXIgcz1lPT09dGhpcy5nbC5WRVJURVhfU0hBREVSP1widmVydGV4IHNoYWRlclwiOlwiZnJhZ21lbnQgc2hhZGVyXCIscj10aGlzLmdsLmdldFNoYWRlclNvdXJjZShpKS5zcGxpdChcIlxcblwiKSxhPTA7YTxyLmxlbmd0aDthKyspclthXT1hKzErXCI6IFwiK3JbYV07cmV0dXJuIHI9ci5qb2luKFwiXFxuXCIpLGNvbnNvbGUud2FybihcIkVycm9ycyBvY2N1cnJlZCB3aGlsZSBjb21waWxpbmcgdGhlXCIscyxcIjpcXG5cIix0aGlzLmdsLmdldFNoYWRlckluZm9Mb2coaSkpLGNvbnNvbGUuZXJyb3IociksbnVsbH1yZXR1cm4gaX0sQ3VydGFpbnMucHJvdG90eXBlLl9pc0VxdWFsU2hhZGVyPWZ1bmN0aW9uKHQsZSl7dmFyIGk9ITE7cmV0dXJuIDA9PT10LmxvY2FsZUNvbXBhcmUoZSkmJihpPSEwKSxpfSxDdXJ0YWlucy5wcm90b3R5cGUuX3NldHVwUHJvZ3JhbT1mdW5jdGlvbih0LGUsaSl7Zm9yKHZhciBzPXt9LHI9MDtyPHRoaXMuX2dsU3RhdGUucHJvZ3JhbXMubGVuZ3RoO3IrKylpZih0aGlzLl9pc0VxdWFsU2hhZGVyKHRoaXMuX2dsU3RhdGUucHJvZ3JhbXNbcl0udnNDb2RlLHQpJiZ0aGlzLl9pc0VxdWFsU2hhZGVyKHRoaXMuX2dsU3RhdGUucHJvZ3JhbXNbcl0uZnNDb2RlLGUpKXtzPXRoaXMuX2dsU3RhdGUucHJvZ3JhbXNbcl07YnJlYWt9aWYocy5wcm9ncmFtKXtpZihpLnNoYXJlUHJvZ3JhbSlyZXR1cm4gczt2YXIgYT10aGlzLl91c2VFeGlzdGluZ1NoYWRlcnMocyk7cmV0dXJuIHRoaXMuX2NyZWF0ZVByb2dyYW0oYSxpLl90eXBlLGkpfXJldHVybiEhKGE9dGhpcy5fdXNlTmV3U2hhZGVycyh0LGUpKSYmdGhpcy5fY3JlYXRlUHJvZ3JhbShhLGkuX3R5cGUsaSl9LEN1cnRhaW5zLnByb3RvdHlwZS5fdXNlRXhpc3RpbmdTaGFkZXJzPWZ1bmN0aW9uKHQpe3JldHVybnt2czp7dmVydGV4U2hhZGVyOnQudmVydGV4U2hhZGVyLHZzQ29kZTp0LnZzQ29kZX0sZnM6e2ZyYWdtZW50U2hhZGVyOnQuZnJhZ21lbnRTaGFkZXIsZnNDb2RlOnQuZnNDb2RlfX19LEN1cnRhaW5zLnByb3RvdHlwZS5fdXNlTmV3U2hhZGVycz1mdW5jdGlvbih0LGUpe3ZhciBpPSEwLHM9dGhpcy5fY3JlYXRlU2hhZGVyKHQsdGhpcy5nbC5WRVJURVhfU0hBREVSKSxyPXRoaXMuX2NyZWF0ZVNoYWRlcihlLHRoaXMuZ2wuRlJBR01FTlRfU0hBREVSKTtyZXR1cm4gcyYmcnx8KHRoaXMucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBmaW5kIG9yIGNvbXBpbGUgdGhlIHZlcnRleCBvciBmcmFnbWVudCBzaGFkZXJcIiksaT0hMSksaT97dnM6e3ZlcnRleFNoYWRlcjpzLHZzQ29kZTp0fSxmczp7ZnJhZ21lbnRTaGFkZXI6cixmc0NvZGU6ZX19Oml9LEN1cnRhaW5zLnByb3RvdHlwZS5fY3JlYXRlUHJvZ3JhbT1mdW5jdGlvbih0LGUsaSl7dmFyIHM9dGhpcy5nbCxyPSEwLGE9cy5jcmVhdGVQcm9ncmFtKCk7aWYociYmKHMuYXR0YWNoU2hhZGVyKGEsdC52cy52ZXJ0ZXhTaGFkZXIpLHMuYXR0YWNoU2hhZGVyKGEsdC5mcy5mcmFnbWVudFNoYWRlcikscy5saW5rUHJvZ3JhbShhKSx0aGlzLnByb2R1Y3Rpb25Nb2RlfHxzLmdldFByb2dyYW1QYXJhbWV0ZXIoYSxzLkxJTktfU1RBVFVTKXx8KGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBpbml0aWFsaXplIHRoZSBzaGFkZXIgcHJvZ3JhbS5cIikscj0hMSkpLHIpe3ZhciBuPXtpZDp0aGlzLl9nbFN0YXRlLnByb2dyYW1zLmxlbmd0aCx2c0NvZGU6dC52cy52c0NvZGUsdmVydGV4U2hhZGVyOnQudnMudmVydGV4U2hhZGVyLGZzQ29kZTp0LmZzLmZzQ29kZSxmcmFnbWVudFNoYWRlcjp0LmZzLmZyYWdtZW50U2hhZGVyLHByb2dyYW06YSx0eXBlOmV9O3JldHVyblwiUGxhbmVcIj09PWUmJih0aGlzLl9kcmF3U3RhY2tzLm9wYXF1ZS5wcm9ncmFtc1tcInByb2dyYW0tXCIrbi5pZF09W10sdGhpcy5fZHJhd1N0YWNrcy50cmFuc3BhcmVudC5wcm9ncmFtc1tcInByb2dyYW0tXCIrbi5pZF09W10pLHRoaXMuX2dsU3RhdGUucHJvZ3JhbXMucHVzaChuKSxufXJldHVybiByfSxDdXJ0YWlucy5wcm90b3R5cGUuX3VzZVByb2dyYW09ZnVuY3Rpb24odCl7bnVsbCE9PXRoaXMuX2dsU3RhdGUuY3VycmVudFByb2dyYW1JRCYmdGhpcy5fZ2xTdGF0ZS5jdXJyZW50UHJvZ3JhbUlEPT09dC5pZHx8KHRoaXMuZ2wudXNlUHJvZ3JhbSh0LnByb2dyYW0pLHRoaXMuX2dsU3RhdGUuY3VycmVudFByb2dyYW1JRD10LmlkKX0sQ3VydGFpbnMucHJvdG90eXBlLmFkZFBsYW5lPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5nbCl7aWYoIXR8fDA9PT10Lmxlbmd0aClyZXR1cm4gdGhpcy5wcm9kdWN0aW9uTW9kZXx8Y29uc29sZS53YXJuKFwiVGhlIGh0bWwgZWxlbWVudCB5b3Ugc3BlY2lmaWVkIGRvZXMgbm90IGN1cnJlbnRseSBleGlzdHMgaW4gdGhlIERPTVwiKSx0aGlzLl9vbkVycm9yQ2FsbGJhY2smJnRoaXMuX29uRXJyb3JDYWxsYmFjaygpLCExO3ZhciBpPW5ldyBDdXJ0YWlucy5QbGFuZSh0aGlzLHQsZSk7cmV0dXJuIGkuX3VzZWRQcm9ncmFtP3RoaXMucGxhbmVzLnB1c2goaSk6aT0hMSxpfXJldHVybiB0aGlzLnByb2R1Y3Rpb25Nb2RlfHxjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gY3JlYXRlIGEgcGxhbmUuIFRoZSBXZWJHbCBjb250ZXh0IGNvdWxkbid0IGJlIGNyZWF0ZWRcIiksdGhpcy5fb25FcnJvckNhbGxiYWNrJiZ0aGlzLl9vbkVycm9yQ2FsbGJhY2soKSxudWxsfSxDdXJ0YWlucy5wcm90b3R5cGUucmVtb3ZlUGxhbmU9ZnVuY3Rpb24odCl7dmFyIGU7dC5fY2FuRHJhdz0hMSx0JiZ0Ll9kaXNwb3NlKCk7Zm9yKHZhciBpPTA7aTx0aGlzLnBsYW5lcy5sZW5ndGg7aSsrKXQuX3V1aWQ9PT10aGlzLnBsYW5lc1tpXS5fdXVpZCYmKGU9aSk7dD1udWxsLHRoaXMucGxhbmVzW2VdPW51bGwsdGhpcy5wbGFuZXMuc3BsaWNlKGUsMSk7Zm9yKGk9MDtpPHRoaXMuX2dsU3RhdGUucHJvZ3JhbXMubGVuZ3RoO2krKyl0aGlzLl9kcmF3U3RhY2tzLm9wYXF1ZS5wcm9ncmFtc1tcInByb2dyYW0tXCIrdGhpcy5fZ2xTdGF0ZS5wcm9ncmFtc1tpXS5pZF09W10sdGhpcy5fZHJhd1N0YWNrcy50cmFuc3BhcmVudC5wcm9ncmFtc1tcInByb2dyYW0tXCIrICt0aGlzLl9nbFN0YXRlLnByb2dyYW1zW2ldLmlkXT1bXTt0aGlzLl9kcmF3U3RhY2tzLm9wYXF1ZS5sZW5ndGg9MCx0aGlzLl9kcmF3U3RhY2tzLnRyYW5zcGFyZW50Lmxlbmd0aD0wO2ZvcihpPTA7aTx0aGlzLnBsYW5lcy5sZW5ndGg7aSsrKXRoaXMucGxhbmVzW2ldLmluZGV4PWksdGhpcy5fc3RhY2tQbGFuZSh0aGlzLnBsYW5lc1tpXSk7dGhpcy5nbCYmdGhpcy5fY2xlYXIoKSx0aGlzLl9nbFN0YXRlLmN1cnJlbnRCdWZmZXJzSUQ9MH0sQ3VydGFpbnMucHJvdG90eXBlLl9zdGFja1BsYW5lPWZ1bmN0aW9uKHQpe3ZhciBlPXQuX3RyYW5zcGFyZW50P1widHJhbnNwYXJlbnRcIjpcIm9wYXF1ZVwiO1widHJhbnNwYXJlbnRcIj09PWU/dGhpcy5fZHJhd1N0YWNrc1tlXS5wcm9ncmFtc1tcInByb2dyYW0tXCIrdC5fdXNlZFByb2dyYW0uaWRdLnVuc2hpZnQodC5pbmRleCk6dGhpcy5fZHJhd1N0YWNrc1tlXS5wcm9ncmFtc1tcInByb2dyYW0tXCIrdC5fdXNlZFByb2dyYW0uaWRdLnB1c2godC5pbmRleCksdGhpcy5fZHJhd1N0YWNrc1tlXS5sZW5ndGgrK30sQ3VydGFpbnMucHJvdG90eXBlLmFkZFJlbmRlclRhcmdldD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5nbD9uZXcgQ3VydGFpbnMuUmVuZGVyVGFyZ2V0KHRoaXMsdCk6KHRoaXMucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBjcmVhdGUgYSByZW5kZXIgdGFyZ2V0LiBUaGUgV2ViR2wgY29udGV4dCBjb3VsZG4ndCBiZSBjcmVhdGVkXCIpLHRoaXMuX29uRXJyb3JDYWxsYmFjayYmdGhpcy5fb25FcnJvckNhbGxiYWNrKCksbnVsbCl9LEN1cnRhaW5zLnByb3RvdHlwZS5yZW1vdmVSZW5kZXJUYXJnZXQ9ZnVuY3Rpb24odCl7aWYodC5fc2hhZGVyUGFzcyl0aGlzLnByb2R1Y3Rpb25Nb2RlfHxjb25zb2xlLndhcm4oXCJZb3UncmUgdHJ5aW5nIHRvIHJlbW92ZSBhIHJlbmRlciB0YXJnZXQgYXR0YWNoZWQgdG8gYSBzaGFkZXIgcGFzcy4gWW91IHNob3VsZCByZW1vdmUgdGhhdCBzaGFkZXIgcGFzcyBpbnN0ZWFkOlwiLHQuX3NoYWRlclBhc3MpO2Vsc2V7Zm9yKHZhciBlPTA7ZTx0aGlzLnBsYW5lcy5sZW5ndGg7ZSsrKXRoaXMucGxhbmVzW2VdLnRhcmdldCYmdGhpcy5wbGFuZXNbZV0udGFyZ2V0Ll91dWlkPT09dC5fdXVpZCYmKHRoaXMucGxhbmVzW2VdLnRhcmdldD1udWxsKTt2YXIgaTtmb3IoZT0wO2U8dGhpcy5yZW5kZXJUYXJnZXRzLmxlbmd0aDtlKyspdC5fdXVpZD09PXRoaXMucmVuZGVyVGFyZ2V0c1tlXS5fdXVpZCYmKGk9ZSk7dGhpcy5yZW5kZXJUYXJnZXRzW2ldPW51bGwsdGhpcy5yZW5kZXJUYXJnZXRzLnNwbGljZShpLDEpLHQmJnQuX2Rpc3Bvc2UoKSx0PW51bGwsdGhpcy5nbCYmdGhpcy5fY2xlYXIoKSx0aGlzLl9nbFN0YXRlLmN1cnJlbnRCdWZmZXJzSUQ9MH19LEN1cnRhaW5zLnByb3RvdHlwZS5hZGRTaGFkZXJQYXNzPWZ1bmN0aW9uKHQpe2lmKHRoaXMuZ2wpe3ZhciBlPW5ldyBDdXJ0YWlucy5TaGFkZXJQYXNzKHRoaXMsdCk7cmV0dXJuIGUuX3VzZWRQcm9ncmFtPyh0LnJlbmRlclRhcmdldD90aGlzLl9kcmF3U3RhY2tzLnJlbmRlclBhc3Nlcy5wdXNoKGUuaW5kZXgpOnRoaXMuX2RyYXdTdGFja3Muc2NlbmVQYXNzZXMucHVzaChlLmluZGV4KSx0aGlzLnNoYWRlclBhc3Nlcy5wdXNoKGUpKTplPSExLGV9cmV0dXJuIHRoaXMucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBjcmVhdGUgYSBzaGFkZXIgcGFzcy4gVGhlIFdlYkdsIGNvbnRleHQgY291bGRuJ3QgYmUgY3JlYXRlZFwiKSx0aGlzLl9vbkVycm9yQ2FsbGJhY2smJnRoaXMuX29uRXJyb3JDYWxsYmFjaygpLG51bGx9LEN1cnRhaW5zLnByb3RvdHlwZS5yZW1vdmVTaGFkZXJQYXNzPWZ1bmN0aW9uKHQpe3ZhciBlO3QuX2NhbkRyYXc9ITEsdC50YXJnZXQmJih0LnRhcmdldC5fc2hhZGVyUGFzcz1udWxsLHRoaXMucmVtb3ZlUmVuZGVyVGFyZ2V0KHQudGFyZ2V0KSx0LnRhcmdldD1udWxsKTtmb3IodmFyIGk9MDtpPHRoaXMuc2hhZGVyUGFzc2VzLmxlbmd0aDtpKyspdC5fdXVpZD09PXRoaXMuc2hhZGVyUGFzc2VzW2ldLl91dWlkJiYoZT1pKTt0aGlzLnNoYWRlclBhc3Nlcy5zcGxpY2UoZSwxKSx0aGlzLl9kcmF3U3RhY2tzLnNjZW5lUGFzc2VzPVtdLHRoaXMuX2RyYXdTdGFja3MucmVuZGVyUGFzc2VzPVtdO2ZvcihpPTA7aTx0aGlzLnNoYWRlclBhc3Nlcy5sZW5ndGg7aSsrKXRoaXMuc2hhZGVyUGFzc2VzW2ldLmluZGV4PWksdGhpcy5zaGFkZXJQYXNzZXNbaV0uX2lzU2NlbmVQYXNzP3RoaXMuX2RyYXdTdGFja3Muc2NlbmVQYXNzZXMucHVzaCh0aGlzLnNoYWRlclBhc3Nlc1tpXS5pbmRleCk6dGhpcy5fZHJhd1N0YWNrcy5yZW5kZXJQYXNzZXMucHVzaCh0aGlzLnNoYWRlclBhc3Nlc1tpXS5pbmRleCk7MD09PXRoaXMuX2RyYXdTdGFja3Muc2NlbmVQYXNzZXMubGVuZ3RoJiYodGhpcy5fZ2xTdGF0ZS5zY2VuZVBhc3NJbmRleD1udWxsKSx0JiZ0Ll9kaXNwb3NlKCksdD1udWxsLHRoaXMuZ2wmJnRoaXMuX2NsZWFyKCksdGhpcy5fZ2xTdGF0ZS5jdXJyZW50QnVmZmVyc0lEPTB9LEN1cnRhaW5zLnByb3RvdHlwZS5fY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVHx0aGlzLmdsLkRFUFRIX0JVRkZFUl9CSVQpfSxDdXJ0YWlucy5wcm90b3R5cGUuX2JpbmRGcmFtZUJ1ZmZlcj1mdW5jdGlvbih0LGUpe3ZhciBpPW51bGw7dD8oaT10LmluZGV4KSE9PXRoaXMuX2dsU3RhdGUuZnJhbWVCdWZmZXJJRCYmKHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsdC5fZnJhbWVCdWZmZXIpLHRoaXMuZ2wudmlld3BvcnQoMCwwLHQuX3NpemUud2lkdGgsdC5fc2l6ZS5oZWlnaHQpLHQuX3Nob3VsZENsZWFyJiYhZSYmdGhpcy5fY2xlYXIoKSk6bnVsbCE9PXRoaXMuX2dsU3RhdGUuZnJhbWVCdWZmZXJJRCYmKHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsbnVsbCksdGhpcy5nbC52aWV3cG9ydCgwLDAsdGhpcy5nbC5kcmF3aW5nQnVmZmVyV2lkdGgsdGhpcy5nbC5kcmF3aW5nQnVmZmVySGVpZ2h0KSksdGhpcy5fZ2xTdGF0ZS5mcmFtZUJ1ZmZlcklEPWl9LEN1cnRhaW5zLnByb3RvdHlwZS5fc2V0RGVwdGg9ZnVuY3Rpb24odCl7dCYmIXRoaXMuX2dsU3RhdGUuZGVwdGhUZXN0Pyh0aGlzLl9nbFN0YXRlLmRlcHRoVGVzdD10LHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCkpOiF0JiZ0aGlzLl9nbFN0YXRlLmRlcHRoVGVzdCYmKHRoaXMuX2dsU3RhdGUuZGVwdGhUZXN0PXQsdGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCkpfSxDdXJ0YWlucy5wcm90b3R5cGUuX3NldEJsZW5kRnVuYz1mdW5jdGlvbigpe3RoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuQkxFTkQpLHRoaXMucHJlbXVsdGlwbGllZEFscGhhP3RoaXMuZ2wuYmxlbmRGdW5jKHRoaXMuZ2wuU1JDX0FMUEhBLHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk6dGhpcy5nbC5ibGVuZEZ1bmModGhpcy5nbC5PTkUsdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBKX0sQ3VydGFpbnMucHJvdG90eXBlLl9nZW5lcmF0ZVVVSUQ9ZnVuY3Rpb24oKXtyZXR1cm5cInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoL1t4eV0vZyxmdW5jdGlvbih0KXt2YXIgZT0xNipNYXRoLnJhbmRvbSgpfDA7cmV0dXJuKFwieFwiPT10P2U6MyZlfDgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfSl9LEN1cnRhaW5zLnByb3RvdHlwZS5fbXVsdGlwbHlNYXRyaXg9ZnVuY3Rpb24odCxlKXt2YXIgaT1uZXcgRmxvYXQzMkFycmF5KDE2KTtyZXR1cm4gaVswXT1lWzBdKnRbMF0rZVsxXSp0WzRdK2VbMl0qdFs4XStlWzNdKnRbMTJdLGlbMV09ZVswXSp0WzFdK2VbMV0qdFs1XStlWzJdKnRbOV0rZVszXSp0WzEzXSxpWzJdPWVbMF0qdFsyXStlWzFdKnRbNl0rZVsyXSp0WzEwXStlWzNdKnRbMTRdLGlbM109ZVswXSp0WzNdK2VbMV0qdFs3XStlWzJdKnRbMTFdK2VbM10qdFsxNV0saVs0XT1lWzRdKnRbMF0rZVs1XSp0WzRdK2VbNl0qdFs4XStlWzddKnRbMTJdLGlbNV09ZVs0XSp0WzFdK2VbNV0qdFs1XStlWzZdKnRbOV0rZVs3XSp0WzEzXSxpWzZdPWVbNF0qdFsyXStlWzVdKnRbNl0rZVs2XSp0WzEwXStlWzddKnRbMTRdLGlbN109ZVs0XSp0WzNdK2VbNV0qdFs3XStlWzZdKnRbMTFdK2VbN10qdFsxNV0saVs4XT1lWzhdKnRbMF0rZVs5XSp0WzRdK2VbMTBdKnRbOF0rZVsxMV0qdFsxMl0saVs5XT1lWzhdKnRbMV0rZVs5XSp0WzVdK2VbMTBdKnRbOV0rZVsxMV0qdFsxM10saVsxMF09ZVs4XSp0WzJdK2VbOV0qdFs2XStlWzEwXSp0WzEwXStlWzExXSp0WzE0XSxpWzExXT1lWzhdKnRbM10rZVs5XSp0WzddK2VbMTBdKnRbMTFdK2VbMTFdKnRbMTVdLGlbMTJdPWVbMTJdKnRbMF0rZVsxM10qdFs0XStlWzE0XSp0WzhdK2VbMTVdKnRbMTJdLGlbMTNdPWVbMTJdKnRbMV0rZVsxM10qdFs1XStlWzE0XSp0WzldK2VbMTVdKnRbMTNdLGlbMTRdPWVbMTJdKnRbMl0rZVsxM10qdFs2XStlWzE0XSp0WzEwXStlWzE1XSp0WzE0XSxpWzE1XT1lWzEyXSp0WzNdK2VbMTNdKnRbN10rZVsxNF0qdFsxMV0rZVsxNV0qdFsxNV0saX0sQ3VydGFpbnMucHJvdG90eXBlLl9zY2FsZU1hdHJpeD1mdW5jdGlvbih0LGUsaSxzKXt2YXIgcj1uZXcgRmxvYXQzMkFycmF5KDE2KTtyZXR1cm4gclswXT1lKnRbMF0sclsxXT1lKnRbMV0sclsyXT1lKnRbMl0sclszXT1lKnRbM10scls0XT1pKnRbNF0scls1XT1pKnRbNV0scls2XT1pKnRbNl0scls3XT1pKnRbN10scls4XT1zKnRbOF0scls5XT1zKnRbOV0sclsxMF09cyp0WzEwXSxyWzExXT1zKnRbMTFdLHQhPT1yJiYoclsxMl09dFsxMl0sclsxM109dFsxM10sclsxNF09dFsxNF0sclsxNV09dFsxNV0pLHJ9LEN1cnRhaW5zLnByb3RvdHlwZS5fYXBwbHlUcmFuc2Zvcm1hdGlvbnNNYXRyaXhGcm9tT3JpZ2luPWZ1bmN0aW9uKHQsZSxpLHMpe3ZhciByPW5ldyBGbG9hdDMyQXJyYXkoMTYpLGE9bmV3IEZsb2F0MzJBcnJheSg0KSxuPS41KmVbMF0sbz0uNSplWzFdLGg9LjUqZVsyXSx1PU1hdGguc2luKG4pLGw9TWF0aC5jb3MobiksXz1NYXRoLnNpbihvKSxkPU1hdGguY29zKG8pLGM9TWF0aC5zaW4oaCkscD1NYXRoLmNvcyhoKTthWzBdPXUqZCpwLWwqXypjLGFbMV09bCpfKnArdSpkKmMsYVsyXT1sKmQqYy11Kl8qcCxhWzNdPWwqZCpwK3UqXypjO3ZhciBnPWFbMF0sZj1hWzFdLG09YVsyXSx4PWFbM10sdj1nK2cseT1mK2YsUD1tK20sQz1nKnYsYj1nKnksVD1nKlAsUz1mKnksUj1mKlAsdz1tKlAsRT14KnYsTT14KnksQj14KlAsRD1pWzBdLEE9aVsxXSxGPWlbMl0sTD1zWzBdLGs9c1sxXSxJPXNbMl0sVT0oMS0oUyt3KSkqRCxPPShiK0IpKkQsej0oVC1NKSpELE49KGItQikqQSxWPSgxLShDK3cpKSpBLEg9KFIrRSkqQSxXPShUK00pKkYsRz0oUi1FKSpGLFg9KDEtKEMrUykpKkY7cmV0dXJuIHJbMF09VSxyWzFdPU8sclsyXT16LHJbM109MCxyWzRdPU4scls1XT1WLHJbNl09SCxyWzddPTAscls4XT1XLHJbOV09RyxyWzEwXT1YLHJbMTFdPTAsclsxMl09dFswXStMLShVKkwrTiprK1cqSSksclsxM109dFsxXStrLShPKkwrViprK0cqSSksclsxNF09dFsyXStJLSh6KkwrSCprK1gqSSksclsxNV09MSxyfSxDdXJ0YWlucy5wcm90b3R5cGUuX2FwcGx5TWF0cml4VG9Qb2ludD1mdW5jdGlvbih0LGUpe3ZhciBpPXRbMF0scz10WzFdLHI9dFsyXSxhPTEvKGVbM10qaStlWzddKnMrZVsxMV0qcitlWzE1XSk7cmV0dXJuIHRbMF09KGVbMF0qaStlWzRdKnMrZVs4XSpyK2VbMTJdKSphLHRbMV09KGVbMV0qaStlWzVdKnMrZVs5XSpyK2VbMTNdKSphLHRbMl09KGVbMl0qaStlWzZdKnMrZVsxMF0qcitlWzE0XSkqYSx0fSxDdXJ0YWlucy5wcm90b3R5cGUuX3JlYWR5VG9EcmF3PWZ1bmN0aW9uKCl7dGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5nbENhbnZhcyksdGhpcy5fc2V0QmxlbmRGdW5jKCksdGhpcy5fc2V0RGVwdGgoITApLGNvbnNvbGUubG9nKFwiY3VydGFpbnMuanMgLSB2NS4yXCIpLHRoaXMuX2FuaW1hdGlvbkZyYW1lSUQ9bnVsbCx0aGlzLl9hdXRvUmVuZGVyJiZ0aGlzLl9hbmltYXRlKCl9LEN1cnRhaW5zLnByb3RvdHlwZS5fYW5pbWF0ZT1mdW5jdGlvbigpe3RoaXMucmVuZGVyKCksdGhpcy5fYW5pbWF0aW9uRnJhbWVJRD13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGUuYmluZCh0aGlzKSl9LEN1cnRhaW5zLnByb3RvdHlwZS5fZHJhd1BsYW5lU3RhY2s9ZnVuY3Rpb24odCl7Zm9yKHZhciBlIGluIHRoaXMuX2RyYXdTdGFja3NbdF0ucHJvZ3JhbXMpZm9yKHZhciBpPXRoaXMuX2RyYXdTdGFja3NbdF0ucHJvZ3JhbXNbZV0scz0wO3M8aS5sZW5ndGg7cysrKXt2YXIgcj10aGlzLnBsYW5lc1tpW3NdXTtyJiZyLl9kcmF3UGxhbmUoKX19LEN1cnRhaW5zLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXtpZih0aGlzLl9kcmF3aW5nRW5hYmxlZHx8dGhpcy5fZm9yY2VSZW5kZXIpe3RoaXMuX2ZvcmNlUmVuZGVyJiYodGhpcy5fZm9yY2VSZW5kZXI9ITEpLHRoaXMuX29uUmVuZGVyQ2FsbGJhY2smJnRoaXMuX29uUmVuZGVyQ2FsbGJhY2soKSx0aGlzLl9jbGVhcigpLHRoaXMuX2RyYXdTdGFja3Muc2NlbmVQYXNzZXMubGVuZ3RoPjAmJjA9PT10aGlzLl9kcmF3U3RhY2tzLnJlbmRlclBhc3Nlcy5sZW5ndGgmJih0aGlzLl9nbFN0YXRlLnNjZW5lUGFzc0luZGV4PTAsdGhpcy5fYmluZEZyYW1lQnVmZmVyKHRoaXMuc2hhZGVyUGFzc2VzW3RoaXMuX2RyYXdTdGFja3Muc2NlbmVQYXNzZXNbMF1dLnRhcmdldCkpLHRoaXMuX2RyYXdQbGFuZVN0YWNrKFwib3BhcXVlXCIpLHRoaXMuX2RyYXdTdGFja3MudHJhbnNwYXJlbnQubGVuZ3RoJiYodGhpcy5nbC5jbGVhckRlcHRoKDEpLHRoaXMuZ2wuY2xlYXIodGhpcy5nbC5ERVBUSF9CVUZGRVJfQklUKSx0aGlzLl9kcmF3UGxhbmVTdGFjayhcInRyYW5zcGFyZW50XCIpKSx0aGlzLl9kcmF3U3RhY2tzLnNjZW5lUGFzc2VzLmxlbmd0aD4wJiZ0aGlzLl9kcmF3U3RhY2tzLnJlbmRlclBhc3Nlcy5sZW5ndGg+MCYmKHRoaXMuX2dsU3RhdGUuc2NlbmVQYXNzSW5kZXg9MCx0aGlzLl9iaW5kRnJhbWVCdWZmZXIodGhpcy5zaGFkZXJQYXNzZXNbdGhpcy5fZHJhd1N0YWNrcy5zY2VuZVBhc3Nlc1swXV0udGFyZ2V0KSk7Zm9yKHZhciB0PTA7dDx0aGlzLl9kcmF3U3RhY2tzLnJlbmRlclBhc3Nlcy5sZW5ndGg7dCsrKXt0aGlzLnNoYWRlclBhc3Nlc1t0aGlzLl9kcmF3U3RhY2tzLnJlbmRlclBhc3Nlc1t0XV0uX2RyYXdQbGFuZSgpfWlmKHRoaXMuX2RyYXdTdGFja3Muc2NlbmVQYXNzZXMubGVuZ3RoPjApZm9yKHQ9MDt0PHRoaXMuX2RyYXdTdGFja3Muc2NlbmVQYXNzZXMubGVuZ3RoO3QrKyl7dGhpcy5zaGFkZXJQYXNzZXNbdGhpcy5fZHJhd1N0YWNrcy5zY2VuZVBhc3Nlc1t0XV0uX2RyYXdQbGFuZSgpfX19LEN1cnRhaW5zLnByb3RvdHlwZS5vbkFmdGVyUmVzaXplPWZ1bmN0aW9uKHQpe3JldHVybiB0JiYodGhpcy5fb25BZnRlclJlc2l6ZUNhbGxiYWNrPXQpLHRoaXN9LEN1cnRhaW5zLnByb3RvdHlwZS5vbkVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiB0JiYodGhpcy5fb25FcnJvckNhbGxiYWNrPXQpLHRoaXN9LEN1cnRhaW5zLnByb3RvdHlwZS5vbkNvbnRleHRMb3N0PWZ1bmN0aW9uKHQpe3JldHVybiB0JiYodGhpcy5fb25Db250ZXh0TG9zdENhbGxiYWNrPXQpLHRoaXN9LEN1cnRhaW5zLnByb3RvdHlwZS5vbkNvbnRleHRSZXN0b3JlZD1mdW5jdGlvbih0KXtyZXR1cm4gdCYmKHRoaXMuX29uQ29udGV4dFJlc3RvcmVkQ2FsbGJhY2s9dCksdGhpc30sQ3VydGFpbnMucHJvdG90eXBlLm9uUmVuZGVyPWZ1bmN0aW9uKHQpe3JldHVybiB0JiYodGhpcy5fb25SZW5kZXJDYWxsYmFjaz10KSx0aGlzfSxDdXJ0YWlucy5wcm90b3R5cGUub25TY3JvbGw9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJih0aGlzLl9vblNjcm9sbENhbGxiYWNrPXQpLHRoaXN9LEN1cnRhaW5zLkJhc2VQbGFuZT1mdW5jdGlvbih0LGUsaSl7dGhpcy5fdHlwZT10aGlzLl90eXBlfHxcIkJhc2ljUGxhbmVcIix0aGlzLl9jdXJ0YWlucz10LHRoaXMuaHRtbEVsZW1lbnQ9ZSx0aGlzLl91dWlkPXRoaXMuX2N1cnRhaW5zLl9nZW5lcmF0ZVVVSUQoKSx0aGlzLl9pbml0QmFzZVBsYW5lKGkpfSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLl9pbml0QmFzZVBsYW5lPWZ1bmN0aW9uKHQpe3R8fCh0PXt9KSx0aGlzLl9jYW5EcmF3PSExLHRoaXMuc2hhcmVQcm9ncmFtPXQuc2hhcmVQcm9ncmFtfHwhMSx0aGlzLl91cGRhdGVQZXJzcGVjdGl2ZU1hdHJpeD0hMSx0aGlzLl91cGRhdGVNVk1hdHJpeD0hMSx0aGlzLl9kZWZpbml0aW9uPXt3aWR0aDpwYXJzZUludCh0LndpZHRoU2VnbWVudHMpfHwxLGhlaWdodDpwYXJzZUludCh0LmhlaWdodFNlZ21lbnRzKXx8MX0sdGhpcy5fZGVmaW5pdGlvbi5idWZmZXJzSUQ9dGhpcy5fZGVmaW5pdGlvbi53aWR0aCp0aGlzLl9kZWZpbml0aW9uLmhlaWdodCt0aGlzLl9kZWZpbml0aW9uLndpZHRoLHRoaXMuX2RlcHRoVGVzdD10LmRlcHRoVGVzdCxudWxsIT09dGhpcy5fZGVwdGhUZXN0JiZ2b2lkIDAhPT10aGlzLl9kZXB0aFRlc3R8fCh0aGlzLl9kZXB0aFRlc3Q9ITApLHRoaXMuX2xvYWRpbmdNYW5hZ2VyPXtzb3VyY2VzTG9hZGVkOjAsaW5pdFNvdXJjZXNUb0xvYWQ6MCxjb21wbGV0ZTohMX07dmFyIGU9dGhpcy5fc2V0dXBTaGFkZXJzKHQpO2lmKHRoaXMuX3VzZWRQcm9ncmFtPXRoaXMuX2N1cnRhaW5zLl9zZXR1cFByb2dyYW0oZS52ZXJ0ZXhTaGFkZXJDb2RlLGUuZnJhZ21lbnRTaGFkZXJDb2RlLHRoaXMpLHRoaXMuaW1hZ2VzPVtdLHRoaXMudmlkZW9zPVtdLHRoaXMuY2FudmFzZXM9W10sdGhpcy50ZXh0dXJlcz1bXSx0aGlzLmNyb3NzT3JpZ2luPXQuY3Jvc3NPcmlnaW58fFwiYW5vbnltb3VzXCIsdC51bmlmb3Jtc3x8KHQudW5pZm9ybXM9e30pLHRoaXMudW5pZm9ybXM9e30sdC51bmlmb3Jtcylmb3IodmFyIGkgaW4gdC51bmlmb3Jtcyl7dmFyIHM9dC51bmlmb3Jtc1tpXTt0aGlzLnVuaWZvcm1zW2ldPXtuYW1lOnMubmFtZSx0eXBlOnMudHlwZSx2YWx1ZTpzLnZhbHVlLGxhc3RWYWx1ZTpzLnZhbHVlfX1yZXR1cm4gdGhpcy51c2VyRGF0YT17fSwhIXRoaXMuX3VzZWRQcm9ncmFtJiYodGhpcy5fc2hvdWxkRHJhdz0hMCx0aGlzLnZpc2libGU9ITAsdGhpcy5fc2V0QXR0cmlidXRlcygpLHRoaXMuX3NldERvY3VtZW50U2l6ZXMoKSx0aGlzLl9zZXRVbmlmb3Jtcyh0aGlzLnVuaWZvcm1zKSx0aGlzLl9pbml0aWFsaXplQnVmZmVycygpLHRoaXMuX2NhbkRyYXc9ITAsdGhpcyl9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUuX2dldERlZmF1bHRWUz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9jdXJ0YWlucy5wcm9kdWN0aW9uTW9kZXx8Y29uc29sZS53YXJuKFwiTm8gdmVydGV4IHNoYWRlciBwcm92aWRlZCwgd2lsbCB1c2UgYSBkZWZhdWx0IG9uZVwiKSxcInByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbmF0dHJpYnV0ZSB2ZWMzIGFWZXJ0ZXhQb3NpdGlvbjthdHRyaWJ1dGUgdmVjMiBhVGV4dHVyZUNvb3JkO3VuaWZvcm0gbWF0NCB1TVZNYXRyaXg7dW5pZm9ybSBtYXQ0IHVQTWF0cml4O3ZhcnlpbmcgdmVjMyB2VmVydGV4UG9zaXRpb247dmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7dm9pZCBtYWluKCkge3ZUZXh0dXJlQ29vcmQgPSBhVGV4dHVyZUNvb3JkO3ZWZXJ0ZXhQb3NpdGlvbiA9IGFWZXJ0ZXhQb3NpdGlvbjtnbF9Qb3NpdGlvbiA9IHVQTWF0cml4ICogdU1WTWF0cml4ICogdmVjNChhVmVydGV4UG9zaXRpb24sIDEuMCk7fVwifSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLl9nZXREZWZhdWx0RlM9ZnVuY3Rpb24oKXtyZXR1cm5cInByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbnZhcnlpbmcgdmVjMyB2VmVydGV4UG9zaXRpb247dmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7dm9pZCBtYWluKCB2b2lkICkge2dsX0ZyYWdDb2xvciA9IHZlYzQoMC4wLCAwLjAsIDAuMCwgMS4wKTt9XCJ9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUuX3NldHVwU2hhZGVycz1mdW5jdGlvbih0KXt2YXIgZSxpLHM9dC52ZXJ0ZXhTaGFkZXJJRHx8dGhpcy5odG1sRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZzLWlkXCIpLHI9dC5mcmFnbWVudFNoYWRlcklEfHx0aGlzLmh0bWxFbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtZnMtaWRcIik7cmV0dXJuIHQudmVydGV4U2hhZGVyfHwoZT1zJiZkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzKT9kb2N1bWVudC5nZXRFbGVtZW50QnlJZChzKS5pbm5lckhUTUw6dGhpcy5fZ2V0RGVmYXVsdFZTKCkpLHQuZnJhZ21lbnRTaGFkZXJ8fChyJiZkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyKT9pPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHIpLmlubmVySFRNTDoodGhpcy5fY3VydGFpbnMucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcIk5vIGZyYWdtZW50IHNoYWRlciBwcm92aWRlZCwgd2lsbCB1c2UgYSBkZWZhdWx0IG9uZVwiKSxpPXRoaXMuX2dldERlZmF1bHRGUygpKSkse3ZlcnRleFNoYWRlckNvZGU6dC52ZXJ0ZXhTaGFkZXJ8fGUsZnJhZ21lbnRTaGFkZXJDb2RlOnQuZnJhZ21lbnRTaGFkZXJ8fGl9fSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLl9oYW5kbGVVbmlmb3JtU2V0dGluZz1mdW5jdGlvbih0LGUsaSl7dmFyIHM9dGhpcy5fY3VydGFpbnMuZ2w7c3dpdGNoKHQpe2Nhc2VcIjFpXCI6cy51bmlmb3JtMWkoZSxpKTticmVhaztjYXNlXCIxaXZcIjpzLnVuaWZvcm0xaXYoZSxpKTticmVhaztjYXNlXCIxZlwiOnMudW5pZm9ybTFmKGUsaSk7YnJlYWs7Y2FzZVwiMWZ2XCI6cy51bmlmb3JtMWZ2KGUsaSk7YnJlYWs7Y2FzZVwiMmlcIjpzLnVuaWZvcm0yaShlLGlbMF0saVsxXSk7YnJlYWs7Y2FzZVwiMml2XCI6cy51bmlmb3JtMml2KGUsaSk7YnJlYWs7Y2FzZVwiMmZcIjpzLnVuaWZvcm0yZihlLGlbMF0saVsxXSk7YnJlYWs7Y2FzZVwiMmZ2XCI6cy51bmlmb3JtMmZ2KGUsaSk7YnJlYWs7Y2FzZVwiM2lcIjpzLnVuaWZvcm0zaShlLGlbMF0saVsxXSxpWzJdKTticmVhaztjYXNlXCIzaXZcIjpzLnVuaWZvcm0zaXYoZSxpKTticmVhaztjYXNlXCIzZlwiOnMudW5pZm9ybTNmKGUsaVswXSxpWzFdLGlbMl0pO2JyZWFrO2Nhc2VcIjNmdlwiOnMudW5pZm9ybTNmdihlLGkpO2JyZWFrO2Nhc2VcIjRpXCI6cy51bmlmb3JtNGkoZSxpWzBdLGlbMV0saVsyXSxpWzNdKTticmVhaztjYXNlXCI0aXZcIjpzLnVuaWZvcm00aXYoZSxpKTticmVhaztjYXNlXCI0ZlwiOnMudW5pZm9ybTRmKGUsaVswXSxpWzFdLGlbMl0saVszXSk7YnJlYWs7Y2FzZVwiNGZ2XCI6cy51bmlmb3JtNGZ2KGUsaSk7YnJlYWs7Y2FzZVwibWF0MlwiOnMudW5pZm9ybU1hdHJpeDJmdihlLCExLGkpO2JyZWFrO2Nhc2VcIm1hdDNcIjpzLnVuaWZvcm1NYXRyaXgzZnYoZSwhMSxpKTticmVhaztjYXNlXCJtYXQ0XCI6cy51bmlmb3JtTWF0cml4NGZ2KGUsITEsaSk7YnJlYWs7ZGVmYXVsdDp0aGlzLl9jdXJ0YWlucy5wcm9kdWN0aW9uTW9kZXx8Y29uc29sZS53YXJuKFwiVGhpcyB1bmlmb3JtIHR5cGUgaXMgbm90IGhhbmRsZWQgOiBcIix0KX19LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUuX3NldFVuaWZvcm1zPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2N1cnRhaW5zLGk9ZS5nbDtpZihlLl91c2VQcm9ncmFtKHRoaXMuX3VzZWRQcm9ncmFtKSx0KWZvcih2YXIgcyBpbiB0KXt2YXIgcj10W3NdO3IubG9jYXRpb249aS5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fdXNlZFByb2dyYW0ucHJvZ3JhbSxyLm5hbWUpLHIudHlwZXx8KEFycmF5LmlzQXJyYXkoci52YWx1ZSk/ND09PXIudmFsdWUubGVuZ3RoPyhyLnR5cGU9XCI0ZlwiLGUucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcIk5vIHVuaWZvcm0gdHlwZSBkZWNsYXJlZCBmb3IgXCIrci5uYW1lK1wiLCBhcHBsaWVkIGEgNGYgKGFycmF5IG9mIDQgZmxvYXRzKSB1bmlmb3JtIHR5cGVcIikpOjM9PT1yLnZhbHVlLmxlbmd0aD8oci50eXBlPVwiM2ZcIixlLnByb2R1Y3Rpb25Nb2RlfHxjb25zb2xlLndhcm4oXCJObyB1bmlmb3JtIHR5cGUgZGVjbGFyZWQgZm9yIFwiK3IubmFtZStcIiwgYXBwbGllZCBhIDNmIChhcnJheSBvZiAzIGZsb2F0cykgdW5pZm9ybSB0eXBlXCIpKToyPT09ci52YWx1ZS5sZW5ndGgmJihyLnR5cGU9XCIyZlwiLGUucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcIk5vIHVuaWZvcm0gdHlwZSBkZWNsYXJlZCBmb3IgXCIrci5uYW1lK1wiLCBhcHBsaWVkIGEgMmYgKGFycmF5IG9mIDIgZmxvYXRzKSB1bmlmb3JtIHR5cGVcIikpOnIudmFsdWUuY29uc3RydWN0b3I9PT1GbG9hdDMyQXJyYXk/MTY9PT1yLnZhbHVlLmxlbmd0aD8oci50eXBlPVwibWF0NFwiLGUucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcIk5vIHVuaWZvcm0gdHlwZSBkZWNsYXJlZCBmb3IgXCIrci5uYW1lK1wiLCBhcHBsaWVkIGEgbWF0NCAoNHg0IG1hdHJpeCBhcnJheSkgdW5pZm9ybSB0eXBlXCIpKTo5PT09ci52YWx1ZS5sZW5ndGg/KHIudHlwZT1cIm1hdDNcIixlLnByb2R1Y3Rpb25Nb2RlfHxjb25zb2xlLndhcm4oXCJObyB1bmlmb3JtIHR5cGUgZGVjbGFyZWQgZm9yIFwiK3IubmFtZStcIiwgYXBwbGllZCBhIG1hdDMgKDN4MyBtYXRyaXggYXJyYXkpIHVuaWZvcm0gdHlwZVwiKSk6ND09PXIudmFsdWUubGVuZ3RoJiYoci50eXBlPVwibWF0MlwiLGUucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcIk5vIHVuaWZvcm0gdHlwZSBkZWNsYXJlZCBmb3IgXCIrci5uYW1lK1wiLCBhcHBsaWVkIGEgbWF0MiAoMngyIG1hdHJpeCBhcnJheSkgdW5pZm9ybSB0eXBlXCIpKTooci50eXBlPVwiMWZcIixlLnByb2R1Y3Rpb25Nb2RlfHxjb25zb2xlLndhcm4oXCJObyB1bmlmb3JtIHR5cGUgZGVjbGFyZWQgZm9yIFwiK3IubmFtZStcIiwgYXBwbGllZCBhIDFmIChmbG9hdCkgdW5pZm9ybSB0eXBlXCIpKSksdGhpcy5faGFuZGxlVW5pZm9ybVNldHRpbmcoci50eXBlLHIubG9jYXRpb24sci52YWx1ZSl9fSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLl91cGRhdGVVbmlmb3Jtcz1mdW5jdGlvbigpe2lmKHRoaXMudW5pZm9ybXMpZm9yKHZhciB0IGluIHRoaXMudW5pZm9ybXMpe3ZhciBlPXRoaXMudW5pZm9ybXNbdF07dGhpcy5zaGFyZVByb2dyYW0/dGhpcy5faGFuZGxlVW5pZm9ybVNldHRpbmcoZS50eXBlLGUubG9jYXRpb24sZS52YWx1ZSk6KGUudmFsdWUubGVuZ3RofHxlLnZhbHVlPT09ZS5sYXN0VmFsdWU/SlNPTi5zdHJpbmdpZnkoZS52YWx1ZSkhPT1KU09OLnN0cmluZ2lmeShlLmxhc3RWYWx1ZSkmJnRoaXMuX2hhbmRsZVVuaWZvcm1TZXR0aW5nKGUudHlwZSxlLmxvY2F0aW9uLGUudmFsdWUpOnRoaXMuX2hhbmRsZVVuaWZvcm1TZXR0aW5nKGUudHlwZSxlLmxvY2F0aW9uLGUudmFsdWUpLGUubGFzdFZhbHVlPWUudmFsdWUpfX0sQ3VydGFpbnMuQmFzZVBsYW5lLnByb3RvdHlwZS5fc2V0QXR0cmlidXRlcz1mdW5jdGlvbigpe3RoaXMuX2F0dHJpYnV0ZXN8fCh0aGlzLl9hdHRyaWJ1dGVzPXt9KSx0aGlzLl9hdHRyaWJ1dGVzLnZlcnRleFBvc2l0aW9uPXtuYW1lOlwiYVZlcnRleFBvc2l0aW9uXCIsbG9jYXRpb246dGhpcy5fY3VydGFpbnMuZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5fdXNlZFByb2dyYW0ucHJvZ3JhbSxcImFWZXJ0ZXhQb3NpdGlvblwiKX0sdGhpcy5fYXR0cmlidXRlcy50ZXh0dXJlQ29vcmQ9e25hbWU6XCJhVGV4dHVyZUNvb3JkXCIsbG9jYXRpb246dGhpcy5fY3VydGFpbnMuZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5fdXNlZFByb2dyYW0ucHJvZ3JhbSxcImFUZXh0dXJlQ29vcmRcIil9fSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLl9zZXRQbGFuZVZlcnRpY2VzPWZ1bmN0aW9uKCl7dGhpcy5fZ2VvbWV0cnk9e3ZlcnRpY2VzOltdfSx0aGlzLl9tYXRlcmlhbD17dXZzOltdfTtmb3IodmFyIHQ9MDt0PHRoaXMuX2RlZmluaXRpb24uaGVpZ2h0OysrdClmb3IodmFyIGU9dC90aGlzLl9kZWZpbml0aW9uLmhlaWdodCxpPTA7aTx0aGlzLl9kZWZpbml0aW9uLndpZHRoOysraSl7dmFyIHM9aS90aGlzLl9kZWZpbml0aW9uLndpZHRoO3RoaXMuX21hdGVyaWFsLnV2cy5wdXNoKHMpLHRoaXMuX21hdGVyaWFsLnV2cy5wdXNoKGUpLHRoaXMuX21hdGVyaWFsLnV2cy5wdXNoKDApLHRoaXMuX2dlb21ldHJ5LnZlcnRpY2VzLnB1c2goMioocy0uNSkpLHRoaXMuX2dlb21ldHJ5LnZlcnRpY2VzLnB1c2goMiooZS0uNSkpLHRoaXMuX2dlb21ldHJ5LnZlcnRpY2VzLnB1c2goMCksdGhpcy5fbWF0ZXJpYWwudXZzLnB1c2gocysxL3RoaXMuX2RlZmluaXRpb24ud2lkdGgpLHRoaXMuX21hdGVyaWFsLnV2cy5wdXNoKGUpLHRoaXMuX21hdGVyaWFsLnV2cy5wdXNoKDApLHRoaXMuX2dlb21ldHJ5LnZlcnRpY2VzLnB1c2goMioocysxL3RoaXMuX2RlZmluaXRpb24ud2lkdGgtLjUpKSx0aGlzLl9nZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKDIqKGUtLjUpKSx0aGlzLl9nZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKDApLHRoaXMuX21hdGVyaWFsLnV2cy5wdXNoKHMpLHRoaXMuX21hdGVyaWFsLnV2cy5wdXNoKGUrMS90aGlzLl9kZWZpbml0aW9uLmhlaWdodCksdGhpcy5fbWF0ZXJpYWwudXZzLnB1c2goMCksdGhpcy5fZ2VvbWV0cnkudmVydGljZXMucHVzaCgyKihzLS41KSksdGhpcy5fZ2VvbWV0cnkudmVydGljZXMucHVzaCgyKihlKzEvdGhpcy5fZGVmaW5pdGlvbi5oZWlnaHQtLjUpKSx0aGlzLl9nZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKDApLHRoaXMuX21hdGVyaWFsLnV2cy5wdXNoKHMpLHRoaXMuX21hdGVyaWFsLnV2cy5wdXNoKGUrMS90aGlzLl9kZWZpbml0aW9uLmhlaWdodCksdGhpcy5fbWF0ZXJpYWwudXZzLnB1c2goMCksdGhpcy5fZ2VvbWV0cnkudmVydGljZXMucHVzaCgyKihzLS41KSksdGhpcy5fZ2VvbWV0cnkudmVydGljZXMucHVzaCgyKihlKzEvdGhpcy5fZGVmaW5pdGlvbi5oZWlnaHQtLjUpKSx0aGlzLl9nZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKDApLHRoaXMuX21hdGVyaWFsLnV2cy5wdXNoKHMrMS90aGlzLl9kZWZpbml0aW9uLndpZHRoKSx0aGlzLl9tYXRlcmlhbC51dnMucHVzaChlKSx0aGlzLl9tYXRlcmlhbC51dnMucHVzaCgwKSx0aGlzLl9nZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKDIqKHMrMS90aGlzLl9kZWZpbml0aW9uLndpZHRoLS41KSksdGhpcy5fZ2VvbWV0cnkudmVydGljZXMucHVzaCgyKihlLS41KSksdGhpcy5fZ2VvbWV0cnkudmVydGljZXMucHVzaCgwKSx0aGlzLl9tYXRlcmlhbC51dnMucHVzaChzKzEvdGhpcy5fZGVmaW5pdGlvbi53aWR0aCksdGhpcy5fbWF0ZXJpYWwudXZzLnB1c2goZSsxL3RoaXMuX2RlZmluaXRpb24uaGVpZ2h0KSx0aGlzLl9tYXRlcmlhbC51dnMucHVzaCgwKSx0aGlzLl9nZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKDIqKHMrMS90aGlzLl9kZWZpbml0aW9uLndpZHRoLS41KSksdGhpcy5fZ2VvbWV0cnkudmVydGljZXMucHVzaCgyKihlKzEvdGhpcy5fZGVmaW5pdGlvbi5oZWlnaHQtLjUpKSx0aGlzLl9nZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKDApfX0sQ3VydGFpbnMuQmFzZVBsYW5lLnByb3RvdHlwZS5faW5pdGlhbGl6ZUJ1ZmZlcnM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9jdXJ0YWlucy5nbDt0aGlzLl9nZW9tZXRyeXx8dGhpcy5fbWF0ZXJpYWx8fHRoaXMuX3NldFBsYW5lVmVydGljZXMoKSx0aGlzLl9hdHRyaWJ1dGVzJiYodGhpcy5fZ2VvbWV0cnkuYnVmZmVySW5mb3M9e2lkOnQuY3JlYXRlQnVmZmVyKCksaXRlbVNpemU6MyxudW1iZXJPZkl0ZW1zOnRoaXMuX2dlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aC8zfSx0aGlzLl9tYXRlcmlhbC5idWZmZXJJbmZvcz17aWQ6dC5jcmVhdGVCdWZmZXIoKSxpdGVtU2l6ZTozLG51bWJlck9mSXRlbXM6dGhpcy5fbWF0ZXJpYWwudXZzLmxlbmd0aC8zfSx0aGlzLl9jdXJ0YWlucy5faXNXZWJHTDI/KHRoaXMuX3Zhbz10LmNyZWF0ZVZlcnRleEFycmF5KCksdC5iaW5kVmVydGV4QXJyYXkodGhpcy5fdmFvKSk6dGhpcy5fY3VydGFpbnMuX2V4dGVuc2lvbnMuT0VTX3ZlcnRleF9hcnJheV9vYmplY3QmJih0aGlzLl92YW89dGhpcy5fY3VydGFpbnMuX2V4dGVuc2lvbnMuT0VTX3ZlcnRleF9hcnJheV9vYmplY3QuY3JlYXRlVmVydGV4QXJyYXlPRVMoKSx0aGlzLl9jdXJ0YWlucy5fZXh0ZW5zaW9ucy5PRVNfdmVydGV4X2FycmF5X29iamVjdC5iaW5kVmVydGV4QXJyYXlPRVModGhpcy5fdmFvKSksdC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLl9hdHRyaWJ1dGVzLnZlcnRleFBvc2l0aW9uLmxvY2F0aW9uKSx0LmJpbmRCdWZmZXIodC5BUlJBWV9CVUZGRVIsdGhpcy5fZ2VvbWV0cnkuYnVmZmVySW5mb3MuaWQpLHQuYnVmZmVyRGF0YSh0LkFSUkFZX0JVRkZFUixuZXcgRmxvYXQzMkFycmF5KHRoaXMuX2dlb21ldHJ5LnZlcnRpY2VzKSx0LlNUQVRJQ19EUkFXKSx0LnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5fYXR0cmlidXRlcy52ZXJ0ZXhQb3NpdGlvbi5sb2NhdGlvbix0aGlzLl9nZW9tZXRyeS5idWZmZXJJbmZvcy5pdGVtU2l6ZSx0LkZMT0FULCExLDAsMCksdC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLl9hdHRyaWJ1dGVzLnRleHR1cmVDb29yZC5sb2NhdGlvbiksdC5iaW5kQnVmZmVyKHQuQVJSQVlfQlVGRkVSLHRoaXMuX21hdGVyaWFsLmJ1ZmZlckluZm9zLmlkKSx0LmJ1ZmZlckRhdGEodC5BUlJBWV9CVUZGRVIsbmV3IEZsb2F0MzJBcnJheSh0aGlzLl9tYXRlcmlhbC51dnMpLHQuU1RBVElDX0RSQVcpLHQudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLl9hdHRyaWJ1dGVzLnRleHR1cmVDb29yZC5sb2NhdGlvbix0aGlzLl9tYXRlcmlhbC5idWZmZXJJbmZvcy5pdGVtU2l6ZSx0LkZMT0FULCExLDAsMCksdGhpcy5fY3VydGFpbnMuX2dsU3RhdGUuY3VycmVudEJ1ZmZlcnNJRD10aGlzLl9kZWZpbml0aW9uLmJ1ZmZlcnNJRCl9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUuX3Jlc3RvcmVDb250ZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fY3VydGFpbnM7aWYodGhpcy5fY2FuRHJhdz0hMSx0aGlzLl9tYXRyaWNlcyYmKHRoaXMuX21hdHJpY2VzPW51bGwpLHRoaXMuX2F0dHJpYnV0ZXM9bnVsbCx0aGlzLl9nZW9tZXRyeS5idWZmZXJJbmZvcz1udWxsLHRoaXMuX21hdGVyaWFsLmJ1ZmZlckluZm9zPW51bGwsdGhpcy5fdXNlZFByb2dyYW09dC5fc2V0dXBQcm9ncmFtKHRoaXMuX3VzZWRQcm9ncmFtLnZzQ29kZSx0aGlzLl91c2VkUHJvZ3JhbS5mc0NvZGUsdGhpcyksdGhpcy5fdXNlZFByb2dyYW0pe2lmKHRoaXMuX3NldEF0dHJpYnV0ZXMoKSx0aGlzLl9zZXRVbmlmb3Jtcyh0aGlzLnVuaWZvcm1zKSx0aGlzLl9pbml0aWFsaXplQnVmZmVycygpLFwiU2hhZGVyUGFzc1wiPT09dGhpcy5fdHlwZSlpZih0aGlzLl9pc1NjZW5lUGFzcyl0aGlzLnRhcmdldC5fZnJhbWVCdWZmZXI9bnVsbCx0aGlzLnRhcmdldC5fZGVwdGhCdWZmZXI9bnVsbCx0LnJlbmRlclRhcmdldHMuc3BsaWNlKHRoaXMudGFyZ2V0LmluZGV4LDEpLHRoaXMudGV4dHVyZXMuc3BsaWNlKDAsMSksdGhpcy5fY3JlYXRlRnJhbWVCdWZmZXIoKSx0Ll9kcmF3U3RhY2tzLnNjZW5lUGFzc2VzLnB1c2godGhpcy5pbmRleCk7ZWxzZXt2YXIgZT10LnJlbmRlclRhcmdldHNbdGhpcy50YXJnZXQuaW5kZXhdO3RoaXMuc2V0UmVuZGVyVGFyZ2V0KGUpLHRoaXMudGFyZ2V0Ll9zaGFkZXJQYXNzPWUsdGhpcy50ZXh0dXJlc1swXS5fY2FuRHJhdz0hMSx0aGlzLnRleHR1cmVzWzBdLl9zZXRUZXh0dXJlVW5pZm9ybXMoKSx0aGlzLnRleHR1cmVzWzBdLnNldEZyb21UZXh0dXJlKGUudGV4dHVyZXNbMF0pLHQuX2RyYXdTdGFja3MucmVuZGVyUGFzc2VzLnB1c2godGhpcy5pbmRleCl9ZWxzZSB0aGlzLnRhcmdldCYmdGhpcy5zZXRSZW5kZXJUYXJnZXQodC5yZW5kZXJUYXJnZXRzW3RoaXMudGFyZ2V0LmluZGV4XSk7Zm9yKHZhciBpPVwiU2hhZGVyUGFzc1wiPT09dGhpcy5fdHlwZT8xOjA7aTx0aGlzLnRleHR1cmVzLmxlbmd0aDtpKyspdGhpcy50ZXh0dXJlc1tpXS5fcmVzdG9yZUNvbnRleHQoKTtcIlBsYW5lXCI9PT10aGlzLl90eXBlJiYodGhpcy5faW5pdE1hdHJpY2VzKCksdGhpcy5zZXRQZXJzcGVjdGl2ZSh0aGlzLl9mb3YsLjEsMip0aGlzLl9mb3YpLHRoaXMuX2FwcGx5Q1NTUG9zaXRpb25zKCksdC5fc3RhY2tQbGFuZSh0aGlzKSksdGhpcy5fY2FuRHJhdz0hMH19LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUuX3NldERvY3VtZW50U2l6ZXM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmh0bWxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOzA9PT10LndpZHRoJiYwPT09dC5oZWlnaHQmJih0PXRoaXMuX2N1cnRhaW5zLl9ib3VuZGluZ1JlY3QpLHRoaXMuX2JvdW5kaW5nUmVjdHx8KHRoaXMuX2JvdW5kaW5nUmVjdD17fSksdGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50PXt3aWR0aDp0LndpZHRoKnRoaXMuX2N1cnRhaW5zLnBpeGVsUmF0aW8saGVpZ2h0OnQuaGVpZ2h0KnRoaXMuX2N1cnRhaW5zLnBpeGVsUmF0aW8sdG9wOnQudG9wKnRoaXMuX2N1cnRhaW5zLnBpeGVsUmF0aW8sbGVmdDp0LmxlZnQqdGhpcy5fY3VydGFpbnMucGl4ZWxSYXRpb319LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUuZ2V0Qm91bmRpbmdSZWN0PWZ1bmN0aW9uKCl7cmV0dXJue3dpZHRoOnRoaXMuX2JvdW5kaW5nUmVjdC5kb2N1bWVudC53aWR0aCxoZWlnaHQ6dGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50LmhlaWdodCx0b3A6dGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50LnRvcCxsZWZ0OnRoaXMuX2JvdW5kaW5nUmVjdC5kb2N1bWVudC5sZWZ0LHJpZ2h0OnRoaXMuX2JvdW5kaW5nUmVjdC5kb2N1bWVudC5sZWZ0K3RoaXMuX2JvdW5kaW5nUmVjdC5kb2N1bWVudC53aWR0aCxib3R0b206dGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50LnRvcCt0aGlzLl9ib3VuZGluZ1JlY3QuZG9jdW1lbnQuaGVpZ2h0fX0sQ3VydGFpbnMuQmFzZVBsYW5lLnByb3RvdHlwZS5nZXRXZWJHTEJvdW5kaW5nUmVjdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX21hdHJpY2VzLm1WUE1hdHJpeDtpZih0KXtmb3IodmFyIGU9W3RoaXMuX2N1cnRhaW5zLl9hcHBseU1hdHJpeFRvUG9pbnQoWy0xLDEsMF0sdCksdGhpcy5fY3VydGFpbnMuX2FwcGx5TWF0cml4VG9Qb2ludChbMSwxLDBdLHQpLHRoaXMuX2N1cnRhaW5zLl9hcHBseU1hdHJpeFRvUG9pbnQoWzEsLTEsMF0sdCksdGhpcy5fY3VydGFpbnMuX2FwcGx5TWF0cml4VG9Qb2ludChbLTEsLTEsMF0sdCldLGk9MWU2LHM9LTFlNixyPTFlNixhPS0xZTYsbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW25dO29bMF09KG9bMF0rMSkvMixvWzFdPTEtKG9bMV0rMSkvMixvWzBdPGkmJihpPW9bMF0pLG9bMF0+cyYmKHM9b1swXSksb1sxXTxyJiYocj1vWzFdKSxvWzFdPmEmJihhPW9bMV0pfXJldHVybnt3aWR0aDoocy1pKSp0aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LndpZHRoLGhlaWdodDooYS1yKSp0aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LmhlaWdodCx0b3A6cip0aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LmhlaWdodCt0aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LnRvcCxsZWZ0OmkqdGhpcy5fY3VydGFpbnMuX2JvdW5kaW5nUmVjdC53aWR0aCt0aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LmxlZnQscmlnaHQ6aSp0aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LndpZHRoK3RoaXMuX2N1cnRhaW5zLl9ib3VuZGluZ1JlY3QubGVmdCsocy1pKSp0aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LndpZHRoLGJvdHRvbTpyKnRoaXMuX2N1cnRhaW5zLl9ib3VuZGluZ1JlY3QuaGVpZ2h0K3RoaXMuX2N1cnRhaW5zLl9ib3VuZGluZ1JlY3QudG9wKyhhLXIpKnRoaXMuX2N1cnRhaW5zLl9ib3VuZGluZ1JlY3QuaGVpZ2h0fX1yZXR1cm4gdGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50fSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLnBsYW5lUmVzaXplPWZ1bmN0aW9uKCl7dGhpcy5fc2V0RG9jdW1lbnRTaXplcygpLFwiUGxhbmVcIj09PXRoaXMuX3R5cGUmJih0aGlzLnNldFBlcnNwZWN0aXZlKHRoaXMuX2ZvdiwuMSwyKnRoaXMuX2ZvdiksdGhpcy5fYXBwbHlDU1NQb3NpdGlvbnMoKSk7Zm9yKHZhciB0PTA7dDx0aGlzLnRleHR1cmVzLmxlbmd0aDt0KyspdGhpcy50ZXh0dXJlc1t0XS5yZXNpemUoKTt2YXIgZT10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtlLl9vbkFmdGVyUmVzaXplQ2FsbGJhY2smJmUuX29uQWZ0ZXJSZXNpemVDYWxsYmFjaygpfSwwKX0sQ3VydGFpbnMuQmFzZVBsYW5lLnByb3RvdHlwZS5jcmVhdGVUZXh0dXJlPWZ1bmN0aW9uKHQpe1wic3RyaW5nXCI9PXR5cGVvZiB0JiYodD17c2FtcGxlcjp0fSx0aGlzLl9jdXJ0YWlucy5wcm9kdWN0aW9uTW9kZXx8Y29uc29sZS53YXJuKFwiU2luY2UgdjUuMSB5b3Ugc2hvdWxkIHVzZSBhbiBvYmplY3QgdG8gcGFzcyB5b3VyIHNhbXBsZXIgbmFtZSB3aXRoIHRoZSBjcmVhdGVUZXh0dXJlKCkgbWV0aG9kLiBQbGVhc2UgcmVmZXIgdG8gdGhlIGRvY3M6IGh0dHBzOi8vd3d3LmN1cnRhaW5zanMuY29tL2RvY3VtZW50YXRpb24uaHRtbCAodGV4dHVyZSBjb25jZXJuZWQ6IFwiLHQuc2FtcGxlcixcIilcIikpLHR8fCh0PXt9KTt2YXIgZT1uZXcgQ3VydGFpbnMuVGV4dHVyZSh0aGlzLHtpbmRleDp0aGlzLnRleHR1cmVzLmxlbmd0aCxzYW1wbGVyOnQuc2FtcGxlcnx8bnVsbCxmcm9tVGV4dHVyZTp0LmZyb21UZXh0dXJlfHxudWxsLGlzRkJPVGV4dHVyZTp0LmlzRkJPVGV4dHVyZXx8ITF9KTtyZXR1cm4gdGhpcy50ZXh0dXJlcy5wdXNoKGUpLGV9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUuX2lzUGxhbmVSZWFkeT1mdW5jdGlvbigpe2lmKCF0aGlzLl9sb2FkaW5nTWFuYWdlci5jb21wbGV0ZSYmdGhpcy5fbG9hZGluZ01hbmFnZXIuc291cmNlc0xvYWRlZD49dGhpcy5fbG9hZGluZ01hbmFnZXIuaW5pdFNvdXJjZXNUb0xvYWQpe3RoaXMuX2xvYWRpbmdNYW5hZ2VyLmNvbXBsZXRlPSEwLHRoaXMuX2N1cnRhaW5zLm5lZWRSZW5kZXIoKTt2YXIgdD10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0Ll9vblJlYWR5Q2FsbGJhY2smJnQuX29uUmVhZHlDYWxsYmFjaygpfSwwKX19LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUubG9hZFNvdXJjZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0Lmxlbmd0aDtlKyspdGhpcy5sb2FkU291cmNlKHRbZV0pfSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLmxvYWRTb3VyY2U9ZnVuY3Rpb24odCl7XCJJTUdcIj09PXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpP3RoaXMubG9hZEltYWdlKHQpOlwiVklERU9cIj09PXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpP3RoaXMubG9hZFZpZGVvKHQpOlwiQ0FOVkFTXCI9PT10LnRhZ05hbWUudG9VcHBlckNhc2UoKT90aGlzLmxvYWRDYW52YXModCk6dGhpcy5fY3VydGFpbnMucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcInRoaXMgSFRNTCB0YWcgY291bGQgbm90IGJlIGNvbnZlcnRlZCBpbnRvIGEgdGV4dHVyZTpcIix0LnRhZ05hbWUpfSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLl9zb3VyY2VMb2FkRXJyb3I9ZnVuY3Rpb24odCl7dGhpcy5fY3VydGFpbnMucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcIlRoZXJlIGhhcyBiZWVuIGFuIGVycm9yIGxvYWRpbmcgdGhpcyBzb3VyY2U6XCIsdCl9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUuX2dldFRleHR1cmVGcm9tQ2FjaGU9ZnVuY3Rpb24odCl7dmFyIGU9ITE7aWYodGhpcy5fY3VydGFpbnMuX2ltYWdlQ2FjaGUubGVuZ3RoPjApZm9yKHZhciBpPTA7aTx0aGlzLl9jdXJ0YWlucy5faW1hZ2VDYWNoZS5sZW5ndGg7aSsrKXt2YXIgcz10aGlzLl9jdXJ0YWlucy5faW1hZ2VDYWNoZVtpXTtzLnNvdXJjZSYmXCJpbWFnZVwiPT09cy50eXBlJiZzLnNvdXJjZS5zcmM9PT10LnNyYyYmKGU9cyl9cmV0dXJuIGV9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUubG9hZEltYWdlPWZ1bmN0aW9uKHQpe3ZhciBlPXQ7ZS5jcm9zc09yaWdpbj10aGlzLmNyb3NzT3JpZ2lufHxcImFub255bW91c1wiLGUuc2FtcGxlcj10LmdldEF0dHJpYnV0ZShcImRhdGEtc2FtcGxlclwiKXx8bnVsbDt2YXIgaT10aGlzLl9nZXRUZXh0dXJlRnJvbUNhY2hlKHQpO2lmKGkpcmV0dXJuIHRoaXMuY3JlYXRlVGV4dHVyZSh7c2FtcGxlcjplLnNhbXBsZXIsZnJvbVRleHR1cmU6aX0pLHZvaWQgdGhpcy5pbWFnZXMucHVzaChpLnNvdXJjZSk7dmFyIHM9dGhpcy5jcmVhdGVUZXh0dXJlKHtzYW1wbGVyOmUuc2FtcGxlcn0pO3MuX29uU291cmNlTG9hZGVkSGFuZGxlcj1zLl9vblNvdXJjZUxvYWRlZC5iaW5kKHMsZSksZS5jb21wbGV0ZT9zLl9vblNvdXJjZUxvYWRlZChlKTooZS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLHMuX29uU291cmNlTG9hZGVkSGFuZGxlciwhMSksZS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIix0aGlzLl9zb3VyY2VMb2FkRXJyb3IuYmluZCh0aGlzLGUpLCExKSksdGhpcy5pbWFnZXMucHVzaChlKX0sQ3VydGFpbnMuQmFzZVBsYW5lLnByb3RvdHlwZS5sb2FkVmlkZW89ZnVuY3Rpb24odCl7dmFyIGU9dDtlLnByZWxvYWQ9ITAsZS5tdXRlZD0hMCxlLmxvb3A9ITAsZS5zYW1wbGVyPXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zYW1wbGVyXCIpfHxudWxsLGUuY3Jvc3NPcmlnaW49dGhpcy5jcm9zc09yaWdpbnx8XCJhbm9ueW1vdXNcIjt2YXIgaT10aGlzLmNyZWF0ZVRleHR1cmUoe3NhbXBsZXI6ZS5zYW1wbGVyfSk7aS5fb25Tb3VyY2VMb2FkZWRIYW5kbGVyPWkuX29uVmlkZW9Mb2FkZWREYXRhLmJpbmQoaSxlKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjYW5wbGF5dGhyb3VnaFwiLGkuX29uU291cmNlTG9hZGVkSGFuZGxlciwhMSksZS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIix0aGlzLl9zb3VyY2VMb2FkRXJyb3IuYmluZCh0aGlzLGUpLCExKSxlLnJlYWR5U3RhdGU+PWUuSEFWRV9GVVRVUkVfREFUQSYmaS5fb25Tb3VyY2VMb2FkZWQoZSksZS5sb2FkKCksdGhpcy52aWRlb3MucHVzaChlKX0sQ3VydGFpbnMuQmFzZVBsYW5lLnByb3RvdHlwZS5sb2FkQ2FudmFzPWZ1bmN0aW9uKHQpe3ZhciBlPXQ7ZS5zYW1wbGVyPXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zYW1wbGVyXCIpfHxudWxsO3ZhciBpPXRoaXMuY3JlYXRlVGV4dHVyZSh7c2FtcGxlcjplLnNhbXBsZXJ9KTt0aGlzLmNhbnZhc2VzLnB1c2goZSksaS5fb25Tb3VyY2VMb2FkZWQoZSl9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUubG9hZEltYWdlcz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl0aGlzLmxvYWRJbWFnZSh0W2VdKX0sQ3VydGFpbnMuQmFzZVBsYW5lLnByb3RvdHlwZS5sb2FkVmlkZW9zPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXRoaXMubG9hZFZpZGVvKHRbZV0pfSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLmxvYWRDYW52YXNlcz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl0aGlzLmxvYWRDYW52YXModFtlXSl9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUucGxheVZpZGVvcz1mdW5jdGlvbigpe2Zvcih2YXIgdD0wO3Q8dGhpcy50ZXh0dXJlcy5sZW5ndGg7dCsrKXt2YXIgZT10aGlzLnRleHR1cmVzW3RdO2lmKFwidmlkZW9cIj09PWUudHlwZSl7dmFyIGk9ZS5zb3VyY2UucGxheSgpLHM9dGhpczt2b2lkIDAhPT1pJiZpLmNhdGNoKGZ1bmN0aW9uKHQpe3MuX2N1cnRhaW5zLnByb2R1Y3Rpb25Nb2RlfHxjb25zb2xlLndhcm4oXCJDb3VsZCBub3QgcGxheSB0aGUgdmlkZW8gOiBcIix0KX0pfX19LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUubW91c2VUb1BsYW5lQ29vcmRzPWZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcy5zY2FsZT90aGlzLnNjYWxlOnt4OjEseToxfSxzPSh0aGlzLl9ib3VuZGluZ1JlY3QuZG9jdW1lbnQud2lkdGgtdGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50LndpZHRoKmkueCkvMixyPSh0aGlzLl9ib3VuZGluZ1JlY3QuZG9jdW1lbnQuaGVpZ2h0LXRoaXMuX2JvdW5kaW5nUmVjdC5kb2N1bWVudC5oZWlnaHQqaS55KS8yLGE9dGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50LndpZHRoKmkueC90aGlzLl9jdXJ0YWlucy5waXhlbFJhdGlvLG49dGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50LmhlaWdodCppLnkvdGhpcy5fY3VydGFpbnMucGl4ZWxSYXRpbyxvPSh0aGlzLl9ib3VuZGluZ1JlY3QuZG9jdW1lbnQudG9wK3IpL3RoaXMuX2N1cnRhaW5zLnBpeGVsUmF0aW87cmV0dXJue3g6KHQtKHRoaXMuX2JvdW5kaW5nUmVjdC5kb2N1bWVudC5sZWZ0K3MpL3RoaXMuX2N1cnRhaW5zLnBpeGVsUmF0aW8pL2EqMi0xLHk6MS0oZS1vKS9uKjJ9fSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLl9iaW5kUGxhbmVCdWZmZXJzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fY3VydGFpbnMsZT10LmdsO3RoaXMuX3Zhbz90Ll9pc1dlYkdMMj90LmdsLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLl92YW8pOnQuX2V4dGVuc2lvbnMuT0VTX3ZlcnRleF9hcnJheV9vYmplY3QuYmluZFZlcnRleEFycmF5T0VTKHRoaXMuX3Zhbyk6KGUuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5fYXR0cmlidXRlcy52ZXJ0ZXhQb3NpdGlvbi5sb2NhdGlvbiksZS5iaW5kQnVmZmVyKGUuQVJSQVlfQlVGRkVSLHRoaXMuX2dlb21ldHJ5LmJ1ZmZlckluZm9zLmlkKSxlLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5fYXR0cmlidXRlcy52ZXJ0ZXhQb3NpdGlvbi5sb2NhdGlvbix0aGlzLl9nZW9tZXRyeS5idWZmZXJJbmZvcy5pdGVtU2l6ZSxlLkZMT0FULCExLDAsMCksZS5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLl9hdHRyaWJ1dGVzLnRleHR1cmVDb29yZC5sb2NhdGlvbiksZS5iaW5kQnVmZmVyKGUuQVJSQVlfQlVGRkVSLHRoaXMuX21hdGVyaWFsLmJ1ZmZlckluZm9zLmlkKSxlLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5fYXR0cmlidXRlcy50ZXh0dXJlQ29vcmQubG9jYXRpb24sdGhpcy5fbWF0ZXJpYWwuYnVmZmVySW5mb3MuaXRlbVNpemUsZS5GTE9BVCwhMSwwLDApKSx0Ll9nbFN0YXRlLmN1cnJlbnRCdWZmZXJzSUQ9dGhpcy5fZGVmaW5pdGlvbi5idWZmZXJzSUR9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUuX2JpbmRQbGFuZVRleHR1cmU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fY3VydGFpbnMuZ2w7dC5fY2FuRHJhdyYmKGUuYWN0aXZlVGV4dHVyZShlLlRFWFRVUkUwK3QuaW5kZXgpLGUuYmluZFRleHR1cmUoZS5URVhUVVJFXzJELHQuX3NhbXBsZXIudGV4dHVyZSkpfSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLnNldFJlbmRlclRhcmdldD1mdW5jdGlvbih0KXt0JiZ0Ll90eXBlJiZcIlJlbmRlclRhcmdldFwiPT09dC5fdHlwZT90aGlzLnRhcmdldD10OnRoaXMuX2N1cnRhaW5zLnByb2R1Y3Rpb25Nb2RlfHxjb25zb2xlLndhcm4oXCJDb3VsZCBub3Qgc2V0IHRoZSByZW5kZXIgdGFyZ2V0IGJlY2F1c2UgdGhlIGFyZ3VtZW50IHBhc3NlZCBpcyBub3QgYSBSZW5kZXJUYXJnZXQgY2xhc3Mgb2JqZWN0XCIsdCl9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUuX2RyYXdQbGFuZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2N1cnRhaW5zLGU9dC5nbDtpZih0aGlzLl9jYW5EcmF3JiYodC5fc2V0RGVwdGgodGhpcy5fZGVwdGhUZXN0KSx0aGlzLl9vblJlbmRlckNhbGxiYWNrJiZ0aGlzLl9vblJlbmRlckNhbGxiYWNrKCksXCJTaGFkZXJQYXNzXCI9PT10aGlzLl90eXBlP3RoaXMuX2lzU2NlbmVQYXNzP3QuX2dsU3RhdGUuc2NlbmVQYXNzSW5kZXgrMTx0Ll9kcmF3U3RhY2tzLnNjZW5lUGFzc2VzLmxlbmd0aD8odC5fYmluZEZyYW1lQnVmZmVyKHQuc2hhZGVyUGFzc2VzW3QuX2RyYXdTdGFja3Muc2NlbmVQYXNzZXNbdC5fZ2xTdGF0ZS5zY2VuZVBhc3NJbmRleCsxXV0udGFyZ2V0KSx0Ll9nbFN0YXRlLnNjZW5lUGFzc0luZGV4KyspOnQuX2JpbmRGcmFtZUJ1ZmZlcihudWxsKTpudWxsPT09dC5fZ2xTdGF0ZS5zY2VuZVBhc3NJbmRleCYmdC5fYmluZEZyYW1lQnVmZmVyKG51bGwpOih0aGlzLnRhcmdldD90Ll9iaW5kRnJhbWVCdWZmZXIodGhpcy50YXJnZXQpOm51bGw9PT10Ll9nbFN0YXRlLnNjZW5lUGFzc0luZGV4JiZ0Ll9iaW5kRnJhbWVCdWZmZXIobnVsbCksdGhpcy5fc2V0UGVyc3BlY3RpdmVNYXRyaXgoKSx0aGlzLl9zZXRNVk1hdHJpeCgpKSx0aGlzLl9zaG91bGREcmF3JiZ0aGlzLnZpc2libGUpKXt0Ll91c2VQcm9ncmFtKHRoaXMuX3VzZWRQcm9ncmFtKSx0aGlzLl91cGRhdGVVbmlmb3JtcygpLCh0Ll9nbFN0YXRlLmN1cnJlbnRCdWZmZXJzSUQhPT10aGlzLl9kZWZpbml0aW9uLmJ1ZmZlcnNJRHx8dGhpcy50YXJnZXQpJiZ0aGlzLl9iaW5kUGxhbmVCdWZmZXJzKCk7Zm9yKHZhciBpPTA7aTx0aGlzLnRleHR1cmVzLmxlbmd0aDtpKyspdGhpcy50ZXh0dXJlc1tpXS5fZHJhd1RleHR1cmUoKTtlLmRyYXdBcnJheXMoZS5UUklBTkdMRVMsMCx0aGlzLl9nZW9tZXRyeS5idWZmZXJJbmZvcy5udW1iZXJPZkl0ZW1zKSx0aGlzLl9vbkFmdGVyUmVuZGVyQ2FsbGJhY2smJnRoaXMuX29uQWZ0ZXJSZW5kZXJDYWxsYmFjaygpfX0sQ3VydGFpbnMuQmFzZVBsYW5lLnByb3RvdHlwZS5fZGlzcG9zZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2N1cnRhaW5zLmdsO2lmKHQpe3RoaXMuX3ZhbyYmKHRoaXMuX2N1cnRhaW5zLl9pc1dlYkdMMj90LmRlbGV0ZVZlcnRleEFycmF5KHRoaXMuX3Zhbyk6dGhpcy5fY3VydGFpbnMuX2V4dGVuc2lvbnMuT0VTX3ZlcnRleF9hcnJheV9vYmplY3QuZGVsZXRlVmVydGV4QXJyYXlPRVModGhpcy5fdmFvKSksdGhpcy5fZ2VvbWV0cnkmJih0LmJpbmRCdWZmZXIodC5BUlJBWV9CVUZGRVIsdGhpcy5fZ2VvbWV0cnkuYnVmZmVySW5mb3MuaWQpLHQuYnVmZmVyRGF0YSh0LkFSUkFZX0JVRkZFUiwxLHQuU1RBVElDX0RSQVcpLHQuZGVsZXRlQnVmZmVyKHRoaXMuX2dlb21ldHJ5LmJ1ZmZlckluZm9zLmlkKSx0aGlzLl9nZW9tZXRyeT1udWxsKSx0aGlzLl9tYXRlcmlhbCYmKHQuYmluZEJ1ZmZlcih0LkFSUkFZX0JVRkZFUix0aGlzLl9tYXRlcmlhbC5idWZmZXJJbmZvcy5pZCksdC5idWZmZXJEYXRhKHQuQVJSQVlfQlVGRkVSLDEsdC5TVEFUSUNfRFJBVyksdC5kZWxldGVCdWZmZXIodGhpcy5fbWF0ZXJpYWwuYnVmZmVySW5mb3MuaWQpLHRoaXMuX21hdGVyaWFsPW51bGwpLHRoaXMudGFyZ2V0JiZcIlNoYWRlclBhc3NcIj09PXRoaXMuX3R5cGUmJih0aGlzLl9jdXJ0YWlucy5yZW1vdmVSZW5kZXJUYXJnZXQodGhpcy50YXJnZXQpLHRoaXMudGV4dHVyZXMuc2hpZnQoKSk7Zm9yKHZhciBlPTA7ZTx0aGlzLnRleHR1cmVzLmxlbmd0aDtlKyspdGhpcy50ZXh0dXJlc1tlXS5fZGlzcG9zZSgpO3RoaXMudGV4dHVyZXM9bnVsbH19LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUub25BZnRlclJlc2l6ZT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmKHRoaXMuX29uQWZ0ZXJSZXNpemVDYWxsYmFjaz10KSx0aGlzfSxDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlLm9uTG9hZGluZz1mdW5jdGlvbih0KXtyZXR1cm4gdCYmKHRoaXMuX29uUGxhbmVMb2FkaW5nQ2FsbGJhY2s9dCksdGhpc30sQ3VydGFpbnMuQmFzZVBsYW5lLnByb3RvdHlwZS5vblJlYWR5PWZ1bmN0aW9uKHQpe3JldHVybiB0JiYodGhpcy5fb25SZWFkeUNhbGxiYWNrPXQpLHRoaXN9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUub25SZW5kZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJih0aGlzLl9vblJlbmRlckNhbGxiYWNrPXQpLHRoaXN9LEN1cnRhaW5zLkJhc2VQbGFuZS5wcm90b3R5cGUub25BZnRlclJlbmRlcj1mdW5jdGlvbih0KXtyZXR1cm4gdCYmKHRoaXMuX29uQWZ0ZXJSZW5kZXJDYWxsYmFjaz10KSx0aGlzfSxDdXJ0YWlucy5QbGFuZT1mdW5jdGlvbih0LGUsaSl7dGhpcy5fdHlwZT1cIlBsYW5lXCIsQ3VydGFpbnMuQmFzZVBsYW5lLmNhbGwodGhpcyx0LGUsaSksdGhpcy5pbmRleD10aGlzLl9jdXJ0YWlucy5wbGFuZXMubGVuZ3RoLHRoaXMuX2NhbkRyYXc9ITEsdGhpcy50YXJnZXQ9bnVsbCxpfHwoaT17fSksdGhpcy5fc2V0SW5pdFBhcmFtcyhpKSx0aGlzLl91c2VkUHJvZ3JhbT8odGhpcy5fY3VydGFpbnMuX3N0YWNrUGxhbmUodGhpcyksdGhpcy5faW5pdFBvc2l0aW9ucygpLHRoaXMuX2luaXRTb3VyY2VzKCkpOnRoaXMuX2N1cnRhaW5zLl9vbkVycm9yQ2FsbGJhY2smJnRoaXMuX2N1cnRhaW5zLl9vbkVycm9yQ2FsbGJhY2soKX0sQ3VydGFpbnMuUGxhbmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoQ3VydGFpbnMuQmFzZVBsYW5lLnByb3RvdHlwZSksQ3VydGFpbnMuUGxhbmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPUN1cnRhaW5zLlBsYW5lLEN1cnRhaW5zLlBsYW5lLnByb3RvdHlwZS5fc2V0SW5pdFBhcmFtcz1mdW5jdGlvbih0KXt0aGlzLmFsd2F5c0RyYXc9dC5hbHdheXNEcmF3fHwhMSx0aGlzLl90cmFuc3BhcmVudD10LnRyYW5zcGFyZW50fHwhMTt2YXIgZT17dG9wOjAscmlnaHQ6MCxib3R0b206MCxsZWZ0OjB9O3QuZHJhd0NoZWNrTWFyZ2lucyYmKGU9dC5kcmF3Q2hlY2tNYXJnaW5zKSx0aGlzLmRyYXdDaGVja01hcmdpbnM9ZSx0aGlzLl9pbml0VHJhbnNmb3JtVmFsdWVzKCksdGhpcy5hdXRvbG9hZFNvdXJjZXM9dC5hdXRvbG9hZFNvdXJjZXMsbnVsbCE9PXRoaXMuYXV0b2xvYWRTb3VyY2VzJiZ2b2lkIDAhPT10aGlzLmF1dG9sb2FkU291cmNlc3x8KHRoaXMuYXV0b2xvYWRTb3VyY2VzPSEwKSx0aGlzLl9mb3Y9dC5mb3Z8fDc1LHRoaXMuX25lYXJQbGFuZT0uMSx0aGlzLl9mYXJQbGFuZT0yKnRoaXMuX2ZvdixudWxsPT09dC53YXRjaFNjcm9sbHx8dm9pZCAwPT09dC53YXRjaFNjcm9sbD90aGlzLndhdGNoU2Nyb2xsPXRoaXMuX2N1cnRhaW5zLl93YXRjaFNjcm9sbDp0aGlzLndhdGNoU2Nyb2xsPXQud2F0Y2hTY3JvbGx8fCExLHRoaXMud2F0Y2hTY3JvbGwmJih0aGlzLl9jdXJ0YWlucy5fc2Nyb2xsTWFuYWdlci5zaG91bGRXYXRjaD0hMCl9LEN1cnRhaW5zLlBsYW5lLnByb3RvdHlwZS5faW5pdFRyYW5zZm9ybVZhbHVlcz1mdW5jdGlvbih0KXt0aGlzLnJvdGF0aW9uPXt4OjAseTowLHo6MH0sdGhpcy5yZWxhdGl2ZVRyYW5zbGF0aW9uPXt4OjAseTowfSx0aGlzLl90cmFuc2xhdGlvbj17eDowLHk6MCx6OjB9LHRoaXMuc2NhbGU9e3g6MSx5OjF9LHRoaXMudHJhbnNmb3JtT3JpZ2luPXt4Oi41LHk6LjV9fSxDdXJ0YWlucy5QbGFuZS5wcm90b3R5cGUuX2luaXRQb3NpdGlvbnM9ZnVuY3Rpb24oKXt0aGlzLl9pbml0TWF0cmljZXMoKSx0aGlzLnNldFBlcnNwZWN0aXZlKHRoaXMuX2ZvdiwuMSwyKnRoaXMuX2ZvdiksdGhpcy5fYXBwbHlDU1NQb3NpdGlvbnMoKX0sQ3VydGFpbnMuUGxhbmUucHJvdG90eXBlLl9pbml0U291cmNlcz1mdW5jdGlvbigpe2lmKHRoaXMuYXV0b2xvYWRTb3VyY2VzKXtmb3IodmFyIHQ9W10sZT0wO2U8dGhpcy5odG1sRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImltZ1wiKS5sZW5ndGg7ZSsrKXQucHVzaCh0aGlzLmh0bWxFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW1nXCIpW2VdKTt0Lmxlbmd0aD4wJiZ0aGlzLmxvYWRTb3VyY2VzKHQpO3ZhciBpPVtdO2ZvcihlPTA7ZTx0aGlzLmh0bWxFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidmlkZW9cIikubGVuZ3RoO2UrKylpLnB1c2godGhpcy5odG1sRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInZpZGVvXCIpW2VdKTtpLmxlbmd0aD4wJiZ0aGlzLmxvYWRTb3VyY2VzKGkpO3ZhciBzPVtdO2ZvcihlPTA7ZTx0aGlzLmh0bWxFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiY2FudmFzXCIpLmxlbmd0aDtlKyspcy5wdXNoKHRoaXMuaHRtbEVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJjYW52YXNcIilbZV0pO3MubGVuZ3RoPjAmJnRoaXMubG9hZFNvdXJjZXMocyksdGhpcy5fbG9hZGluZ01hbmFnZXIuaW5pdFNvdXJjZXNUb0xvYWQ9dC5sZW5ndGgraS5sZW5ndGgrcy5sZW5ndGh9MD09PXRoaXMuX2xvYWRpbmdNYW5hZ2VyLmluaXRTb3VyY2VzVG9Mb2FkJiYodGhpcy5faXNQbGFuZVJlYWR5KCksdGhpcy5fY3VydGFpbnMucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcIlRoaXMgcGxhbmUgZG9lcyBub3QgY29udGFpbiBhbnkgaW1hZ2UsIHZpZGVvIG9yIGNhbnZhcyBlbGVtZW50LiBZb3UgbWF5IHdhbnQgdG8gYWRkIHNvbWUgbGF0ZXIgd2l0aCB0aGUgbG9hZFNvdXJjZSgpIG9yIGxvYWRTb3VyY2VzKCkgbWV0aG9kLlwiKSksdGhpcy5fY2FuRHJhdz0hMCx0aGlzLl9jdXJ0YWlucy5uZWVkUmVuZGVyKCksdGhpcy5hbHdheXNEcmF3fHx0aGlzLl9zaG91bGREcmF3Q2hlY2soKX0sQ3VydGFpbnMuUGxhbmUucHJvdG90eXBlLl9pbml0TWF0cmljZXM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9jdXJ0YWlucy5nbDt0aGlzLl9tYXRyaWNlcz17bXZNYXRyaXg6e25hbWU6XCJ1TVZNYXRyaXhcIixtYXRyaXg6bmV3IEZsb2F0MzJBcnJheShbMSwwLDAsMCwwLDEsMCwwLDAsMCwxLDAsMCwwLDAsMV0pLGxvY2F0aW9uOnQuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3VzZWRQcm9ncmFtLnByb2dyYW0sXCJ1TVZNYXRyaXhcIil9LHBNYXRyaXg6e25hbWU6XCJ1UE1hdHJpeFwiLG1hdHJpeDpuZXcgRmxvYXQzMkFycmF5KFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSksbG9jYXRpb246dC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fdXNlZFByb2dyYW0ucHJvZ3JhbSxcInVQTWF0cml4XCIpfX19LEN1cnRhaW5zLlBsYW5lLnByb3RvdHlwZS5yZXNldFBsYW5lPWZ1bmN0aW9uKHQpe3RoaXMuX2luaXRUcmFuc2Zvcm1WYWx1ZXMoKSxudWxsIT09dCYmdD8odGhpcy5odG1sRWxlbWVudD10LHRoaXMudXBkYXRlUG9zaXRpb24oKSk6dHx8dGhpcy5fY3VydGFpbnMucHJvZHVjdGlvbk1vZGV8fGNvbnNvbGUud2FybihcIllvdSBhcmUgdHJ5aW5nIHRvIHJlc2V0IGEgcGxhbmUgd2l0aCBhIEhUTUwgZWxlbWVudCB0aGF0IGRvZXMgbm90IGV4aXN0LiBUaGUgb2xkIEhUTUwgZWxlbWVudCB3aWxsIGJlIGtlcHQgaW5zdGVhZC5cIil9LEN1cnRhaW5zLlBsYW5lLnByb3RvdHlwZS5fc2V0Q29tcHV0ZWRTaXplcz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2N1cnRhaW5zLGU9dGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50LndpZHRoLzIrdGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50LmxlZnQsaT10aGlzLl9ib3VuZGluZ1JlY3QuZG9jdW1lbnQuaGVpZ2h0LzIrdGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50LnRvcCxzPXQuX2JvdW5kaW5nUmVjdC53aWR0aC8yK3QuX2JvdW5kaW5nUmVjdC5sZWZ0LHI9dC5fYm91bmRpbmdSZWN0LmhlaWdodC8yK3QuX2JvdW5kaW5nUmVjdC50b3A7dGhpcy5fYm91bmRpbmdSZWN0LmNvbXB1dGVkPXt3aWR0aDp0aGlzLl9ib3VuZGluZ1JlY3QuZG9jdW1lbnQud2lkdGgvdC5fYm91bmRpbmdSZWN0LndpZHRoLGhlaWdodDp0aGlzLl9ib3VuZGluZ1JlY3QuZG9jdW1lbnQuaGVpZ2h0L3QuX2JvdW5kaW5nUmVjdC5oZWlnaHQsdG9wOihyLWkpL3QuX2JvdW5kaW5nUmVjdC5oZWlnaHQsbGVmdDooZS1zKS90Ll9ib3VuZGluZ1JlY3QuaGVpZ2h0fX0sQ3VydGFpbnMuUGxhbmUucHJvdG90eXBlLl9zZXRQZXJzcGVjdGl2ZU1hdHJpeD1mdW5jdGlvbigpe2lmKHRoaXMuX3VwZGF0ZVBlcnNwZWN0aXZlTWF0cml4KXt2YXIgdD10aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LndpZHRoL3RoaXMuX2N1cnRhaW5zLl9ib3VuZGluZ1JlY3QuaGVpZ2h0O3RoaXMuX21hdHJpY2VzLnBNYXRyaXgubWF0cml4PVt0aGlzLl9mb3YvdCwwLDAsMCwwLHRoaXMuX2ZvdiwwLDAsMCwwLCh0aGlzLl9uZWFyUGxhbmUrdGhpcy5fZmFyUGxhbmUpKigxLyh0aGlzLl9uZWFyUGxhbmUtdGhpcy5fZmFyUGxhbmUpKSwtMSwwLDAsdGhpcy5fbmVhclBsYW5lKnRoaXMuX2ZhclBsYW5lKigxLyh0aGlzLl9uZWFyUGxhbmUtdGhpcy5fZmFyUGxhbmUpKSoyLDBdfSh0aGlzLnNoYXJlUHJvZ3JhbXx8IXRoaXMuc2hhcmVQcm9ncmFtJiZ0aGlzLl91cGRhdGVQZXJzcGVjdGl2ZU1hdHJpeCkmJih0aGlzLl9jdXJ0YWlucy5fdXNlUHJvZ3JhbSh0aGlzLl91c2VkUHJvZ3JhbSksdGhpcy5fY3VydGFpbnMuZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl9tYXRyaWNlcy5wTWF0cml4LmxvY2F0aW9uLCExLHRoaXMuX21hdHJpY2VzLnBNYXRyaXgubWF0cml4KSksdGhpcy5fdXBkYXRlUGVyc3BlY3RpdmVNYXRyaXg9ITF9LEN1cnRhaW5zLlBsYW5lLnByb3RvdHlwZS5zZXRQZXJzcGVjdGl2ZT1mdW5jdGlvbih0LGUsaSl7dmFyIHM7KHM9bnVsbD09PXR8fFwibnVtYmVyXCIhPXR5cGVvZiB0Pzc1OnBhcnNlSW50KHQpKTwxP3M9MTpzPjE4MCYmKHM9MTgwKSxzIT09dGhpcy5fZm92JiYodGhpcy5fZm92PXMpO3ZhciByPXBhcnNlRmxvYXQoZSl8fC4xO3IhPT10aGlzLl9uZWFyUGxhbmUmJih0aGlzLl9uZWFyUGxhbmU9cik7dmFyIGE9cGFyc2VGbG9hdChpKXx8MipzO2EhPT10aGlzLl9mYXJQbGFuZSYmKHRoaXMuX2ZhclBsYW5lPWEpLHRoaXMuX3VwZGF0ZVBlcnNwZWN0aXZlTWF0cml4PSEwLHRoaXMuX3VwZGF0ZU1WTWF0cml4PSEwfSxDdXJ0YWlucy5QbGFuZS5wcm90b3R5cGUuX3NldE1WTWF0cml4PWZ1bmN0aW9uKCl7aWYodGhpcy5fdXBkYXRlTVZNYXRyaXgpe3ZhciB0PXt4OnRoaXMuX2N1cnRhaW5zLl9ib3VuZGluZ1JlY3Qud2lkdGgvdGhpcy5fY3VydGFpbnMuX2JvdW5kaW5nUmVjdC5oZWlnaHQqdGhpcy5fYm91bmRpbmdSZWN0LmNvbXB1dGVkLndpZHRoLzIseTp0aGlzLl9ib3VuZGluZ1JlY3QuY29tcHV0ZWQuaGVpZ2h0LzJ9LGU9W3RoaXMuX3RyYW5zbGF0aW9uLngsdGhpcy5fdHJhbnNsYXRpb24ueSx0aGlzLl90cmFuc2xhdGlvbi56LXRoaXMuX2Zvdi8yXSxpPVt0aGlzLnJvdGF0aW9uLngsdGhpcy5yb3RhdGlvbi55LHRoaXMucm90YXRpb24uel0scz1bdGhpcy5zY2FsZS54LHRoaXMuc2NhbGUueSwxXSxyPXt4OjIqdGhpcy50cmFuc2Zvcm1PcmlnaW4ueC0xLHk6LSgyKnRoaXMudHJhbnNmb3JtT3JpZ2luLnktMSl9LGE9W3IueCp0Lngsci55KnQueSwwXSxuPXRoaXMuX2N1cnRhaW5zLl9hcHBseVRyYW5zZm9ybWF0aW9uc01hdHJpeEZyb21PcmlnaW4oZSxpLHMsYSksbz1uZXcgRmxvYXQzMkFycmF5KFt0LngsMCwwLDAsMCx0LnksMCwwLDAsMCwxLDAsMCwwLDAsMV0pO3RoaXMuX21hdHJpY2VzLm12TWF0cml4Lm1hdHJpeD10aGlzLl9jdXJ0YWlucy5fbXVsdGlwbHlNYXRyaXgobixvKSx0aGlzLl9tYXRyaWNlcy5tVlBNYXRyaXg9dGhpcy5fY3VydGFpbnMuX211bHRpcGx5TWF0cml4KHRoaXMuX21hdHJpY2VzLnBNYXRyaXgubWF0cml4LHRoaXMuX21hdHJpY2VzLm12TWF0cml4Lm1hdHJpeCksdGhpcy5hbHdheXNEcmF3fHx0aGlzLl9zaG91bGREcmF3Q2hlY2soKX0odGhpcy5zaGFyZVByb2dyYW18fCF0aGlzLnNoYXJlUHJvZ3JhbSYmdGhpcy5fdXBkYXRlTVZNYXRyaXgpJiYodGhpcy5fY3VydGFpbnMuX3VzZVByb2dyYW0odGhpcy5fdXNlZFByb2dyYW0pLHRoaXMuX2N1cnRhaW5zLmdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fbWF0cmljZXMubXZNYXRyaXgubG9jYXRpb24sITEsdGhpcy5fbWF0cmljZXMubXZNYXRyaXgubWF0cml4KSksdGhpcy5fdXBkYXRlTVZNYXRyaXg9ITF9LEN1cnRhaW5zLlBsYW5lLnByb3RvdHlwZS5zZXRTY2FsZT1mdW5jdGlvbih0LGUpe2lmKHQ9aXNOYU4odCk/MTpwYXJzZUZsb2F0KHQpLGU9aXNOYU4oZSk/MTpwYXJzZUZsb2F0KGUpLHQhPT10aGlzLnNjYWxlLnh8fGUhPT10aGlzLnNjYWxlLnkpe3RoaXMuc2NhbGU9e3g6dCx5OmV9O2Zvcih2YXIgaT0wO2k8dGhpcy50ZXh0dXJlcy5sZW5ndGg7aSsrKXRoaXMudGV4dHVyZXNbaV0ucmVzaXplKCk7dGhpcy5fdXBkYXRlTVZNYXRyaXg9ITB9fSxDdXJ0YWlucy5QbGFuZS5wcm90b3R5cGUuc2V0Um90YXRpb249ZnVuY3Rpb24odCxlLGkpe3Q9aXNOYU4odCk/MDpwYXJzZUZsb2F0KHQpLGU9aXNOYU4oZSk/MDpwYXJzZUZsb2F0KGUpLGk9aXNOYU4oaSk/MDpwYXJzZUZsb2F0KGkpLHQ9PT10aGlzLnJvdGF0aW9uLngmJmU9PT10aGlzLnJvdGF0aW9uLnkmJmk9PT10aGlzLnJvdGF0aW9uLnp8fCh0aGlzLnJvdGF0aW9uPXt4OnQseTplLHo6aX0sdGhpcy5fdXBkYXRlTVZNYXRyaXg9ITApfSxDdXJ0YWlucy5QbGFuZS5wcm90b3R5cGUuc2V0VHJhbnNmb3JtT3JpZ2luPWZ1bmN0aW9uKHQsZSl7dD1pc05hTih0KT8uNTpwYXJzZUZsb2F0KHQpLGU9aXNOYU4oZSk/LjU6cGFyc2VGbG9hdChlKSx0PT09dGhpcy50cmFuc2Zvcm1PcmlnaW4ueCYmZT09PXRoaXMudHJhbnNmb3JtT3JpZ2luLnl8fCh0aGlzLnRyYW5zZm9ybU9yaWdpbj17eDp0LHk6ZX0sdGhpcy5fdXBkYXRlTVZNYXRyaXg9ITApfSxDdXJ0YWlucy5QbGFuZS5wcm90b3R5cGUuX3NldFRyYW5zbGF0aW9uPWZ1bmN0aW9uKCl7dmFyIHQ9e3g6MCx5OjB9OzA9PT10aGlzLnJlbGF0aXZlVHJhbnNsYXRpb24ueCYmMD09PXRoaXMucmVsYXRpdmVUcmFuc2xhdGlvbi55fHwodD10aGlzLl9kb2N1bWVudFRvUGxhbmVTcGFjZSh0aGlzLnJlbGF0aXZlVHJhbnNsYXRpb24ueCx0aGlzLnJlbGF0aXZlVHJhbnNsYXRpb24ueSkpLHRoaXMuX3RyYW5zbGF0aW9uLng9dGhpcy5fYm91bmRpbmdSZWN0LmNvbXB1dGVkLmxlZnQrdC54LHRoaXMuX3RyYW5zbGF0aW9uLnk9dGhpcy5fYm91bmRpbmdSZWN0LmNvbXB1dGVkLnRvcCt0LnksdGhpcy5fdXBkYXRlTVZNYXRyaXg9ITB9LEN1cnRhaW5zLlBsYW5lLnByb3RvdHlwZS5zZXRSZWxhdGl2ZVBvc2l0aW9uPWZ1bmN0aW9uKHQsZSl7dD1pc05hTih0KT8wOnBhcnNlRmxvYXQodCksZT1pc05hTihlKT8wOnBhcnNlRmxvYXQoZSksdD09PXRoaXMucmVsYXRpdmVUcmFuc2xhdGlvbi54JiZlPT09dGhpcy5yZWxhdGl2ZVRyYW5zbGF0aW9uLnl8fCh0aGlzLnJlbGF0aXZlVHJhbnNsYXRpb249e3g6dCx5OmV9LHRoaXMuX3NldFRyYW5zbGF0aW9uKCkpfSxDdXJ0YWlucy5QbGFuZS5wcm90b3R5cGUuX2RvY3VtZW50VG9QbGFuZVNwYWNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJue3g6dC8odGhpcy5fY3VydGFpbnMuX2JvdW5kaW5nUmVjdC53aWR0aC90aGlzLl9jdXJ0YWlucy5waXhlbFJhdGlvKSoodGhpcy5fY3VydGFpbnMuX2JvdW5kaW5nUmVjdC53aWR0aC90aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LmhlaWdodCkseTotZS8odGhpcy5fY3VydGFpbnMuX2JvdW5kaW5nUmVjdC5oZWlnaHQvdGhpcy5fY3VydGFpbnMucGl4ZWxSYXRpbyl9fSxDdXJ0YWlucy5QbGFuZS5wcm90b3R5cGUuX3Nob3VsZERyYXdDaGVjaz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0V2ViR0xCb3VuZGluZ1JlY3QoKSxlPXRoaXM7TWF0aC5yb3VuZCh0LnJpZ2h0KTw9dGhpcy5fY3VydGFpbnMuX2JvdW5kaW5nUmVjdC5sZWZ0LXRoaXMuZHJhd0NoZWNrTWFyZ2lucy5yaWdodHx8TWF0aC5yb3VuZCh0LmxlZnQpPj10aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LmxlZnQrdGhpcy5fY3VydGFpbnMuX2JvdW5kaW5nUmVjdC53aWR0aCt0aGlzLmRyYXdDaGVja01hcmdpbnMubGVmdHx8TWF0aC5yb3VuZCh0LmJvdHRvbSk8PXRoaXMuX2N1cnRhaW5zLl9ib3VuZGluZ1JlY3QudG9wLXRoaXMuZHJhd0NoZWNrTWFyZ2lucy5ib3R0b218fE1hdGgucm91bmQodC50b3ApPj10aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LnRvcCt0aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LmhlaWdodCt0aGlzLmRyYXdDaGVja01hcmdpbnMudG9wP3RoaXMuX3Nob3VsZERyYXcmJih0aGlzLl9zaG91bGREcmF3PSExLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLl9vbkxlYXZlVmlld0NhbGxiYWNrJiZlLl9vbkxlYXZlVmlld0NhbGxiYWNrKCl9LDApKToodGhpcy5fc2hvdWxkRHJhd3x8c2V0VGltZW91dChmdW5jdGlvbigpe2UuX29uUmVFbnRlclZpZXdDYWxsYmFjayYmZS5fb25SZUVudGVyVmlld0NhbGxiYWNrKCl9LDApLHRoaXMuX3Nob3VsZERyYXc9ITApfSxDdXJ0YWlucy5QbGFuZS5wcm90b3R5cGUuX2FwcGx5Q1NTUG9zaXRpb25zPWZ1bmN0aW9uKCl7dGhpcy5fc2V0Q29tcHV0ZWRTaXplcygpLHRoaXMuX3NldFRyYW5zbGF0aW9uKCl9LEN1cnRhaW5zLlBsYW5lLnByb3RvdHlwZS51cGRhdGVQb3NpdGlvbj1mdW5jdGlvbigpe3RoaXMuX3NldERvY3VtZW50U2l6ZXMoKSx0aGlzLl9hcHBseUNTU1Bvc2l0aW9ucygpfSxDdXJ0YWlucy5QbGFuZS5wcm90b3R5cGUudXBkYXRlU2Nyb2xsUG9zaXRpb249ZnVuY3Rpb24oKXsodGhpcy5fY3VydGFpbnMuX3Njcm9sbE1hbmFnZXIubGFzdFhEZWx0YXx8dGhpcy5fY3VydGFpbnMuX3Njcm9sbE1hbmFnZXIubGFzdFlEZWx0YSkmJih0aGlzLl9ib3VuZGluZ1JlY3QuZG9jdW1lbnQudG9wKz10aGlzLl9jdXJ0YWlucy5fc2Nyb2xsTWFuYWdlci5sYXN0WURlbHRhKnRoaXMuX2N1cnRhaW5zLnBpeGVsUmF0aW8sdGhpcy5fYm91bmRpbmdSZWN0LmRvY3VtZW50LmxlZnQrPXRoaXMuX2N1cnRhaW5zLl9zY3JvbGxNYW5hZ2VyLmxhc3RYRGVsdGEqdGhpcy5fY3VydGFpbnMucGl4ZWxSYXRpbyx0aGlzLl9hcHBseUNTU1Bvc2l0aW9ucygpKX0sQ3VydGFpbnMuUGxhbmUucHJvdG90eXBlLmVuYWJsZURlcHRoVGVzdD1mdW5jdGlvbih0KXt0aGlzLl9kZXB0aFRlc3Q9dH0sQ3VydGFpbnMuUGxhbmUucHJvdG90eXBlLm1vdmVUb0Zyb250PWZ1bmN0aW9uKCl7dGhpcy5lbmFibGVEZXB0aFRlc3QoITEpO2Zvcih2YXIgdD10aGlzLl90cmFuc3BhcmVudD9cInRyYW5zcGFyZW50XCI6XCJvcGFxdWVcIixlPXRoaXMuX2N1cnRhaW5zLl9kcmF3U3RhY2tzW3RdLnByb2dyYW1zW1wicHJvZ3JhbS1cIit0aGlzLl91c2VkUHJvZ3JhbS5pZF0saT0wO2k8ZS5sZW5ndGg7aSsrKXRoaXMuaW5kZXg9PT1lW2ldJiZlLnNwbGljZShpLDEpO2Zvcih2YXIgcyBpblwidHJhbnNwYXJlbnRcIj09PXQ/ZS51bnNoaWZ0KHRoaXMuaW5kZXgpOmUucHVzaCh0aGlzLmluZGV4KSx0aGlzLl9jdXJ0YWlucy5fZHJhd1N0YWNrc1t0XSlzPT09XCJwcm9ncmFtLVwiK3RoaXMuX3VzZWRQcm9ncmFtLmlkJiZkZWxldGUgdGhpcy5fY3VydGFpbnMuX2RyYXdTdGFja3NbdF1bc107dGhpcy5fY3VydGFpbnMuX2RyYXdTdGFja3NbdF0ucHJvZ3JhbXNbXCJwcm9ncmFtLVwiK3RoaXMuX3VzZWRQcm9ncmFtLmlkXT1lfSxDdXJ0YWlucy5QbGFuZS5wcm90b3R5cGUub25SZUVudGVyVmlldz1mdW5jdGlvbih0KXtyZXR1cm4gdCYmKHRoaXMuX29uUmVFbnRlclZpZXdDYWxsYmFjaz10KSx0aGlzfSxDdXJ0YWlucy5QbGFuZS5wcm90b3R5cGUub25MZWF2ZVZpZXc9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJih0aGlzLl9vbkxlYXZlVmlld0NhbGxiYWNrPXQpLHRoaXN9LEN1cnRhaW5zLlJlbmRlclRhcmdldD1mdW5jdGlvbih0LGUpe2V8fChlPXt9KSx0aGlzLl9jdXJ0YWlucz10LHRoaXMuaW5kZXg9dGhpcy5fY3VydGFpbnMucmVuZGVyVGFyZ2V0cy5sZW5ndGgsdGhpcy5fdHlwZT1cIlJlbmRlclRhcmdldFwiLHRoaXMuX3NoYWRlclBhc3M9ZS5zaGFkZXJQYXNzfHxudWxsLHRoaXMuX2RlcHRoPWUuZGVwdGh8fCExLHRoaXMuX3Nob3VsZENsZWFyPWUuY2xlYXIsbnVsbCE9PXRoaXMuX3Nob3VsZENsZWFyJiZ2b2lkIDAhPT10aGlzLl9zaG91bGRDbGVhcnx8KHRoaXMuX3Nob3VsZENsZWFyPSEwKSx0aGlzLl9taW5TaXplPXt3aWR0aDplLm1pbldpZHRofHwxMDI0KnRoaXMuX2N1cnRhaW5zLnBpeGVsUmF0aW8saGVpZ2h0OmUubWluSGVpZ2h0fHwxMDI0KnRoaXMuX2N1cnRhaW5zLnBpeGVsUmF0aW99LHRoaXMudXNlckRhdGE9e30sdGhpcy5fdXVpZD10aGlzLl9jdXJ0YWlucy5fZ2VuZXJhdGVVVUlEKCksdGhpcy5fY3VydGFpbnMucmVuZGVyVGFyZ2V0cy5wdXNoKHRoaXMpLHRoaXMuX2luaXRSZW5kZXJUYXJnZXQoKX0sQ3VydGFpbnMuUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5faW5pdFJlbmRlclRhcmdldD1mdW5jdGlvbigpe3RoaXMuX3NldFNpemUoKSx0aGlzLnRleHR1cmVzPVtdLHRoaXMuX2NyZWF0ZUZyYW1lQnVmZmVyKCl9LEN1cnRhaW5zLlJlbmRlclRhcmdldC5wcm90b3R5cGUuX3NldFNpemU9ZnVuY3Rpb24oKXt0aGlzLl9zaGFkZXJQYXNzJiZ0aGlzLl9zaGFkZXJQYXNzLl9pc1NjZW5lUGFzcz90aGlzLl9zaXplPXt3aWR0aDp0aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LndpZHRoLGhlaWdodDp0aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LmhlaWdodH06dGhpcy5fc2l6ZT17d2lkdGg6TWF0aC5tYXgodGhpcy5fbWluU2l6ZS53aWR0aCx0aGlzLl9jdXJ0YWlucy5fYm91bmRpbmdSZWN0LndpZHRoKSxoZWlnaHQ6TWF0aC5tYXgodGhpcy5fbWluU2l6ZS5oZWlnaHQsdGhpcy5fY3VydGFpbnMuX2JvdW5kaW5nUmVjdC5oZWlnaHQpfX0sQ3VydGFpbnMuUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5yZXNpemU9ZnVuY3Rpb24oKXt0aGlzLl9zaGFkZXJQYXNzJiZ0aGlzLl9zaGFkZXJQYXNzLl9pc1NjZW5lUGFzcyYmKHRoaXMuX3NldFNpemUoKSx0aGlzLl9jdXJ0YWlucy5fYmluZEZyYW1lQnVmZmVyKHRoaXMsITApLHRoaXMuX2RlcHRoJiZ0aGlzLl9iaW5kRGVwdGhCdWZmZXIoKSx0aGlzLl9jdXJ0YWlucy5fYmluZEZyYW1lQnVmZmVyKG51bGwpKX0sQ3VydGFpbnMuUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5fYmluZERlcHRoQnVmZmVyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fY3VydGFpbnMuZ2w7dGhpcy5fZGVwdGhCdWZmZXImJih0LmJpbmRSZW5kZXJidWZmZXIodC5SRU5ERVJCVUZGRVIsdGhpcy5fZGVwdGhCdWZmZXIpLHQucmVuZGVyYnVmZmVyU3RvcmFnZSh0LlJFTkRFUkJVRkZFUix0LkRFUFRIX0NPTVBPTkVOVDE2LHRoaXMuX3NpemUud2lkdGgsdGhpcy5fc2l6ZS5oZWlnaHQpLHQuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIodC5GUkFNRUJVRkZFUix0LkRFUFRIX0FUVEFDSE1FTlQsdC5SRU5ERVJCVUZGRVIsdGhpcy5fZGVwdGhCdWZmZXIpKX0sQ3VydGFpbnMuUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5fY3JlYXRlRkJPVGV4dHVyZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2N1cnRhaW5zLmdsO2lmKHRoaXMudGV4dHVyZXMubGVuZ3RoPjApdGhpcy50ZXh0dXJlc1swXS5fY2FuRHJhdz0hMSx0aGlzLnRleHR1cmVzWzBdLl9pbml0KCk7ZWxzZXt2YXIgZT1uZXcgQ3VydGFpbnMuVGV4dHVyZSh0aGlzLl9zaGFkZXJQYXNzP3RoaXMuX3NoYWRlclBhc3M6dGhpcyx7aW5kZXg6dGhpcy50ZXh0dXJlcy5sZW5ndGgsc2FtcGxlcjpcInVSZW5kZXJUZXh0dXJlXCIsaXNGQk9UZXh0dXJlOiEwfSk7dGhpcy50ZXh0dXJlcy5wdXNoKGUpfXQuZnJhbWVidWZmZXJUZXh0dXJlMkQodC5GUkFNRUJVRkZFUix0LkNPTE9SX0FUVEFDSE1FTlQwLHQuVEVYVFVSRV8yRCx0aGlzLnRleHR1cmVzWzBdLl9zYW1wbGVyLnRleHR1cmUsMCl9LEN1cnRhaW5zLlJlbmRlclRhcmdldC5wcm90b3R5cGUuX2NyZWF0ZUZyYW1lQnVmZmVyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fY3VydGFpbnMuZ2w7dGhpcy5fZnJhbWVCdWZmZXI9dC5jcmVhdGVGcmFtZWJ1ZmZlcigpLHRoaXMuX2N1cnRhaW5zLl9iaW5kRnJhbWVCdWZmZXIodGhpcywhMCksdGhpcy5fY3JlYXRlRkJPVGV4dHVyZSgpLHRoaXMuX2RlcHRoJiYodGhpcy5fZGVwdGhCdWZmZXI9dC5jcmVhdGVSZW5kZXJidWZmZXIoKSx0aGlzLl9iaW5kRGVwdGhCdWZmZXIoKSksdGhpcy5fY3VydGFpbnMuX2JpbmRGcmFtZUJ1ZmZlcihudWxsKX0sQ3VydGFpbnMuUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5fcmVzdG9yZUNvbnRleHQ9ZnVuY3Rpb24oKXt0aGlzLl9zaGFkZXJQYXNzJiZ0aGlzLl9zaGFkZXJQYXNzLl9pc1NjZW5lUGFzc3x8KHRoaXMuX3NoYWRlclBhc3M9bnVsbCx0aGlzLl9jcmVhdGVGcmFtZUJ1ZmZlcigpKX0sQ3VydGFpbnMuUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5fZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuX2ZyYW1lQnVmZmVyJiYodGhpcy5fY3VydGFpbnMuZ2wuZGVsZXRlRnJhbWVidWZmZXIodGhpcy5fZnJhbWVCdWZmZXIpLHRoaXMuX2ZyYW1lQnVmZmVyPW51bGwpLHRoaXMuX2RlcHRoQnVmZmVyJiYodGhpcy5fY3VydGFpbnMuZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKHRoaXMuX2RlcHRoQnVmZmVyKSx0aGlzLl9kZXB0aEJ1ZmZlcj1udWxsKSx0aGlzLnRleHR1cmVzWzBdLl9kaXNwb3NlKCksdGhpcy50ZXh0dXJlcz1bXX0sQ3VydGFpbnMuU2hhZGVyUGFzcz1mdW5jdGlvbih0LGUpe2V8fChlPXt9KSxlLndpZHRoU2VnbWVudHM9MSxlLmhlaWdodFNlZ21lbnRzPTEsdGhpcy5fdHlwZT1cIlNoYWRlclBhc3NcIix0aGlzLl9pc1NjZW5lUGFzcz0hMCxDdXJ0YWlucy5CYXNlUGxhbmUuY2FsbCh0aGlzLHQsdC5jb250YWluZXIsZSksdGhpcy5pbmRleD10aGlzLl9jdXJ0YWlucy5zaGFkZXJQYXNzZXMubGVuZ3RoLHRoaXMuX2RlcHRoPWUuZGVwdGh8fCExLHRoaXMuX3Nob3VsZENsZWFyPWUuY2xlYXIsbnVsbCE9PXRoaXMuX3Nob3VsZENsZWFyJiZ2b2lkIDAhPT10aGlzLl9zaG91bGRDbGVhcnx8KHRoaXMuX3Nob3VsZENsZWFyPSEwKSx0aGlzLnRhcmdldD1lLnJlbmRlclRhcmdldHx8bnVsbCx0aGlzLnRhcmdldCYmKHRoaXMuX2lzU2NlbmVQYXNzPSExLHRoaXMuX3Nob3VsZENsZWFyPXRoaXMudGFyZ2V0Ll9zaG91bGRDbGVhciksdGhpcy5fdXNlZFByb2dyYW0mJnRoaXMuX2luaXRTaGFkZXJQYXNzUGxhbmUoKX0sQ3VydGFpbnMuU2hhZGVyUGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShDdXJ0YWlucy5CYXNlUGxhbmUucHJvdG90eXBlKSxDdXJ0YWlucy5TaGFkZXJQYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1DdXJ0YWlucy5TaGFkZXJQYXNzLEN1cnRhaW5zLlNoYWRlclBhc3MucHJvdG90eXBlLl9pbml0U2hhZGVyUGFzc1BsYW5lPWZ1bmN0aW9uKCl7aWYodGhpcy50YXJnZXQpe3RoaXMuc2V0UmVuZGVyVGFyZ2V0KHRoaXMudGFyZ2V0KSx0aGlzLnRhcmdldC5fc2hhZGVyUGFzcz10aGlzO3ZhciB0PW5ldyBDdXJ0YWlucy5UZXh0dXJlKHRoaXMse2luZGV4OnRoaXMudGV4dHVyZXMubGVuZ3RoLHNhbXBsZXI6XCJ1UmVuZGVyVGV4dHVyZVwiLGlzRkJPVGV4dHVyZTohMCxmcm9tVGV4dHVyZTp0aGlzLnRhcmdldC50ZXh0dXJlc1swXX0pO3RoaXMudGV4dHVyZXMucHVzaCh0KX1lbHNlIHRoaXMuX2NyZWF0ZUZyYW1lQnVmZmVyKCk7dGhpcy5faXNQbGFuZVJlYWR5KCksdGhpcy5fY2FuRHJhdz0hMCx0aGlzLl9jdXJ0YWlucy5uZWVkUmVuZGVyKCl9LEN1cnRhaW5zLlNoYWRlclBhc3MucHJvdG90eXBlLl9nZXREZWZhdWx0VlM9ZnVuY3Rpb24odCl7cmV0dXJuXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5hdHRyaWJ1dGUgdmVjMyBhVmVydGV4UG9zaXRpb247YXR0cmlidXRlIHZlYzIgYVRleHR1cmVDb29yZDt2YXJ5aW5nIHZlYzMgdlZlcnRleFBvc2l0aW9uO3ZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO3ZvaWQgbWFpbigpIHt2VGV4dHVyZUNvb3JkID0gYVRleHR1cmVDb29yZDt2VmVydGV4UG9zaXRpb24gPSBhVmVydGV4UG9zaXRpb247Z2xfUG9zaXRpb24gPSB2ZWM0KGFWZXJ0ZXhQb3NpdGlvbiwgMS4wKTt9XCJ9LEN1cnRhaW5zLlNoYWRlclBhc3MucHJvdG90eXBlLl9nZXREZWZhdWx0RlM9ZnVuY3Rpb24odCl7cmV0dXJuXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG52YXJ5aW5nIHZlYzMgdlZlcnRleFBvc2l0aW9uO3ZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO3VuaWZvcm0gc2FtcGxlcjJEIHVSZW5kZXJUZXh0dXJlO3ZvaWQgbWFpbiggdm9pZCApIHtnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodVJlbmRlclRleHR1cmUsIHZUZXh0dXJlQ29vcmQpO31cIn0sQ3VydGFpbnMuU2hhZGVyUGFzcy5wcm90b3R5cGUuX2NyZWF0ZUZyYW1lQnVmZmVyPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IEN1cnRhaW5zLlJlbmRlclRhcmdldCh0aGlzLl9jdXJ0YWlucyx7c2hhZGVyUGFzczp0aGlzLGNsZWFyOnRoaXMuX3Nob3VsZENsZWFyLGRlcHRoOnRoaXMuX2RlcHRofSk7dGhpcy5zZXRSZW5kZXJUYXJnZXQodCksdGhpcy50ZXh0dXJlcy5wdXNoKHRoaXMudGFyZ2V0LnRleHR1cmVzWzBdKX0sQ3VydGFpbnMuVGV4dHVyZT1mdW5jdGlvbih0LGUpe2lmKHRoaXMuX3BhcmVudD10LHRoaXMuX2N1cnRhaW5zPXQuX2N1cnRhaW5zLHRoaXMuX3V1aWQ9dGhpcy5fY3VydGFpbnMuX2dlbmVyYXRlVVVJRCgpLHQuX3VzZWRQcm9ncmFtfHxlLmlzRkJPVGV4dHVyZSlyZXR1cm4gdGhpcy5pbmRleD10LnRleHR1cmVzLmxlbmd0aCx0aGlzLl9zYW1wbGVyPXtuYW1lOmUuc2FtcGxlcnx8XCJ1U2FtcGxlclwiK3RoaXMuaW5kZXh9LHRoaXMuX3RleHR1cmVNYXRyaXg9e25hbWU6ZS5zYW1wbGVyP2Uuc2FtcGxlcitcIk1hdHJpeFwiOlwidVRleHR1cmVNYXRyaXhcIit0aGlzLmluZGV4LG1hdHJpeDpudWxsfSx0aGlzLl93aWxsVXBkYXRlPSExLHRoaXMuc2hvdWxkVXBkYXRlPSExLHRoaXMuX2ZvcmNlVXBkYXRlPSExLHRoaXMuc2NhbGU9e3g6MSx5OjF9LHRoaXMudXNlckRhdGE9e30sdGhpcy50eXBlPWUuaXNGQk9UZXh0dXJlP1wiZmJvVGV4dHVyZVwiOlwiZW1wdHlcIix0aGlzLl9jYW5EcmF3PSExLGUuZnJvbVRleHR1cmU/KHRoaXMuX2luaXRGcm9tVGV4dHVyZT0hMCx0aGlzLl9wYXJlbnQuX3VzZWRQcm9ncmFtJiZ0aGlzLl9zZXRUZXh0dXJlVW5pZm9ybXMoKSx2b2lkIHRoaXMuc2V0RnJvbVRleHR1cmUoZS5mcm9tVGV4dHVyZSkpOih0aGlzLl9pbml0RnJvbVRleHR1cmU9ITEsdGhpcy5faW5pdCgpLHRoaXMpO3RoaXMuX2N1cnRhaW5zLnByb2R1Y3Rpb25Nb2RlfHxjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gY3JlYXRlIHRoZSB0ZXh0dXJlIGJlY2F1c2UgdGhlIHByb2dyYW0gaXMgbm90IHZhbGlkXCIpfSxDdXJ0YWlucy5UZXh0dXJlLnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2N1cnRhaW5zLmdsO2lmKHRoaXMuX3NhbXBsZXIudGV4dHVyZT10LmNyZWF0ZVRleHR1cmUoKSx0aGlzLl9pbnRlcm5hbEZvcm1hdD10LlJHQkEsdGhpcy5fZm9ybWF0PXQuUkdCQSx0aGlzLl90ZXh0dXJlVHlwZT10LlVOU0lHTkVEX0JZVEUsdC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQsdGhpcy5fc2FtcGxlci50ZXh0dXJlKSx0LnBpeGVsU3RvcmVpKHQuVU5QQUNLX0ZMSVBfWV9XRUJHTCwhMSksdC5waXhlbFN0b3JlaSh0LlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwhMSksdC5waXhlbFN0b3JlaSh0LlVOUEFDS19BTElHTk1FTlQsNCksdGhpcy5fcGFyZW50Ll91c2VkUHJvZ3JhbSl7aWYodGhpcy5fc2l6ZT17d2lkdGg6dGhpcy5fcGFyZW50Ll9ib3VuZGluZ1JlY3QuZG9jdW1lbnQud2lkdGgsaGVpZ2h0OnRoaXMuX3BhcmVudC5fYm91bmRpbmdSZWN0LmRvY3VtZW50LmhlaWdodH0sdGhpcy5fc2V0VGV4dHVyZVVuaWZvcm1zKCksXCJlbXB0eVwiPT09dGhpcy50eXBlKXQudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCx0aGlzLl9pbnRlcm5hbEZvcm1hdCwxLDEsMCx0aGlzLl9mb3JtYXQsdGhpcy5fdGV4dHVyZVR5cGUsbmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDI1NV0pKSx0aGlzLl9zb3VyY2VMb2FkZWQ9ITE7ZWxzZSBpZighdGhpcy5zb3VyY2Upe3ZhciBlPXRoaXMuX2dldFNpemVzKCk7dGhpcy5fdXBkYXRlVGV4dHVyZU1hdHJpeChlKX19ZWxzZSB0aGlzLl9zaXplPXt3aWR0aDp0aGlzLl9wYXJlbnQuX3NpemUud2lkdGh8fHRoaXMuX2N1cnRhaW5zLl9ib3VuZGluZ1JlY3Qud2lkdGgsaGVpZ2h0OnRoaXMuX3BhcmVudC5fc2l6ZS5oZWlnaHR8fHRoaXMuX2N1cnRhaW5zLl9ib3VuZGluZ1JlY3QuaGVpZ2h0fTtcImZib1RleHR1cmVcIj09PXRoaXMudHlwZSYmKHQudGV4UGFyYW1ldGVyaSh0LlRFWFRVUkVfMkQsdC5URVhUVVJFX01JTl9GSUxURVIsdC5MSU5FQVIpLHQudGV4UGFyYW1ldGVyaSh0LlRFWFRVUkVfMkQsdC5URVhUVVJFX01BR19GSUxURVIsdC5MSU5FQVIpLHQudGV4UGFyYW1ldGVyaSh0LlRFWFRVUkVfMkQsdC5URVhUVVJFX1dSQVBfUyx0LkNMQU1QX1RPX0VER0UpLHQudGV4UGFyYW1ldGVyaSh0LlRFWFRVUkVfMkQsdC5URVhUVVJFX1dSQVBfVCx0LkNMQU1QX1RPX0VER0UpLHRoaXMuX2N1cnRhaW5zLl9pc1dlYkdMMiYmdGhpcy5fY3VydGFpbnMuX2V4dGVuc2lvbnMuRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdD8odGhpcy5faW50ZXJuYWxGb3JtYXQ9dC5SR0JBMTZGLHRoaXMuX3RleHR1cmVUeXBlPXQuSEFMRl9GTE9BVCk6dGhpcy5fY3VydGFpbnMuX2V4dGVuc2lvbnMuT0VTX3RleHR1cmVfaGFsZl9mbG9hdCYmKHRoaXMuX3RleHR1cmVUeXBlPXRoaXMuX2N1cnRhaW5zLl9leHRlbnNpb25zLk9FU190ZXh0dXJlX2hhbGZfZmxvYXQuSEFMRl9GTE9BVF9PRVMpLHQudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCx0aGlzLl9pbnRlcm5hbEZvcm1hdCx0aGlzLl9zaXplLndpZHRoLHRoaXMuX3NpemUuaGVpZ2h0LDAsdGhpcy5fZm9ybWF0LHRoaXMuX3RleHR1cmVUeXBlLG51bGwpKSx0aGlzLl9jYW5EcmF3PSEwfSxDdXJ0YWlucy5UZXh0dXJlLnByb3RvdHlwZS5fc2V0VGV4dHVyZVVuaWZvcm1zPWZ1bmN0aW9uKCl7dGhpcy5fc2FtcGxlci5sb2NhdGlvbj10aGlzLl9jdXJ0YWlucy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fcGFyZW50Ll91c2VkUHJvZ3JhbS5wcm9ncmFtLHRoaXMuX3NhbXBsZXIubmFtZSksdGhpcy5fdGV4dHVyZU1hdHJpeC5sb2NhdGlvbj10aGlzLl9jdXJ0YWlucy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fcGFyZW50Ll91c2VkUHJvZ3JhbS5wcm9ncmFtLHRoaXMuX3RleHR1cmVNYXRyaXgubmFtZSksdGhpcy5fY3VydGFpbnMuX3VzZVByb2dyYW0odGhpcy5fcGFyZW50Ll91c2VkUHJvZ3JhbSksdGhpcy5fY3VydGFpbnMuZ2wudW5pZm9ybTFpKHRoaXMuX3NhbXBsZXIubG9jYXRpb24sdGhpcy5pbmRleCl9LEN1cnRhaW5zLlRleHR1cmUucHJvdG90eXBlLnNldEZyb21UZXh0dXJlPWZ1bmN0aW9uKHQpe2lmKHQpe2lmKHRoaXMuX3NhbXBsZXIudGV4dHVyZT10Ll9zYW1wbGVyLnRleHR1cmUsdGhpcy5zb3VyY2U9dC5zb3VyY2UsdGhpcy5fc2l6ZT10Ll9zaXplLHRoaXMuX2ludGVybmFsRm9ybWF0PXQuX2ludGVybmFsRm9ybWF0LHRoaXMuX2Zvcm1hdD10Ll9mb3JtYXQsdGhpcy5fdGV4dHVyZVR5cGU9dC5fdGV4dHVyZVR5cGUsdGhpcy5fb3JpZ2luYWxUZXh0dXJlPXQsdGhpcy5fcGFyZW50Ll91c2VkUHJvZ3JhbSYmKCF0aGlzLl9jYW5EcmF3fHwhdGhpcy5fdGV4dHVyZU1hdHJpeC5tYXRyaXgpKXt2YXIgZT10aGlzLl9nZXRTaXplcygpO3RoaXMuX3VwZGF0ZVRleHR1cmVNYXRyaXgoZSksdGhpcy5fY2FuRHJhdz0hMH19ZWxzZSB0aGlzLl9jdXJ0YWlucy5wcm9kdWN0aW9uTW9kZXx8Y29uc29sZS53YXJuKFwiVW5hYmxlIHRvIHNldCB0aGUgdGV4dHVyZSBmcm9tIHRleHR1cmU6XCIsdCl9LEN1cnRhaW5zLlRleHR1cmUucHJvdG90eXBlLnNldFNvdXJjZT1mdW5jdGlvbih0KXtpZih0aGlzLl9wYXJlbnQuX3VzZWRQcm9ncmFtKXt0aGlzLnNvdXJjZT10LFwiSU1HXCI9PT10LnRhZ05hbWUudG9VcHBlckNhc2UoKT90aGlzLnR5cGU9XCJpbWFnZVwiOlwiVklERU9cIj09PXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpPyh0aGlzLnR5cGU9XCJ2aWRlb1wiLHRoaXMuc2hvdWxkVXBkYXRlPSEwKTpcIkNBTlZBU1wiPT09dC50YWdOYW1lLnRvVXBwZXJDYXNlKCk/KHRoaXMudHlwZT1cImNhbnZhc1wiLHRoaXMuX3dpbGxVcGRhdGU9ITAsdGhpcy5zaG91bGRVcGRhdGU9ITApOnRoaXMuX2N1cnRhaW5zLnByb2R1Y3Rpb25Nb2RlfHxjb25zb2xlLndhcm4oXCJ0aGlzIEhUTUwgdGFnIGNvdWxkIG5vdCBiZSBjb252ZXJ0ZWQgaW50byBhIHRleHR1cmU6XCIsdC50YWdOYW1lKSx0aGlzLl9zaXplPXt3aWR0aDp0aGlzLnNvdXJjZS5uYXR1cmFsV2lkdGh8fHRoaXMuc291cmNlLndpZHRofHx0aGlzLnNvdXJjZS52aWRlb1dpZHRoLGhlaWdodDp0aGlzLnNvdXJjZS5uYXR1cmFsSGVpZ2h0fHx0aGlzLnNvdXJjZS5oZWlnaHR8fHRoaXMuc291cmNlLnZpZGVvSGVpZ2h0fTt2YXIgZT10aGlzLl9jdXJ0YWlucy5nbDtlLmJpbmRUZXh0dXJlKGUuVEVYVFVSRV8yRCx0aGlzLl9zYW1wbGVyLnRleHR1cmUpLHRoaXMuX2N1cnRhaW5zLnByZW11bHRpcGxpZWRBbHBoYSYmZS5waXhlbFN0b3JlaShlLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCx0aGlzLl9jdXJ0YWlucy5wcmVtdWx0aXBsaWVkQWxwaGEpLGUucGl4ZWxTdG9yZWkoZS5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCEwKSxlLnRleFBhcmFtZXRlcmkoZS5URVhUVVJFXzJELGUuVEVYVFVSRV9XUkFQX1MsZS5DTEFNUF9UT19FREdFKSxlLnRleFBhcmFtZXRlcmkoZS5URVhUVVJFXzJELGUuVEVYVFVSRV9XUkFQX1QsZS5DTEFNUF9UT19FREdFKSxlLnRleFBhcmFtZXRlcmkoZS5URVhUVVJFXzJELGUuVEVYVFVSRV9NSU5fRklMVEVSLGUuTElORUFSKSxlLnRleFBhcmFtZXRlcmkoZS5URVhUVVJFXzJELGUuVEVYVFVSRV9NQUdfRklMVEVSLGUuTElORUFSKSx0aGlzLnJlc2l6ZSgpLFwidmlkZW9cIiE9PXRoaXMudHlwZSYmZS50ZXhJbWFnZTJEKGUuVEVYVFVSRV8yRCwwLHRoaXMuX2ludGVybmFsRm9ybWF0LHRoaXMuX2Zvcm1hdCx0aGlzLl90ZXh0dXJlVHlwZSx0KX1lbHNlIHRoaXMuX2N1cnRhaW5zLnByb2R1Y3Rpb25Nb2RlfHxjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gc2V0IHRoZSB0ZXh0dXJlIHNvdXJjZSBiZWNhdXNlIHRoZSBwcm9ncmFtIGlzIG5vdCB2YWxpZFwiKX0sQ3VydGFpbnMuVGV4dHVyZS5wcm90b3R5cGUubmVlZFVwZGF0ZT1mdW5jdGlvbigpe3RoaXMuX2ZvcmNlVXBkYXRlPSEwfSxDdXJ0YWlucy5UZXh0dXJlLnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fY3VydGFpbnMuZ2w7dGhpcy5zb3VyY2U/KFwiY2FudmFzXCIhPT10aGlzLnR5cGV8fHRoaXMuX3lGbGlwcGVkfHwodGhpcy5feUZsaXBwZWQ9ITAsdC5waXhlbFN0b3JlaSh0LlVOUEFDS19GTElQX1lfV0VCR0wsITApKSx0LnRleEltYWdlMkQodC5URVhUVVJFXzJELDAsdGhpcy5faW50ZXJuYWxGb3JtYXQsdGhpcy5fZm9ybWF0LHRoaXMuX3RleHR1cmVUeXBlLHRoaXMuc291cmNlKSk6dC50ZXhJbWFnZTJEKHQuVEVYVFVSRV8yRCwwLHRoaXMuX2ludGVybmFsRm9ybWF0LHRoaXMuX3NpemUud2lkdGgsdGhpcy5fc2l6ZS5oZWlnaHQsMCx0aGlzLl9mb3JtYXQsdGhpcy5fdGV4dHVyZVR5cGUsdGhpcy5zb3VyY2UpfSxDdXJ0YWlucy5UZXh0dXJlLnByb3RvdHlwZS5fZ2V0U2l6ZXM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9wYXJlbnQuc2NhbGU/dGhpcy5fcGFyZW50LnNjYWxlOnt4OjEseToxfSxlPXRoaXMuX3BhcmVudC5fYm91bmRpbmdSZWN0LmRvY3VtZW50LndpZHRoKnQueCxpPXRoaXMuX3BhcmVudC5fYm91bmRpbmdSZWN0LmRvY3VtZW50LmhlaWdodCp0Lnkscz10aGlzLl9zaXplLndpZHRoLHI9dGhpcy5fc2l6ZS5oZWlnaHQsYT1zL3Isbj1lL2ksbz0wLGg9MDtyZXR1cm4gbj5hP2g9TWF0aC5taW4oMCxpLWUqKDEvYSkpOm48YSYmKG89TWF0aC5taW4oMCxlLWkqYSkpLHtwYXJlbnRXaWR0aDplLHBhcmVudEhlaWdodDppLHNvdXJjZVdpZHRoOnMsc291cmNlSGVpZ2h0OnIseE9mZnNldDpvLHlPZmZzZXQ6aH19LEN1cnRhaW5zLlRleHR1cmUucHJvdG90eXBlLnNldFNjYWxlPWZ1bmN0aW9uKHQsZSl7dD1wYXJzZUZsb2F0KHQpfHwxLHQ9TWF0aC5tYXgodCwuMDAxKSxlPXBhcnNlRmxvYXQoZSl8fDEsZT1NYXRoLm1heChlLC4wMDEpLHRoaXMuc2NhbGU9e3g6dCx5OmV9LHRoaXMucmVzaXplKCl9LEN1cnRhaW5zLlRleHR1cmUucHJvdG90eXBlLnJlc2l6ZT1mdW5jdGlvbigpe2lmKFwiZmJvVGV4dHVyZVwiPT09dGhpcy50eXBlKXt2YXIgdD10aGlzLl9jdXJ0YWlucy5nbDt0aGlzLl9zaXplPXt3aWR0aDp0aGlzLl9wYXJlbnQuX2JvdW5kaW5nUmVjdC5kb2N1bWVudC53aWR0aCxoZWlnaHQ6dGhpcy5fcGFyZW50Ll9ib3VuZGluZ1JlY3QuZG9jdW1lbnQuaGVpZ2h0fSx0aGlzLl9vcmlnaW5hbFRleHR1cmV8fCh0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCx0aGlzLl9wYXJlbnQudGV4dHVyZXNbMF0uX3NhbXBsZXIudGV4dHVyZSksdC50ZXhJbWFnZTJEKHQuVEVYVFVSRV8yRCwwLHRoaXMuX2ludGVybmFsRm9ybWF0LHRoaXMuX3NpemUud2lkdGgsdGhpcy5fc2l6ZS5oZWlnaHQsMCx0aGlzLl9mb3JtYXQsdGhpcy5fdGV4dHVyZVR5cGUsdGhpcy5zb3VyY2UpKX1lbHNlIHRoaXMuc291cmNlJiYodGhpcy5fc2l6ZT17d2lkdGg6dGhpcy5zb3VyY2UubmF0dXJhbFdpZHRofHx0aGlzLnNvdXJjZS53aWR0aHx8dGhpcy5zb3VyY2UudmlkZW9XaWR0aCxoZWlnaHQ6dGhpcy5zb3VyY2UubmF0dXJhbEhlaWdodHx8dGhpcy5zb3VyY2UuaGVpZ2h0fHx0aGlzLnNvdXJjZS52aWRlb0hlaWdodH0pO2lmKHRoaXMuX3BhcmVudC5fdXNlZFByb2dyYW0pe3ZhciBlPXRoaXMuX2dldFNpemVzKCk7dGhpcy5fdXBkYXRlVGV4dHVyZU1hdHJpeChlKX19LEN1cnRhaW5zLlRleHR1cmUucHJvdG90eXBlLl91cGRhdGVUZXh0dXJlTWF0cml4PWZ1bmN0aW9uKHQpe3ZhciBlPXt4OnQucGFyZW50V2lkdGgvKHQucGFyZW50V2lkdGgtdC54T2Zmc2V0KSx5OnQucGFyZW50SGVpZ2h0Lyh0LnBhcmVudEhlaWdodC10LnlPZmZzZXQpfTtlLngvPXRoaXMuc2NhbGUueCxlLnkvPXRoaXMuc2NhbGUueTt2YXIgaT1uZXcgRmxvYXQzMkFycmF5KFsxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCwoMS1lLngpLzIsKDEtZS55KS8yLDAsMV0pO3RoaXMuX3RleHR1cmVNYXRyaXgubWF0cml4PXRoaXMuX2N1cnRhaW5zLl9zY2FsZU1hdHJpeChpLGUueCxlLnksMSksdGhpcy5fY3VydGFpbnMuX3VzZVByb2dyYW0odGhpcy5fcGFyZW50Ll91c2VkUHJvZ3JhbSksdGhpcy5fY3VydGFpbnMuZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl90ZXh0dXJlTWF0cml4LmxvY2F0aW9uLCExLHRoaXMuX3RleHR1cmVNYXRyaXgubWF0cml4KX0sQ3VydGFpbnMuVGV4dHVyZS5wcm90b3R5cGUuX29uU291cmNlTG9hZGVkPWZ1bmN0aW9uKHQpe3RoaXMuX3BhcmVudC5fbG9hZGluZ01hbmFnZXIuc291cmNlc0xvYWRlZCsrLHRoaXMuc2V0U291cmNlKHQpO3ZhciBlPXRoaXM7aWYodGhpcy5fc291cmNlTG9hZGVkfHxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5fcGFyZW50Ll9vblBsYW5lTG9hZGluZ0NhbGxiYWNrJiZlLl9wYXJlbnQuX29uUGxhbmVMb2FkaW5nQ2FsbGJhY2soZSl9LDApLHRoaXMuX3BhcmVudC5faXNQbGFuZVJlYWR5KCksdGhpcy5fc291cmNlTG9hZGVkPSEwLFwiaW1hZ2VcIj09PXRoaXMudHlwZSl7Zm9yKHZhciBpPSEwLHM9MDtzPHRoaXMuX2N1cnRhaW5zLl9pbWFnZUNhY2hlLmxlbmd0aDtzKyspdGhpcy5fY3VydGFpbnMuX2ltYWdlQ2FjaGVbc10uc291cmNlJiZ0aGlzLl9jdXJ0YWlucy5faW1hZ2VDYWNoZVtzXS5zb3VyY2Uuc3JjPT09dC5zcmMmJihpPSExKTtpJiZ0aGlzLl9jdXJ0YWlucy5faW1hZ2VDYWNoZS5wdXNoKHRoaXMpfX0sQ3VydGFpbnMuVGV4dHVyZS5wcm90b3R5cGUuX29uVmlkZW9Mb2FkZWREYXRhPWZ1bmN0aW9uKHQpe3RoaXMuX3NvdXJjZUxvYWRlZHx8dGhpcy5fb25Tb3VyY2VMb2FkZWQodCl9LEN1cnRhaW5zLlRleHR1cmUucHJvdG90eXBlLl9kcmF3VGV4dHVyZT1mdW5jdGlvbigpe3RoaXMuX3BhcmVudC5fYmluZFBsYW5lVGV4dHVyZSh0aGlzKSxcInZpZGVvXCI9PT10aGlzLnR5cGUmJnRoaXMuc291cmNlJiZ0aGlzLnNvdXJjZS5yZWFkeVN0YXRlPj10aGlzLnNvdXJjZS5IQVZFX0NVUlJFTlRfREFUQSYmKHRoaXMuX3dpbGxVcGRhdGU9ITApLCh0aGlzLl9mb3JjZVVwZGF0ZXx8dGhpcy5fd2lsbFVwZGF0ZSYmdGhpcy5zaG91bGRVcGRhdGUpJiZ0aGlzLl91cGRhdGUoKSxcInZpZGVvXCI9PT10aGlzLnR5cGUmJih0aGlzLl93aWxsVXBkYXRlPSExKSx0aGlzLl9mb3JjZVVwZGF0ZT0hMX0sQ3VydGFpbnMuVGV4dHVyZS5wcm90b3R5cGUuX3Jlc3RvcmVGcm9tVGV4dHVyZT1mdW5jdGlvbigpe3RoaXMuX2luaXRGcm9tVGV4dHVyZT90aGlzLl9zZXRUZXh0dXJlVW5pZm9ybXMoKTp0aGlzLl9pbml0KCksdGhpcy5zZXRGcm9tVGV4dHVyZSh0aGlzLl9vcmlnaW5hbFRleHR1cmUpfSxDdXJ0YWlucy5UZXh0dXJlLnByb3RvdHlwZS5fcmVzdG9yZUNvbnRleHQ9ZnVuY3Rpb24oKXtpZih0aGlzLl9jYW5EcmF3PSExLHRoaXMuX29yaWdpbmFsVGV4dHVyZSl7dmFyIHQ9dGhpcztpZih0aGlzLl9vcmlnaW5hbFRleHR1cmUuX2NhbkRyYXcpc2V0VGltZW91dChmdW5jdGlvbigpe3QuX3Jlc3RvcmVGcm9tVGV4dHVyZSgpfSwwKTtlbHNlIHZhciBlPXNldEludGVydmFsKGZ1bmN0aW9uKCl7dC5fb3JpZ2luYWxUZXh0dXJlLl9jYW5EcmF3JiYodC5fcmVzdG9yZUZyb21UZXh0dXJlKCksY2xlYXJJbnRlcnZhbChlKSl9LDE2KX1lbHNlIHRoaXMuX2luaXQoKSx0aGlzLnNvdXJjZSYmKFwiaW1hZ2VcIj09PXRoaXMudHlwZSYmdGhpcy5fY3VydGFpbnMuX2ltYWdlQ2FjaGUucHVzaCh0aGlzKSx0aGlzLnNldFNvdXJjZSh0aGlzLnNvdXJjZSkpfSxDdXJ0YWlucy5UZXh0dXJlLnByb3RvdHlwZS5fZGlzcG9zZT1mdW5jdGlvbigpe1widmlkZW9cIj09PXRoaXMudHlwZT8odGhpcy5zb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNhbnBsYXl0aHJvdWdoXCIsdGhpcy5fb25Tb3VyY2VMb2FkZWRIYW5kbGVyLCExKSx0aGlzLnNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIix0aGlzLl9wYXJlbnQuX3NvdXJjZUxvYWRFcnJvciwhMSksdGhpcy5zb3VyY2UucGF1c2UoKSx0aGlzLnNvdXJjZS5yZW1vdmVBdHRyaWJ1dGUoXCJzcmNcIiksdGhpcy5zb3VyY2UubG9hZCgpLHRoaXMuc291cmNlPW51bGwpOlwiY2FudmFzXCI9PT10aGlzLnR5cGU/KHRoaXMuc291cmNlLndpZHRoPXRoaXMuc291cmNlLndpZHRoLHRoaXMuc291cmNlPW51bGwpOlwiaW1hZ2VcIj09PXRoaXMudHlwZSYmdGhpcy5fY3VydGFpbnMuX2lzRGVzdHJveWluZyYmKHRoaXMuc291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcy5fb25Tb3VyY2VMb2FkZWRIYW5kbGVyLCExKSx0aGlzLnNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIix0aGlzLl9wYXJlbnQuX3NvdXJjZUxvYWRFcnJvciwhMSksdGhpcy5zb3VyY2U9bnVsbCk7dmFyIHQ9dGhpcy5fY3VydGFpbnMuZ2w7dCYmIXRoaXMuX29yaWdpbmFsVGV4dHVyZSYmKFwiaW1hZ2VcIiE9PXRoaXMudHlwZXx8dGhpcy5fY3VydGFpbnMuX2lzRGVzdHJveWluZykmJih0LmFjdGl2ZVRleHR1cmUodC5URVhUVVJFMCt0aGlzLmluZGV4KSx0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxudWxsKSx0LmRlbGV0ZVRleHR1cmUodGhpcy5fc2FtcGxlci50ZXh0dXJlKSksdGhpcy5fcGFyZW50Ll9sb2FkaW5nTWFuYWdlciYmdGhpcy5fcGFyZW50Ll9sb2FkaW5nTWFuYWdlci5zb3VyY2VzTG9hZGVkLS19O1xyXG4vKiFcclxuICAqIEJvb3RzdHJhcCB1dGlsLmpzIHY0LjQuMSAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcclxuICAqIENvcHlyaWdodCAyMDExLTIwMTkgVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcclxuICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAgKi9cclxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpIDpcclxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSkgOlxyXG4gIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLlV0aWwgPSBmYWN0b3J5KGdsb2JhbC5qUXVlcnkpKTtcclxufSh0aGlzLCAoZnVuY3Rpb24gKCQpIHsgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAkID0gJCAmJiAkLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyAkWydkZWZhdWx0J10gOiAkO1xyXG5cclxuICAvKipcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAqIEJvb3RzdHJhcCAodjQuNC4xKTogdXRpbC5qc1xyXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKi9cclxuICAvKipcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVyc1xyXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAqL1xyXG5cclxuICB2YXIgVFJBTlNJVElPTl9FTkQgPSAndHJhbnNpdGlvbmVuZCc7XHJcbiAgdmFyIE1BWF9VSUQgPSAxMDAwMDAwO1xyXG4gIHZhciBNSUxMSVNFQ09ORFNfTVVMVElQTElFUiA9IDEwMDA7IC8vIFNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcclxuXHJcbiAgZnVuY3Rpb24gdG9UeXBlKG9iaikge1xyXG4gICAgcmV0dXJuIHt9LnRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvXFxzKFthLXpdKykvaSlbMV0udG9Mb3dlckNhc2UoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBiaW5kVHlwZTogVFJBTlNJVElPTl9FTkQsXHJcbiAgICAgIGRlbGVnYXRlVHlwZTogVFJBTlNJVElPTl9FTkQsXHJcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcyh0aGlzKSkge1xyXG4gICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZEVtdWxhdG9yKGR1cmF0aW9uKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcclxuICAgICQodGhpcykub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICghY2FsbGVkKSB7XHJcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZChfdGhpcyk7XHJcbiAgICAgIH1cclxuICAgIH0sIGR1cmF0aW9uKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKSB7XHJcbiAgICAkLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZEVtdWxhdG9yO1xyXG4gICAgJC5ldmVudC5zcGVjaWFsW1V0aWwuVFJBTlNJVElPTl9FTkRdID0gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAqIFB1YmxpYyBVdGlsIEFwaVxyXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICovXHJcblxyXG5cclxuICB2YXIgVXRpbCA9IHtcclxuICAgIFRSQU5TSVRJT05fRU5EOiAnYnNUcmFuc2l0aW9uRW5kJyxcclxuICAgIGdldFVJRDogZnVuY3Rpb24gZ2V0VUlEKHByZWZpeCkge1xyXG4gICAgICBkbyB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcclxuICAgICAgICBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpOyAvLyBcIn5+XCIgYWN0cyBsaWtlIGEgZmFzdGVyIE1hdGguZmxvb3IoKSBoZXJlXHJcbiAgICAgIH0gd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpO1xyXG5cclxuICAgICAgcmV0dXJuIHByZWZpeDtcclxuICAgIH0sXHJcbiAgICBnZXRTZWxlY3RvckZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcclxuICAgICAgdmFyIHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0Jyk7XHJcblxyXG4gICAgICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSAnIycpIHtcclxuICAgICAgICB2YXIgaHJlZkF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpO1xyXG4gICAgICAgIHNlbGVjdG9yID0gaHJlZkF0dHIgJiYgaHJlZkF0dHIgIT09ICcjJyA/IGhyZWZBdHRyLnRyaW0oKSA6ICcnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogbnVsbDtcclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudDogZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfSAvLyBHZXQgdHJhbnNpdGlvbi1kdXJhdGlvbiBvZiB0aGUgZWxlbWVudFxyXG5cclxuXHJcbiAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSAkKGVsZW1lbnQpLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicpO1xyXG4gICAgICB2YXIgdHJhbnNpdGlvbkRlbGF5ID0gJChlbGVtZW50KS5jc3MoJ3RyYW5zaXRpb24tZGVsYXknKTtcclxuICAgICAgdmFyIGZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uID0gcGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pO1xyXG4gICAgICB2YXIgZmxvYXRUcmFuc2l0aW9uRGVsYXkgPSBwYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSk7IC8vIFJldHVybiAwIGlmIGVsZW1lbnQgb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyBub3QgZm91bmRcclxuXHJcbiAgICAgIGlmICghZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gJiYgIWZsb2F0VHJhbnNpdGlvbkRlbGF5KSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH0gLy8gSWYgbXVsdGlwbGUgZHVyYXRpb25zIGFyZSBkZWZpbmVkLCB0YWtlIHRoZSBmaXJzdFxyXG5cclxuXHJcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbi5zcGxpdCgnLCcpWzBdO1xyXG4gICAgICB0cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkuc3BsaXQoJywnKVswXTtcclxuICAgICAgcmV0dXJuIChwYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbikgKyBwYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSkpICogTUlMTElTRUNPTkRTX01VTFRJUExJRVI7XHJcbiAgICB9LFxyXG4gICAgcmVmbG93OiBmdW5jdGlvbiByZWZsb3coZWxlbWVudCkge1xyXG4gICAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICB9LFxyXG4gICAgdHJpZ2dlclRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpIHtcclxuICAgICAgJChlbGVtZW50KS50cmlnZ2VyKFRSQU5TSVRJT05fRU5EKTtcclxuICAgIH0sXHJcbiAgICAvLyBUT0RPOiBSZW1vdmUgaW4gdjVcclxuICAgIHN1cHBvcnRzVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkge1xyXG4gICAgICByZXR1cm4gQm9vbGVhbihUUkFOU0lUSU9OX0VORCk7XHJcbiAgICB9LFxyXG4gICAgaXNFbGVtZW50OiBmdW5jdGlvbiBpc0VsZW1lbnQob2JqKSB7XHJcbiAgICAgIHJldHVybiAob2JqWzBdIHx8IG9iaikubm9kZVR5cGU7XHJcbiAgICB9LFxyXG4gICAgdHlwZUNoZWNrQ29uZmlnOiBmdW5jdGlvbiB0eXBlQ2hlY2tDb25maWcoY29tcG9uZW50TmFtZSwgY29uZmlnLCBjb25maWdUeXBlcykge1xyXG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBjb25maWdUeXBlcykge1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29uZmlnVHlwZXMsIHByb3BlcnR5KSkge1xyXG4gICAgICAgICAgdmFyIGV4cGVjdGVkVHlwZXMgPSBjb25maWdUeXBlc1twcm9wZXJ0eV07XHJcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjb25maWdbcHJvcGVydHldO1xyXG4gICAgICAgICAgdmFyIHZhbHVlVHlwZSA9IHZhbHVlICYmIFV0aWwuaXNFbGVtZW50KHZhbHVlKSA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSk7XHJcblxyXG4gICAgICAgICAgaWYgKCFuZXcgUmVnRXhwKGV4cGVjdGVkVHlwZXMpLnRlc3QodmFsdWVUeXBlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpICsgXCI6IFwiICsgKFwiT3B0aW9uIFxcXCJcIiArIHByb3BlcnR5ICsgXCJcXFwiIHByb3ZpZGVkIHR5cGUgXFxcIlwiICsgdmFsdWVUeXBlICsgXCJcXFwiIFwiKSArIChcImJ1dCBleHBlY3RlZCB0eXBlIFxcXCJcIiArIGV4cGVjdGVkVHlwZXMgKyBcIlxcXCIuXCIpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBmaW5kU2hhZG93Um9vdDogZnVuY3Rpb24gZmluZFNoYWRvd1Jvb3QoZWxlbWVudCkge1xyXG4gICAgICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRhY2hTaGFkb3cpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfSAvLyBDYW4gZmluZCB0aGUgc2hhZG93IHJvb3Qgb3RoZXJ3aXNlIGl0J2xsIHJldHVybiB0aGUgZG9jdW1lbnRcclxuXHJcblxyXG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnQuZ2V0Um9vdE5vZGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB2YXIgcm9vdCA9IGVsZW1lbnQuZ2V0Um9vdE5vZGUoKTtcclxuICAgICAgICByZXR1cm4gcm9vdCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgPyByb290IDogbnVsbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBTaGFkb3dSb290KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICAgIH0gLy8gd2hlbiB3ZSBkb24ndCBmaW5kIGEgc2hhZG93IHJvb3RcclxuXHJcblxyXG4gICAgICBpZiAoIWVsZW1lbnQucGFyZW50Tm9kZSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gVXRpbC5maW5kU2hhZG93Um9vdChlbGVtZW50LnBhcmVudE5vZGUpO1xyXG4gICAgfSxcclxuICAgIGpRdWVyeURldGVjdGlvbjogZnVuY3Rpb24galF1ZXJ5RGV0ZWN0aW9uKCkge1xyXG4gICAgICBpZiAodHlwZW9mICQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeS4galF1ZXJ5IG11c3QgYmUgaW5jbHVkZWQgYmVmb3JlIEJvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdC4nKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHZlcnNpb24gPSAkLmZuLmpxdWVyeS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJyk7XHJcbiAgICAgIHZhciBtaW5NYWpvciA9IDE7XHJcbiAgICAgIHZhciBsdE1ham9yID0gMjtcclxuICAgICAgdmFyIG1pbk1pbm9yID0gOTtcclxuICAgICAgdmFyIG1pblBhdGNoID0gMTtcclxuICAgICAgdmFyIG1heE1ham9yID0gNDtcclxuXHJcbiAgICAgIGlmICh2ZXJzaW9uWzBdIDwgbHRNYWpvciAmJiB2ZXJzaW9uWzFdIDwgbWluTWlub3IgfHwgdmVyc2lvblswXSA9PT0gbWluTWFqb3IgJiYgdmVyc2lvblsxXSA9PT0gbWluTWlub3IgJiYgdmVyc2lvblsyXSA8IG1pblBhdGNoIHx8IHZlcnNpb25bMF0gPj0gbWF4TWFqb3IpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgdjEuOS4xIGJ1dCBsZXNzIHRoYW4gdjQuMC4wJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIFV0aWwualF1ZXJ5RGV0ZWN0aW9uKCk7XHJcbiAgc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKTtcclxuXHJcbiAgcmV0dXJuIFV0aWw7XHJcblxyXG59KSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcFxyXG4vKiFcclxuICAqIEJvb3RzdHJhcCBjb2xsYXBzZS5qcyB2NC40LjEgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS8pXHJcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDE5IFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXHJcbiAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxyXG4gICovXHJcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCcuL3V0aWwuanMnKSkgOlxyXG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2pxdWVyeScsICcuL3V0aWwuanMnXSwgZmFjdG9yeSkgOlxyXG4gIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLkNvbGxhcHNlID0gZmFjdG9yeShnbG9iYWwualF1ZXJ5LCBnbG9iYWwuVXRpbCkpO1xyXG59KHRoaXMsIChmdW5jdGlvbiAoJCwgVXRpbCkgeyAndXNlIHN0cmljdCc7XHJcblxyXG4gICQgPSAkICYmICQuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/ICRbJ2RlZmF1bHQnXSA6ICQ7XHJcbiAgVXRpbCA9IFV0aWwgJiYgVXRpbC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gVXRpbFsnZGVmYXVsdCddIDogVXRpbDtcclxuXHJcbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xyXG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XHJcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcclxuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xyXG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XHJcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XHJcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XHJcbiAgICBpZiAoa2V5IGluIG9iaikge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcclxuICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgd3JpdGFibGU6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvYmpba2V5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcclxuXHJcbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xyXG4gICAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcclxuICAgICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xyXG4gICAgICB9KTtcclxuICAgICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBrZXlzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XHJcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcclxuXHJcbiAgICAgIGlmIChpICUgMikge1xyXG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICogQ29uc3RhbnRzXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICovXHJcblxyXG4gIHZhciBOQU1FID0gJ2NvbGxhcHNlJztcclxuICB2YXIgVkVSU0lPTiA9ICc0LjQuMSc7XHJcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmNvbGxhcHNlJztcclxuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcclxuICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XHJcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XHJcbiAgdmFyIERlZmF1bHQgPSB7XHJcbiAgICB0b2dnbGU6IHRydWUsXHJcbiAgICBwYXJlbnQ6ICcnXHJcbiAgfTtcclxuICB2YXIgRGVmYXVsdFR5cGUgPSB7XHJcbiAgICB0b2dnbGU6ICdib29sZWFuJyxcclxuICAgIHBhcmVudDogJyhzdHJpbmd8ZWxlbWVudCknXHJcbiAgfTtcclxuICB2YXIgRXZlbnQgPSB7XHJcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcclxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXHJcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSxcclxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSxcclxuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcclxuICB9O1xyXG4gIHZhciBDbGFzc05hbWUgPSB7XHJcbiAgICBTSE9XOiAnc2hvdycsXHJcbiAgICBDT0xMQVBTRTogJ2NvbGxhcHNlJyxcclxuICAgIENPTExBUFNJTkc6ICdjb2xsYXBzaW5nJyxcclxuICAgIENPTExBUFNFRDogJ2NvbGxhcHNlZCdcclxuICB9O1xyXG4gIHZhciBEaW1lbnNpb24gPSB7XHJcbiAgICBXSURUSDogJ3dpZHRoJyxcclxuICAgIEhFSUdIVDogJ2hlaWdodCdcclxuICB9O1xyXG4gIHZhciBTZWxlY3RvciA9IHtcclxuICAgIEFDVElWRVM6ICcuc2hvdywgLmNvbGxhcHNpbmcnLFxyXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXSdcclxuICB9O1xyXG4gIC8qKlxyXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAqIENsYXNzIERlZmluaXRpb25cclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKi9cclxuXHJcbiAgdmFyIENvbGxhcHNlID1cclxuICAvKiNfX1BVUkVfXyovXHJcbiAgZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29sbGFwc2UoZWxlbWVudCwgY29uZmlnKSB7XHJcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xyXG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtocmVmPVxcXCIjXCIgKyBlbGVtZW50LmlkICsgXCJcXFwiXSxcIiArIChcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtkYXRhLXRhcmdldD1cXFwiI1wiICsgZWxlbWVudC5pZCArIFwiXFxcIl1cIikpKTtcclxuICAgICAgdmFyIHRvZ2dsZUxpc3QgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9UT0dHTEUpKTtcclxuXHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2dnbGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGVsZW0gPSB0b2dnbGVMaXN0W2ldO1xyXG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtKTtcclxuICAgICAgICB2YXIgZmlsdGVyRWxlbWVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLmZpbHRlcihmdW5jdGlvbiAoZm91bmRFbGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gZm91bmRFbGVtID09PSBlbGVtZW50O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwgJiYgZmlsdGVyRWxlbWVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cclxuICAgICAgICAgIHRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKGVsZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudCA/IHRoaXMuX2dldFBhcmVudCgpIDogbnVsbDtcclxuXHJcbiAgICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCkge1xyXG4gICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl90cmlnZ2VyQXJyYXkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xyXG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XHJcbiAgICAgIH1cclxuICAgIH0gLy8gR2V0dGVyc1xyXG5cclxuXHJcbiAgICB2YXIgX3Byb3RvID0gQ29sbGFwc2UucHJvdG90eXBlO1xyXG5cclxuICAgIC8vIFB1YmxpY1xyXG4gICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcclxuICAgICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XHJcbiAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zaG93KCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xyXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGFjdGl2ZXM7XHJcbiAgICAgIHZhciBhY3RpdmVzRGF0YTtcclxuXHJcbiAgICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcclxuICAgICAgICBhY3RpdmVzID0gW10uc2xpY2UuY2FsbCh0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5BQ1RJVkVTKSkuZmlsdGVyKGZ1bmN0aW9uIChlbGVtKSB7XHJcbiAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLl9jb25maWcucGFyZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50JykgPT09IF90aGlzLl9jb25maWcucGFyZW50O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBlbGVtLmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQ09MTEFQU0UpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoYWN0aXZlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIGFjdGl2ZXMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGFjdGl2ZXMpIHtcclxuICAgICAgICBhY3RpdmVzRGF0YSA9ICQoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKS5kYXRhKERBVEFfS0VZKTtcclxuXHJcbiAgICAgICAgaWYgKGFjdGl2ZXNEYXRhICYmIGFjdGl2ZXNEYXRhLl9pc1RyYW5zaXRpb25pbmcpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XKTtcclxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xyXG5cclxuICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChhY3RpdmVzKSB7XHJcbiAgICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKSwgJ2hpZGUnKTtcclxuXHJcbiAgICAgICAgaWYgKCFhY3RpdmVzRGF0YSkge1xyXG4gICAgICAgICAgJChhY3RpdmVzKS5kYXRhKERBVEFfS0VZLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcclxuXHJcbiAgICAgICQodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORyk7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IDA7XHJcblxyXG4gICAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xyXG4gICAgICAgICQodGhpcy5fdHJpZ2dlckFycmF5KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKTtcclxuXHJcbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xyXG4gICAgICAgICQoX3RoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTtcclxuICAgICAgICBfdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XHJcblxyXG4gICAgICAgIF90aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xyXG5cclxuICAgICAgICAkKF90aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LlNIT1dOKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBjYXBpdGFsaXplZERpbWVuc2lvbiA9IGRpbWVuc2lvblswXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKDEpO1xyXG4gICAgICB2YXIgc2Nyb2xsU2l6ZSA9IFwic2Nyb2xsXCIgKyBjYXBpdGFsaXplZERpbWVuc2lvbjtcclxuICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XHJcbiAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xyXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSB0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdICsgXCJweFwiO1xyXG4gICAgfTtcclxuXHJcbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XHJcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xyXG5cclxuICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAhJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFKTtcclxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xyXG5cclxuICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcclxuXHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbZGltZW5zaW9uXSArIFwicHhcIjtcclxuICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XHJcbiAgICAgICQodGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xyXG4gICAgICB2YXIgdHJpZ2dlckFycmF5TGVuZ3RoID0gdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtcclxuXHJcbiAgICAgIGlmICh0cmlnZ2VyQXJyYXlMZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmlnZ2VyQXJyYXlMZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgdmFyIHRyaWdnZXIgPSB0aGlzLl90cmlnZ2VyQXJyYXlbaV07XHJcbiAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodHJpZ2dlcik7XHJcblxyXG4gICAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciAkZWxlbSA9ICQoW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCEkZWxlbS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcclxuICAgICAgICAgICAgICAkKHRyaWdnZXIpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKTtcclxuXHJcbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xyXG4gICAgICAgIF90aGlzMi5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgJChfdGhpczIuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLnRyaWdnZXIoRXZlbnQuSElEREVOKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xyXG4gICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcclxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XHJcbiAgICB9O1xyXG5cclxuICAgIF9wcm90by5zZXRUcmFuc2l0aW9uaW5nID0gZnVuY3Rpb24gc2V0VHJhbnNpdGlvbmluZyhpc1RyYW5zaXRpb25pbmcpIHtcclxuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gaXNUcmFuc2l0aW9uaW5nO1xyXG4gICAgfTtcclxuXHJcbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XHJcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XHJcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XHJcbiAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xyXG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBudWxsO1xyXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBudWxsO1xyXG4gICAgfSAvLyBQcml2YXRlXHJcbiAgICA7XHJcblxyXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xyXG4gICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkMih7fSwgRGVmYXVsdCwge30sIGNvbmZpZyk7XHJcbiAgICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpOyAvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlc1xyXG5cclxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XHJcbiAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICB9O1xyXG5cclxuICAgIF9wcm90by5fZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24gX2dldERpbWVuc2lvbigpIHtcclxuICAgICAgdmFyIGhhc1dpZHRoID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhEaW1lbnNpb24uV0lEVEgpO1xyXG4gICAgICByZXR1cm4gaGFzV2lkdGggPyBEaW1lbnNpb24uV0lEVEggOiBEaW1lbnNpb24uSEVJR0hUO1xyXG4gICAgfTtcclxuXHJcbiAgICBfcHJvdG8uX2dldFBhcmVudCA9IGZ1bmN0aW9uIF9nZXRQYXJlbnQoKSB7XHJcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xyXG5cclxuICAgICAgdmFyIHBhcmVudDtcclxuXHJcbiAgICAgIGlmIChVdGlsLmlzRWxlbWVudCh0aGlzLl9jb25maWcucGFyZW50KSkge1xyXG4gICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnQ7IC8vIEl0J3MgYSBqUXVlcnkgb2JqZWN0XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnBhcmVudC5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50WzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NvbmZpZy5wYXJlbnQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgc2VsZWN0b3IgPSBcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtkYXRhLXBhcmVudD1cXFwiXCIgKyB0aGlzLl9jb25maWcucGFyZW50ICsgXCJcXFwiXVwiO1xyXG4gICAgICB2YXIgY2hpbGRyZW4gPSBbXS5zbGljZS5jYWxsKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XHJcbiAgICAgICQoY2hpbGRyZW4pLmVhY2goZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcclxuICAgICAgICBfdGhpczMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCksIFtlbGVtZW50XSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gcGFyZW50O1xyXG4gICAgfTtcclxuXHJcbiAgICBfcHJvdG8uX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uIF9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoZWxlbWVudCwgdHJpZ2dlckFycmF5KSB7XHJcbiAgICAgIHZhciBpc09wZW4gPSAkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcclxuXHJcbiAgICAgIGlmICh0cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XHJcbiAgICAgICAgJCh0cmlnZ2VyQXJyYXkpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQsICFpc09wZW4pLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pO1xyXG4gICAgICB9XHJcbiAgICB9IC8vIFN0YXRpY1xyXG4gICAgO1xyXG5cclxuICAgIENvbGxhcHNlLl9nZXRUYXJnZXRGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcclxuICAgICAgcmV0dXJuIHNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcclxuICAgICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoREFUQV9LRVkpO1xyXG5cclxuICAgICAgICB2YXIgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQyKHt9LCBEZWZhdWx0LCB7fSwgJHRoaXMuZGF0YSgpLCB7fSwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pO1xyXG5cclxuICAgICAgICBpZiAoIWRhdGEgJiYgX2NvbmZpZy50b2dnbGUgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XHJcbiAgICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICBkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIF9jb25maWcpO1xyXG4gICAgICAgICAgJHRoaXMuZGF0YShEQVRBX0tFWSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBfY3JlYXRlQ2xhc3MoQ29sbGFwc2UsIG51bGwsIFt7XHJcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xyXG4gICAgICB9XHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xyXG4gICAgICB9XHJcbiAgICB9XSk7XHJcblxyXG4gICAgcmV0dXJuIENvbGxhcHNlO1xyXG4gIH0oKTtcclxuICAvKipcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxyXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAqL1xyXG5cclxuXHJcbiAgJChkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIC8vIHByZXZlbnREZWZhdWx0IG9ubHkgZm9yIDxhPiBlbGVtZW50cyAod2hpY2ggY2hhbmdlIHRoZSBVUkwpIG5vdCBpbnNpZGUgdGhlIGNvbGxhcHNpYmxlIGVsZW1lbnRcclxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LnRhZ05hbWUgPT09ICdBJykge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciAkdHJpZ2dlciA9ICQodGhpcyk7XHJcbiAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XHJcbiAgICB2YXIgc2VsZWN0b3JzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XHJcbiAgICAkKHNlbGVjdG9ycykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKTtcclxuICAgICAgdmFyIGRhdGEgPSAkdGFyZ2V0LmRhdGEoREFUQV9LRVkpO1xyXG4gICAgICB2YXIgY29uZmlnID0gZGF0YSA/ICd0b2dnbGUnIDogJHRyaWdnZXIuZGF0YSgpO1xyXG5cclxuICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCR0YXJnZXQsIGNvbmZpZyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICAvKipcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKiBqUXVlcnlcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKi9cclxuXHJcbiAgJC5mbltOQU1FXSA9IENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XHJcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlO1xyXG5cclxuICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xyXG4gICAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIENvbGxhcHNlO1xyXG5cclxufSkpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sbGFwc2UuanMubWFwXHJcbi8qIVxyXG4gICogQm9vdHN0cmFwIGRyb3Bkb3duLmpzIHY0LjQuMSAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcclxuICAqIENvcHlyaWdodCAyMDExLTIwMTkgVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcclxuICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAgKi9cclxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JyksIHJlcXVpcmUoJ3BvcHBlci5qcycpLCByZXF1aXJlKCcuL3V0aWwuanMnKSkgOlxyXG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2pxdWVyeScsICdwb3BwZXIuanMnLCAnLi91dGlsLmpzJ10sIGZhY3RvcnkpIDpcclxuICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5Ecm9wZG93biA9IGZhY3RvcnkoZ2xvYmFsLmpRdWVyeSwgZ2xvYmFsLlBvcHBlciwgZ2xvYmFsLlV0aWwpKTtcclxufSh0aGlzLCAoZnVuY3Rpb24gKCQsIFBvcHBlciwgVXRpbCkgeyAndXNlIHN0cmljdCc7XHJcblxyXG4gICQgPSAkICYmICQuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/ICRbJ2RlZmF1bHQnXSA6ICQ7XHJcbiAgUG9wcGVyID0gUG9wcGVyICYmIFBvcHBlci5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gUG9wcGVyWydkZWZhdWx0J10gOiBQb3BwZXI7XHJcbiAgVXRpbCA9IFV0aWwgJiYgVXRpbC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gVXRpbFsnZGVmYXVsdCddIDogVXRpbDtcclxuXHJcbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xyXG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XHJcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcclxuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xyXG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XHJcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XHJcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XHJcbiAgICBpZiAoa2V5IGluIG9iaikge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcclxuICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgd3JpdGFibGU6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvYmpba2V5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcclxuXHJcbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xyXG4gICAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcclxuICAgICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xyXG4gICAgICB9KTtcclxuICAgICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBrZXlzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XHJcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcclxuXHJcbiAgICAgIGlmIChpICUgMikge1xyXG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICogQ29uc3RhbnRzXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICovXHJcblxyXG4gIHZhciBOQU1FID0gJ2Ryb3Bkb3duJztcclxuICB2YXIgVkVSU0lPTiA9ICc0LjQuMSc7XHJcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmRyb3Bkb3duJztcclxuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcclxuICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XHJcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XHJcbiAgdmFyIEVTQ0FQRV9LRVlDT0RFID0gMjc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcclxuXHJcbiAgdmFyIFNQQUNFX0tFWUNPREUgPSAzMjsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3Igc3BhY2Uga2V5XHJcblxyXG4gIHZhciBUQUJfS0VZQ09ERSA9IDk7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRhYiBrZXlcclxuXHJcbiAgdmFyIEFSUk9XX1VQX0tFWUNPREUgPSAzODsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgdXAgYXJyb3cga2V5XHJcblxyXG4gIHZhciBBUlJPV19ET1dOX0tFWUNPREUgPSA0MDsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgZG93biBhcnJvdyBrZXlcclxuXHJcbiAgdmFyIFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCA9IDM7IC8vIE1vdXNlRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRoZSByaWdodCBidXR0b24gKGFzc3VtaW5nIGEgcmlnaHQtaGFuZGVkIG1vdXNlKVxyXG5cclxuICB2YXIgUkVHRVhQX0tFWURPV04gPSBuZXcgUmVnRXhwKEFSUk9XX1VQX0tFWUNPREUgKyBcInxcIiArIEFSUk9XX0RPV05fS0VZQ09ERSArIFwifFwiICsgRVNDQVBFX0tFWUNPREUpO1xyXG4gIHZhciBFdmVudCA9IHtcclxuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZLFxyXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZLFxyXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVksXHJcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZLFxyXG4gICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSxcclxuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVksXHJcbiAgICBLRVlET1dOX0RBVEFfQVBJOiBcImtleWRvd25cIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcclxuICAgIEtFWVVQX0RBVEFfQVBJOiBcImtleXVwXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcclxuICB9O1xyXG4gIHZhciBDbGFzc05hbWUgPSB7XHJcbiAgICBESVNBQkxFRDogJ2Rpc2FibGVkJyxcclxuICAgIFNIT1c6ICdzaG93JyxcclxuICAgIERST1BVUDogJ2Ryb3B1cCcsXHJcbiAgICBEUk9QUklHSFQ6ICdkcm9wcmlnaHQnLFxyXG4gICAgRFJPUExFRlQ6ICdkcm9wbGVmdCcsXHJcbiAgICBNRU5VUklHSFQ6ICdkcm9wZG93bi1tZW51LXJpZ2h0JyxcclxuICAgIE1FTlVMRUZUOiAnZHJvcGRvd24tbWVudS1sZWZ0JyxcclxuICAgIFBPU0lUSU9OX1NUQVRJQzogJ3Bvc2l0aW9uLXN0YXRpYydcclxuICB9O1xyXG4gIHZhciBTZWxlY3RvciA9IHtcclxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nLFxyXG4gICAgRk9STV9DSElMRDogJy5kcm9wZG93biBmb3JtJyxcclxuICAgIE1FTlU6ICcuZHJvcGRvd24tbWVudScsXHJcbiAgICBOQVZCQVJfTkFWOiAnLm5hdmJhci1uYXYnLFxyXG4gICAgVklTSUJMRV9JVEVNUzogJy5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpJ1xyXG4gIH07XHJcbiAgdmFyIEF0dGFjaG1lbnRNYXAgPSB7XHJcbiAgICBUT1A6ICd0b3Atc3RhcnQnLFxyXG4gICAgVE9QRU5EOiAndG9wLWVuZCcsXHJcbiAgICBCT1RUT006ICdib3R0b20tc3RhcnQnLFxyXG4gICAgQk9UVE9NRU5EOiAnYm90dG9tLWVuZCcsXHJcbiAgICBSSUdIVDogJ3JpZ2h0LXN0YXJ0JyxcclxuICAgIFJJR0hURU5EOiAncmlnaHQtZW5kJyxcclxuICAgIExFRlQ6ICdsZWZ0LXN0YXJ0JyxcclxuICAgIExFRlRFTkQ6ICdsZWZ0LWVuZCdcclxuICB9O1xyXG4gIHZhciBEZWZhdWx0ID0ge1xyXG4gICAgb2Zmc2V0OiAwLFxyXG4gICAgZmxpcDogdHJ1ZSxcclxuICAgIGJvdW5kYXJ5OiAnc2Nyb2xsUGFyZW50JyxcclxuICAgIHJlZmVyZW5jZTogJ3RvZ2dsZScsXHJcbiAgICBkaXNwbGF5OiAnZHluYW1pYycsXHJcbiAgICBwb3BwZXJDb25maWc6IG51bGxcclxuICB9O1xyXG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcclxuICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKScsXHJcbiAgICBmbGlwOiAnYm9vbGVhbicsXHJcbiAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxyXG4gICAgcmVmZXJlbmNlOiAnKHN0cmluZ3xlbGVtZW50KScsXHJcbiAgICBkaXNwbGF5OiAnc3RyaW5nJyxcclxuICAgIHBvcHBlckNvbmZpZzogJyhudWxsfG9iamVjdCknXHJcbiAgfTtcclxuICAvKipcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKiBDbGFzcyBEZWZpbml0aW9uXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICovXHJcblxyXG4gIHZhciBEcm9wZG93biA9XHJcbiAgLyojX19QVVJFX18qL1xyXG4gIGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERyb3Bkb3duKGVsZW1lbnQsIGNvbmZpZykge1xyXG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcclxuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICAgIHRoaXMuX21lbnUgPSB0aGlzLl9nZXRNZW51RWxlbWVudCgpO1xyXG4gICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xyXG5cclxuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH0gLy8gR2V0dGVyc1xyXG5cclxuXHJcbiAgICB2YXIgX3Byb3RvID0gRHJvcGRvd24ucHJvdG90eXBlO1xyXG5cclxuICAgIC8vIFB1YmxpY1xyXG4gICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcclxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgaXNBY3RpdmUgPSAkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcclxuXHJcbiAgICAgIERyb3Bkb3duLl9jbGVhck1lbnVzKCk7XHJcblxyXG4gICAgICBpZiAoaXNBY3RpdmUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc2hvdyh0cnVlKTtcclxuICAgIH07XHJcblxyXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KHVzZVBvcHBlcikge1xyXG4gICAgICBpZiAodXNlUG9wcGVyID09PSB2b2lkIDApIHtcclxuICAgICAgICB1c2VQb3BwZXIgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpIHx8ICQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHtcclxuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XHJcbiAgICAgIH07XHJcbiAgICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1csIHJlbGF0ZWRUYXJnZXQpO1xyXG5cclxuICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcclxuXHJcbiAgICAgICQocGFyZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XHJcblxyXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9IC8vIERpc2FibGUgdG90YWxseSBQb3BwZXIuanMgZm9yIERyb3Bkb3duIGluIE5hdmJhclxyXG5cclxuXHJcbiAgICAgIGlmICghdGhpcy5faW5OYXZiYXIgJiYgdXNlUG9wcGVyKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XHJcbiAgICAgICAgICogUG9wcGVyIC0gaHR0cHM6Ly9wb3BwZXIuanMub3JnXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIGRyb3Bkb3ducyByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnLyknKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UgPT09ICdwYXJlbnQnKSB7XHJcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gcGFyZW50O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcclxuICAgICAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9jb25maWcucmVmZXJlbmNlOyAvLyBDaGVjayBpZiBpdCdzIGpRdWVyeSBlbGVtZW50XHJcblxyXG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2VbMF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSAvLyBJZiBib3VuZGFyeSBpcyBub3QgYHNjcm9sbFBhcmVudGAsIHRoZW4gc2V0IHBvc2l0aW9uIHRvIGBzdGF0aWNgXHJcbiAgICAgICAgLy8gdG8gYWxsb3cgdGhlIG1lbnUgdG8gXCJlc2NhcGVcIiB0aGUgc2Nyb2xsIHBhcmVudCdzIGJvdW5kYXJpZXNcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzI0MjUxXHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSAnc2Nyb2xsUGFyZW50Jykge1xyXG4gICAgICAgICAgJChwYXJlbnQpLmFkZENsYXNzKENsYXNzTmFtZS5QT1NJVElPTl9TVEFUSUMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcihyZWZlcmVuY2VFbGVtZW50LCB0aGlzLl9tZW51LCB0aGlzLl9nZXRQb3BwZXJDb25maWcoKSk7XHJcbiAgICAgIH0gLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxyXG4gICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xyXG4gICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xyXG4gICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcclxuXHJcblxyXG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICQocGFyZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVkJBUl9OQVYpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICQoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vbignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xyXG5cclxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcclxuXHJcbiAgICAgICQodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xyXG4gICAgICAkKHBhcmVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpLnRyaWdnZXIoJC5FdmVudChFdmVudC5TSE9XTiwgcmVsYXRlZFRhcmdldCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XHJcbiAgICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSB8fCAhJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xyXG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcclxuICAgICAgfTtcclxuICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSwgcmVsYXRlZFRhcmdldCk7XHJcblxyXG4gICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xyXG5cclxuICAgICAgJChwYXJlbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcclxuXHJcbiAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcclxuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAkKHRoaXMuX21lbnUpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcclxuICAgICAgJChwYXJlbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcclxuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcclxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfS0VZKTtcclxuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XHJcbiAgICAgIHRoaXMuX21lbnUgPSBudWxsO1xyXG5cclxuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcclxuICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcclxuICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfSAvLyBQcml2YXRlXHJcbiAgICA7XHJcblxyXG4gICAgX3Byb3RvLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0ssIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIF90aGlzLnRvZ2dsZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xyXG4gICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkMih7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LCB7fSwgJCh0aGlzLl9lbGVtZW50KS5kYXRhKCksIHt9LCBjb25maWcpO1xyXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xyXG4gICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgfTtcclxuXHJcbiAgICBfcHJvdG8uX2dldE1lbnVFbGVtZW50ID0gZnVuY3Rpb24gX2dldE1lbnVFbGVtZW50KCkge1xyXG4gICAgICBpZiAoIXRoaXMuX21lbnUpIHtcclxuICAgICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xyXG5cclxuICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICB0aGlzLl9tZW51ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuTUVOVSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5fbWVudTtcclxuICAgIH07XHJcblxyXG4gICAgX3Byb3RvLl9nZXRQbGFjZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGxhY2VtZW50KCkge1xyXG4gICAgICB2YXIgJHBhcmVudERyb3Bkb3duID0gJCh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUpO1xyXG4gICAgICB2YXIgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5CT1RUT007IC8vIEhhbmRsZSBkcm9wdXBcclxuXHJcbiAgICAgIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BVUCkpIHtcclxuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUDtcclxuXHJcbiAgICAgICAgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcclxuICAgICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QRU5EO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BSSUdIVCkpIHtcclxuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlJJR0hUO1xyXG4gICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUExFRlQpKSB7XHJcbiAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5MRUZUO1xyXG4gICAgICB9IGVsc2UgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcclxuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTUVORDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHBsYWNlbWVudDtcclxuICAgIH07XHJcblxyXG4gICAgX3Byb3RvLl9kZXRlY3ROYXZiYXIgPSBmdW5jdGlvbiBfZGV0ZWN0TmF2YmFyKCkge1xyXG4gICAgICByZXR1cm4gJCh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KCcubmF2YmFyJykubGVuZ3RoID4gMDtcclxuICAgIH07XHJcblxyXG4gICAgX3Byb3RvLl9nZXRPZmZzZXQgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0KCkge1xyXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcclxuXHJcbiAgICAgIHZhciBvZmZzZXQgPSB7fTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLm9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIG9mZnNldC5mbiA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICBkYXRhLm9mZnNldHMgPSBfb2JqZWN0U3ByZWFkMih7fSwgZGF0YS5vZmZzZXRzLCB7fSwgX3RoaXMyLl9jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cywgX3RoaXMyLl9lbGVtZW50KSB8fCB7fSk7XHJcbiAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9mZnNldC5vZmZzZXQgPSB0aGlzLl9jb25maWcub2Zmc2V0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gb2Zmc2V0O1xyXG4gICAgfTtcclxuXHJcbiAgICBfcHJvdG8uX2dldFBvcHBlckNvbmZpZyA9IGZ1bmN0aW9uIF9nZXRQb3BwZXJDb25maWcoKSB7XHJcbiAgICAgIHZhciBwb3BwZXJDb25maWcgPSB7XHJcbiAgICAgICAgcGxhY2VtZW50OiB0aGlzLl9nZXRQbGFjZW1lbnQoKSxcclxuICAgICAgICBtb2RpZmllcnM6IHtcclxuICAgICAgICAgIG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KCksXHJcbiAgICAgICAgICBmbGlwOiB7XHJcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuX2NvbmZpZy5mbGlwXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7XHJcbiAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLl9jb25maWcuYm91bmRhcnlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH07IC8vIERpc2FibGUgUG9wcGVyLmpzIGlmIHdlIGhhdmUgYSBzdGF0aWMgZGlzcGxheVxyXG5cclxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5kaXNwbGF5ID09PSAnc3RhdGljJykge1xyXG4gICAgICAgIHBvcHBlckNvbmZpZy5tb2RpZmllcnMuYXBwbHlTdHlsZSA9IHtcclxuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBwb3BwZXJDb25maWcsIHt9LCB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKTtcclxuICAgIH0gLy8gU3RhdGljXHJcbiAgICA7XHJcblxyXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKTtcclxuXHJcbiAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XHJcblxyXG4gICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzLCBfY29uZmlnKTtcclxuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBEcm9wZG93bi5fY2xlYXJNZW51cyA9IGZ1bmN0aW9uIF9jbGVhck1lbnVzKGV2ZW50KSB7XHJcbiAgICAgIGlmIChldmVudCAmJiAoZXZlbnQud2hpY2ggPT09IFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCB8fCBldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LndoaWNoICE9PSBUQUJfS0VZQ09ERSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB0b2dnbGVzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSk7XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdG9nZ2xlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodG9nZ2xlc1tpXSk7XHJcblxyXG4gICAgICAgIHZhciBjb250ZXh0ID0gJCh0b2dnbGVzW2ldKS5kYXRhKERBVEFfS0VZKTtcclxuICAgICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHtcclxuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRvZ2dsZXNbaV1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xyXG4gICAgICAgICAgcmVsYXRlZFRhcmdldC5jbGlja0V2ZW50ID0gZXZlbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGRyb3Bkb3duTWVudSA9IGNvbnRleHQuX21lbnU7XHJcblxyXG4gICAgICAgIGlmICghJChwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCA9PT0gVEFCX0tFWUNPREUpICYmICQuY29udGFpbnMocGFyZW50LCBldmVudC50YXJnZXQpKSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUsIHJlbGF0ZWRUYXJnZXQpO1xyXG4gICAgICAgICQocGFyZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XHJcblxyXG4gICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH0gLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcclxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxyXG5cclxuXHJcbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvZ2dsZXNbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0Ll9wb3BwZXIpIHtcclxuICAgICAgICAgIGNvbnRleHQuX3BvcHBlci5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkKGRyb3Bkb3duTWVudSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xyXG4gICAgICAgICQocGFyZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVykudHJpZ2dlcigkLkV2ZW50KEV2ZW50LkhJRERFTiwgcmVsYXRlZFRhcmdldCkpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRQYXJlbnRGcm9tRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICAgIHZhciBwYXJlbnQ7XHJcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcclxuXHJcbiAgICAgIGlmIChzZWxlY3Rvcikge1xyXG4gICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcGFyZW50IHx8IGVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcclxuICAgIDtcclxuXHJcbiAgICBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlLZXlkb3duSGFuZGxlcihldmVudCkge1xyXG4gICAgICAvLyBJZiBub3QgaW5wdXQvdGV4dGFyZWE6XHJcbiAgICAgIC8vICAtIEFuZCBub3QgYSBrZXkgaW4gUkVHRVhQX0tFWURPV04gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxyXG4gICAgICAvLyBJZiBpbnB1dC90ZXh0YXJlYTpcclxuICAgICAgLy8gIC0gSWYgc3BhY2Uga2V5ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcclxuICAgICAgLy8gIC0gSWYga2V5IGlzIG90aGVyIHRoYW4gZXNjYXBlXHJcbiAgICAgIC8vICAgIC0gSWYga2V5IGlzIG5vdCB1cCBvciBkb3duID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcclxuICAgICAgLy8gICAgLSBJZiB0cmlnZ2VyIGluc2lkZSB0aGUgbWVudSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXHJcbiAgICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSA/IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSAmJiAoZXZlbnQud2hpY2ggIT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBldmVudC53aGljaCAhPT0gQVJST1dfVVBfS0VZQ09ERSB8fCAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3Rvci5NRU5VKS5sZW5ndGgpIDogIVJFR0VYUF9LRVlET1dOLnRlc3QoZXZlbnQud2hpY2gpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICQodGhpcykuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzKTtcclxuXHJcbiAgICAgIHZhciBpc0FjdGl2ZSA9ICQocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XHJcblxyXG4gICAgICBpZiAoIWlzQWN0aXZlICYmIGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFpc0FjdGl2ZSB8fCBpc0FjdGl2ZSAmJiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFKSkge1xyXG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcclxuICAgICAgICAgIHZhciB0b2dnbGUgPSBwYXJlbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5EQVRBX1RPR0dMRSk7XHJcbiAgICAgICAgICAkKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQodGhpcykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBpdGVtcyA9IFtdLnNsaWNlLmNhbGwocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuVklTSUJMRV9JVEVNUykpLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHJldHVybiAkKGl0ZW0pLmlzKCc6dmlzaWJsZScpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoZXZlbnQudGFyZ2V0KTtcclxuXHJcbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfVVBfS0VZQ09ERSAmJiBpbmRleCA+IDApIHtcclxuICAgICAgICAvLyBVcFxyXG4gICAgICAgIGluZGV4LS07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGluZGV4IDwgaXRlbXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgIC8vIERvd25cclxuICAgICAgICBpbmRleCsrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XHJcbiAgICAgICAgaW5kZXggPSAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpdGVtc1tpbmRleF0uZm9jdXMoKTtcclxuICAgIH07XHJcblxyXG4gICAgX2NyZWF0ZUNsYXNzKERyb3Bkb3duLCBudWxsLCBbe1xyXG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxyXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICByZXR1cm4gVkVSU0lPTjtcclxuICAgICAgfVxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxyXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICByZXR1cm4gRGVmYXVsdDtcclxuICAgICAgfVxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xyXG4gICAgICB9XHJcbiAgICB9XSk7XHJcblxyXG4gICAgcmV0dXJuIERyb3Bkb3duO1xyXG4gIH0oKTtcclxuICAvKipcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxyXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAqL1xyXG5cclxuXHJcbiAgJChkb2N1bWVudCkub24oRXZlbnQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEV2ZW50LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yLk1FTlUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJICsgXCIgXCIgKyBFdmVudC5LRVlVUF9EQVRBX0FQSSwgRHJvcGRvd24uX2NsZWFyTWVudXMpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGhpcyksICd0b2dnbGUnKTtcclxuICB9KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRk9STV9DSElMRCwgZnVuY3Rpb24gKGUpIHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfSk7XHJcbiAgLyoqXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICogalF1ZXJ5XHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICovXHJcblxyXG4gICQuZm5bTkFNRV0gPSBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xyXG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBEcm9wZG93bjtcclxuXHJcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcclxuICAgIHJldHVybiBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBEcm9wZG93bjtcclxuXHJcbn0pKSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyb3Bkb3duLmpzLm1hcFxyXG5cclxuLy8vPSBib290c3RyYXAvYWxlcnQuanNcclxuLy8vPSBib290c3RyYXAvYnV0dG9uLmpzXHJcbi8vLz0gYm9vdHN0cmFwL2Nhcm91c2VsLmpzXHJcbi8vLz0gYm9vdHN0cmFwL21vZGFsLmpzXHJcbi8vLz0gYm9vdHN0cmFwL3BvcG92ZXIuanNcclxuLy8vPSBib290c3RyYXAvc2Nyb2xsc3B5LmpzXHJcbi8vLz0gYm9vdHN0cmFwL3RhYi5qc1xyXG4vLy89IGJvb3RzdHJhcC90b2FzdC5qc1xyXG4vLy89IGJvb3RzdHJhcC90b29sdGlwLmpzXHJcbi8qXHJcbiAgICAgXyBfICAgICAgXyAgICAgICBfXHJcbiBfX198IChfKSBfX198IHwgX18gIChfKV9fX1xyXG4vIF9ffCB8IHwvIF9ffCB8LyAvICB8IC8gX198XHJcblxcX18gXFwgfCB8IChfX3wgICA8IF8gfCBcXF9fIFxcXHJcbnxfX18vX3xffFxcX19ffF98XFxfKF8pLyB8X19fL1xyXG4gICAgICAgICAgICAgICAgICAgfF9fL1xyXG5cclxuIFZlcnNpb246IDEuOC4wXHJcbiAgQXV0aG9yOiBLZW4gV2hlZWxlclxyXG4gV2Vic2l0ZTogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvXHJcbiAgICBEb2NzOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW8vc2xpY2tcclxuICAgIFJlcG86IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2tcclxuICBJc3N1ZXM6IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2svaXNzdWVzXHJcblxyXG4gKi9cclxuLyogZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQsIGRlZmluZSwgalF1ZXJ5LCBzZXRJbnRlcnZhbCwgY2xlYXJJbnRlcnZhbCAqL1xyXG47KGZ1bmN0aW9uKGZhY3RvcnkpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5KTtcclxuICAgIH1cclxuXHJcbn0oZnVuY3Rpb24oJCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIFNsaWNrID0gd2luZG93LlNsaWNrIHx8IHt9O1xyXG5cclxuICAgIFNsaWNrID0gKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgaW5zdGFuY2VVaWQgPSAwO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBTbGljayhlbGVtZW50LCBzZXR0aW5ncykge1xyXG5cclxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLCBkYXRhU2V0dGluZ3M7XHJcblxyXG4gICAgICAgICAgICBfLmRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFwcGVuZEFycm93czogJChlbGVtZW50KSxcclxuICAgICAgICAgICAgICAgIGFwcGVuZERvdHM6ICQoZWxlbWVudCksXHJcbiAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBhc05hdkZvcjogbnVsbCxcclxuICAgICAgICAgICAgICAgIHByZXZBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1wcmV2XCIgYXJpYS1sYWJlbD1cIlByZXZpb3VzXCIgdHlwZT1cImJ1dHRvblwiPlByZXZpb3VzPC9idXR0b24+JyxcclxuICAgICAgICAgICAgICAgIG5leHRBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1uZXh0XCIgYXJpYS1sYWJlbD1cIk5leHRcIiB0eXBlPVwiYnV0dG9uXCI+TmV4dDwvYnV0dG9uPicsXHJcbiAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiAzMDAwLFxyXG4gICAgICAgICAgICAgICAgY2VudGVyTW9kZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAnNTBweCcsXHJcbiAgICAgICAgICAgICAgICBjc3NFYXNlOiAnZWFzZScsXHJcbiAgICAgICAgICAgICAgICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uKHNsaWRlciwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAvPicpLnRleHQoaSArIDEpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZG90c0NsYXNzOiAnc2xpY2stZG90cycsXHJcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxyXG4gICAgICAgICAgICAgICAgZWRnZUZyaWN0aW9uOiAwLjM1LFxyXG4gICAgICAgICAgICAgICAgZmFkZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGZvY3VzT25DaGFuZ2U6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IDAsXHJcbiAgICAgICAgICAgICAgICBsYXp5TG9hZDogJ29uZGVtYW5kJyxcclxuICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHBhdXNlT25Gb2N1czogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHBhdXNlT25Eb3RzSG92ZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcmVzcG9uZFRvOiAnd2luZG93JyxcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICByb3dzOiAxLFxyXG4gICAgICAgICAgICAgICAgcnRsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHNsaWRlOiAnJyxcclxuICAgICAgICAgICAgICAgIHNsaWRlc1BlclJvdzogMSxcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcclxuICAgICAgICAgICAgICAgIHN3aXBlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc3dpcGVUb1NsaWRlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHRvdWNoTW92ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHRvdWNoVGhyZXNob2xkOiA1LFxyXG4gICAgICAgICAgICAgICAgdXNlQ1NTOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdXNlVHJhbnNmb3JtOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdmFyaWFibGVXaWR0aDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbFN3aXBpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgd2FpdEZvckFuaW1hdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDEwMDBcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIF8uaW5pdGlhbHMgPSB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYXV0b1BsYXlUaW1lcjogbnVsbCxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnREaXJlY3Rpb246IDAsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVmdDogbnVsbCxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZTogMCxcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogMSxcclxuICAgICAgICAgICAgICAgICRkb3RzOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbGlzdFdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbGlzdEhlaWdodDogbnVsbCxcclxuICAgICAgICAgICAgICAgIGxvYWRJbmRleDogMCxcclxuICAgICAgICAgICAgICAgICRuZXh0QXJyb3c6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAkcHJldkFycm93OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHNsaWRlQ291bnQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzbGlkZVdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgJHNsaWRlVHJhY2s6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAkc2xpZGVzOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgc2xpZGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldDogMCxcclxuICAgICAgICAgICAgICAgIHN3aXBlTGVmdDogbnVsbCxcclxuICAgICAgICAgICAgICAgIHN3aXBpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgJGxpc3Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB0b3VjaE9iamVjdDoge30sXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zRW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB1bnNsaWNrZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzKTtcclxuXHJcbiAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XHJcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSBudWxsO1xyXG4gICAgICAgICAgICBfLmFuaW1Qcm9wID0gbnVsbDtcclxuICAgICAgICAgICAgXy5icmVha3BvaW50cyA9IFtdO1xyXG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5ncyA9IFtdO1xyXG4gICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gZmFsc2U7XHJcbiAgICAgICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBfLmhpZGRlbiA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICBfLnBhdXNlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIF8ucG9zaXRpb25Qcm9wID0gbnVsbDtcclxuICAgICAgICAgICAgXy5yZXNwb25kVG8gPSBudWxsO1xyXG4gICAgICAgICAgICBfLnJvd0NvdW50ID0gMTtcclxuICAgICAgICAgICAgXy5zaG91bGRDbGljayA9IHRydWU7XHJcbiAgICAgICAgICAgIF8uJHNsaWRlciA9ICQoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gbnVsbDtcclxuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gbnVsbDtcclxuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9IG51bGw7XHJcbiAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcclxuICAgICAgICAgICAgXy53aW5kb3dXaWR0aCA9IDA7XHJcbiAgICAgICAgICAgIF8ud2luZG93VGltZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgZGF0YVNldHRpbmdzID0gJChlbGVtZW50KS5kYXRhKCdzbGljaycpIHx8IHt9O1xyXG5cclxuICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8uZGVmYXVsdHMsIHNldHRpbmdzLCBkYXRhU2V0dGluZ3MpO1xyXG5cclxuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xyXG5cclxuICAgICAgICAgICAgXy5vcmlnaW5hbFNldHRpbmdzID0gXy5vcHRpb25zO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5tb3pIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICdtb3pIaWRkZW4nO1xyXG4gICAgICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ21venZpc2liaWxpdHljaGFuZ2UnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICd3ZWJraXRIaWRkZW4nO1xyXG4gICAgICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3dlYmtpdHZpc2liaWxpdHljaGFuZ2UnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfLmF1dG9QbGF5ID0gJC5wcm94eShfLmF1dG9QbGF5LCBfKTtcclxuICAgICAgICAgICAgXy5hdXRvUGxheUNsZWFyID0gJC5wcm94eShfLmF1dG9QbGF5Q2xlYXIsIF8pO1xyXG4gICAgICAgICAgICBfLmF1dG9QbGF5SXRlcmF0b3IgPSAkLnByb3h5KF8uYXV0b1BsYXlJdGVyYXRvciwgXyk7XHJcbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUgPSAkLnByb3h5KF8uY2hhbmdlU2xpZGUsIF8pO1xyXG4gICAgICAgICAgICBfLmNsaWNrSGFuZGxlciA9ICQucHJveHkoXy5jbGlja0hhbmRsZXIsIF8pO1xyXG4gICAgICAgICAgICBfLnNlbGVjdEhhbmRsZXIgPSAkLnByb3h5KF8uc2VsZWN0SGFuZGxlciwgXyk7XHJcbiAgICAgICAgICAgIF8uc2V0UG9zaXRpb24gPSAkLnByb3h5KF8uc2V0UG9zaXRpb24sIF8pO1xyXG4gICAgICAgICAgICBfLnN3aXBlSGFuZGxlciA9ICQucHJveHkoXy5zd2lwZUhhbmRsZXIsIF8pO1xyXG4gICAgICAgICAgICBfLmRyYWdIYW5kbGVyID0gJC5wcm94eShfLmRyYWdIYW5kbGVyLCBfKTtcclxuICAgICAgICAgICAgXy5rZXlIYW5kbGVyID0gJC5wcm94eShfLmtleUhhbmRsZXIsIF8pO1xyXG5cclxuICAgICAgICAgICAgXy5pbnN0YW5jZVVpZCA9IGluc3RhbmNlVWlkKys7XHJcblxyXG4gICAgICAgICAgICAvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xyXG4gICAgICAgICAgICAvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAobXVzdCBzdGFydCB3aXRoIDwpXHJcbiAgICAgICAgICAgIC8vIEV4dHJhY3RlZCBmcm9tIGpRdWVyeSB2MS4xMSBzb3VyY2VcclxuICAgICAgICAgICAgXy5odG1sRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKikkLztcclxuXHJcblxyXG4gICAgICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcclxuICAgICAgICAgICAgXy5pbml0KHRydWUpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBTbGljaztcclxuXHJcbiAgICB9KCkpO1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5hY3RpdmF0ZUFEQSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stYWN0aXZlJykuYXR0cih7XHJcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICdmYWxzZSdcclxuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcclxuICAgICAgICAgICAgJ3RhYmluZGV4JzogJzAnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuYWRkU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tBZGQgPSBmdW5jdGlvbihtYXJrdXAsIGluZGV4LCBhZGRCZWZvcmUpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgIGFkZEJlZm9yZSA9IGluZGV4O1xyXG4gICAgICAgICAgICBpbmRleCA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA8IDAgfHwgKGluZGV4ID49IF8uc2xpZGVDb3VudCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy51bmxvYWQoKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBfLiRzbGlkZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRkQmVmb3JlKSB7XHJcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QmVmb3JlKF8uJHNsaWRlcy5lcShpbmRleCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEFmdGVyKF8uJHNsaWRlcy5lcShpbmRleCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGFkZEJlZm9yZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgJChtYXJrdXApLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy4kc2xpZGVzID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpO1xyXG5cclxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICQoZWxlbWVudCkuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XHJcblxyXG4gICAgICAgIF8ucmVpbml0KCk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZUhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcclxuICAgICAgICAgICAgXy4kbGlzdC5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0XHJcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlID0gZnVuY3Rpb24odGFyZ2V0TGVmdCwgY2FsbGJhY2spIHtcclxuXHJcbiAgICAgICAgdmFyIGFuaW1Qcm9wcyA9IHt9LFxyXG4gICAgICAgICAgICBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IC10YXJnZXRMZWZ0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXy50cmFuc2Zvcm1zRW5hYmxlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdFxyXG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogdGFyZ2V0TGVmdFxyXG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gLShfLmN1cnJlbnRMZWZ0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICQoe1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogXy5jdXJyZW50TGVmdFxyXG4gICAgICAgICAgICAgICAgfSkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiB0YXJnZXRMZWZ0XHJcbiAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IF8ub3B0aW9ucy5zcGVlZCxcclxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IF8ub3B0aW9ucy5lYXNpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24obm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IE1hdGguY2VpbChub3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgKyAncHgsIDBweCknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoMHB4LCcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IE1hdGguY2VpbCh0YXJnZXRMZWZ0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4LCAwcHgpJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKDBweCwnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4KSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmRpc2FibGVUcmFuc2l0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdlRhcmdldCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5vcHRpb25zLmFzTmF2Rm9yO1xyXG5cclxuICAgICAgICBpZiAoIGFzTmF2Rm9yICYmIGFzTmF2Rm9yICE9PSBudWxsICkge1xyXG4gICAgICAgICAgICBhc05hdkZvciA9ICQoYXNOYXZGb3IpLm5vdChfLiRzbGlkZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFzTmF2Rm9yO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmFzTmF2Rm9yID0gZnVuY3Rpb24oaW5kZXgpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICBhc05hdkZvciA9IF8uZ2V0TmF2VGFyZ2V0KCk7XHJcblxyXG4gICAgICAgIGlmICggYXNOYXZGb3IgIT09IG51bGwgJiYgdHlwZW9mIGFzTmF2Rm9yID09PSAnb2JqZWN0JyApIHtcclxuICAgICAgICAgICAgYXNOYXZGb3IuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMpLnNsaWNrKCdnZXRTbGljaycpO1xyXG4gICAgICAgICAgICAgICAgaWYoIXRhcmdldC51bnNsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc2xpZGVIYW5kbGVyKGluZGV4LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmFwcGx5VHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSBfLnRyYW5zZm9ybVR5cGUgKyAnICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnb3BhY2l0eSAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XHJcblxyXG4gICAgICAgIGlmICggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcclxuICAgICAgICAgICAgXy5hdXRvUGxheVRpbWVyID0gc2V0SW50ZXJ2YWwoIF8uYXV0b1BsYXlJdGVyYXRvciwgXy5vcHRpb25zLmF1dG9wbGF5U3BlZWQgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXlDbGVhciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChfLmF1dG9QbGF5VGltZXIpIHtcclxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfLmF1dG9QbGF5VGltZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUl0ZXJhdG9yID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xyXG5cclxuICAgICAgICBpZiAoICFfLnBhdXNlZCAmJiAhXy5pbnRlcnJ1cHRlZCAmJiAhXy5mb2N1c3NlZCApIHtcclxuXHJcbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIF8uZGlyZWN0aW9uID09PSAxICYmICggXy5jdXJyZW50U2xpZGUgKyAxICkgPT09ICggXy5zbGlkZUNvdW50IC0gMSApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBfLmRpcmVjdGlvbiA9PT0gMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIF8uY3VycmVudFNsaWRlIC0gMSA9PT0gMCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggc2xpZGVUbyApO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRBcnJvd3MgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSApIHtcclxuXHJcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyA9ICQoXy5vcHRpb25zLnByZXZBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XHJcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdyA9ICQoXy5vcHRpb25zLm5leHRBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XHJcblxyXG4gICAgICAgICAgICBpZiggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XHJcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5wcmVwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGQoIF8uJG5leHRBcnJvdyApXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2staGlkZGVuJylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWRpc2FibGVkJzogJ3RydWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZERvdHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICBpLCBkb3Q7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcblxyXG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xyXG5cclxuICAgICAgICAgICAgZG90ID0gJCgnPHVsIC8+JykuYWRkQ2xhc3MoXy5vcHRpb25zLmRvdHNDbGFzcyk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IF8uZ2V0RG90Q291bnQoKTsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBkb3QuYXBwZW5kKCQoJzxsaSAvPicpLmFwcGVuZChfLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcywgXywgaSkpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgXy4kZG90cyA9IGRvdC5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kRG90cyk7XHJcblxyXG4gICAgICAgICAgICBfLiRkb3RzLmZpbmQoJ2xpJykuZmlyc3QoKS5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZE91dCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlcyA9XHJcbiAgICAgICAgICAgIF8uJHNsaWRlclxyXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCBfLm9wdGlvbnMuc2xpZGUgKyAnOm5vdCguc2xpY2stY2xvbmVkKScpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlJyk7XHJcblxyXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICQoZWxlbWVudClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpXHJcbiAgICAgICAgICAgICAgICAuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJywgJChlbGVtZW50KS5hdHRyKCdzdHlsZScpIHx8ICcnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1zbGlkZXInKTtcclxuXHJcbiAgICAgICAgXy4kc2xpZGVUcmFjayA9IChfLnNsaWRlQ291bnQgPT09IDApID9cclxuICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLmFwcGVuZFRvKF8uJHNsaWRlcikgOlxyXG4gICAgICAgICAgICBfLiRzbGlkZXMud3JhcEFsbCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLnBhcmVudCgpO1xyXG5cclxuICAgICAgICBfLiRsaXN0ID0gXy4kc2xpZGVUcmFjay53cmFwKFxyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNsaWNrLWxpc3RcIi8+JykucGFyZW50KCk7XHJcbiAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoJ29wYWNpdHknLCAwKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlIHx8IF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQoJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyKS5ub3QoJ1tzcmNdJykuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcclxuXHJcbiAgICAgICAgXy5zZXR1cEluZmluaXRlKCk7XHJcblxyXG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcclxuXHJcbiAgICAgICAgXy5idWlsZERvdHMoKTtcclxuXHJcbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XHJcblxyXG5cclxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy4kbGlzdC5hZGRDbGFzcygnZHJhZ2dhYmxlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkUm93cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsIGEsIGIsIGMsIG5ld1NsaWRlcywgbnVtT2ZTbGlkZXMsIG9yaWdpbmFsU2xpZGVzLHNsaWRlc1BlclNlY3Rpb247XHJcblxyXG4gICAgICAgIG5ld1NsaWRlcyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgICAgICBvcmlnaW5hbFNsaWRlcyA9IF8uJHNsaWRlci5jaGlsZHJlbigpO1xyXG5cclxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlc1BlclNlY3Rpb24gPSBfLm9wdGlvbnMuc2xpZGVzUGVyUm93ICogXy5vcHRpb25zLnJvd3M7XHJcbiAgICAgICAgICAgIG51bU9mU2xpZGVzID0gTWF0aC5jZWlsKFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMubGVuZ3RoIC8gc2xpZGVzUGVyU2VjdGlvblxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgZm9yKGEgPSAwOyBhIDwgbnVtT2ZTbGlkZXM7IGErKyl7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGZvcihiID0gMDsgYiA8IF8ub3B0aW9ucy5yb3dzOyBiKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGMgPSAwOyBjIDwgXy5vcHRpb25zLnNsaWRlc1BlclJvdzsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAoYSAqIHNsaWRlc1BlclNlY3Rpb24gKyAoKGIgKiBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArIGMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsU2xpZGVzLmdldCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZENoaWxkKHJvdyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXdTbGlkZXMuYXBwZW5kQ2hpbGQoc2xpZGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQobmV3U2xpZGVzKTtcclxuICAgICAgICAgICAgXy4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpXHJcbiAgICAgICAgICAgICAgICAuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOigxMDAgLyBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArICclJyxcclxuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZSA9IGZ1bmN0aW9uKGluaXRpYWwsIGZvcmNlVXBkYXRlKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgYnJlYWtwb2ludCwgdGFyZ2V0QnJlYWtwb2ludCwgcmVzcG9uZFRvV2lkdGgsIHRyaWdnZXJCcmVha3BvaW50ID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIHNsaWRlcldpZHRoID0gXy4kc2xpZGVyLndpZHRoKCk7XHJcbiAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgJCh3aW5kb3cpLndpZHRoKCk7XHJcblxyXG4gICAgICAgIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3dpbmRvdycpIHtcclxuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSB3aW5kb3dXaWR0aDtcclxuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnc2xpZGVyJykge1xyXG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHNsaWRlcldpZHRoO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdtaW4nKSB7XHJcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gTWF0aC5taW4od2luZG93V2lkdGgsIHNsaWRlcldpZHRoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggXy5vcHRpb25zLnJlc3BvbnNpdmUgJiZcclxuICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlICE9PSBudWxsKSB7XHJcblxyXG4gICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGZvciAoYnJlYWtwb2ludCBpbiBfLmJyZWFrcG9pbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50cy5oYXNPd25Qcm9wZXJ0eShicmVha3BvaW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9yaWdpbmFsU2V0dGluZ3MubW9iaWxlRmlyc3QgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA8IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbmRUb1dpZHRoID4gXy5icmVha3BvaW50c1ticmVha3BvaW50XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IF8uYWN0aXZlQnJlYWtwb2ludCB8fCBmb3JjZVVwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludFNldHRpbmdzW3RhcmdldEJyZWFrcG9pbnRdID09PSAndW5zbGljaycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLm9yaWdpbmFsU2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludFNldHRpbmdzW3RhcmdldEJyZWFrcG9pbnRdID09PSAndW5zbGljaycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLm9yaWdpbmFsU2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSBfLm9yaWdpbmFsU2V0dGluZ3M7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYnJlYWtwb2ludHMgZHVyaW5nIGFuIGFjdHVhbCBicmVhay4gbm90IG9uIGluaXRpYWxpemUuXHJcbiAgICAgICAgICAgIGlmKCAhaW5pdGlhbCAmJiB0cmlnZ2VyQnJlYWtwb2ludCAhPT0gZmFsc2UgKSB7XHJcbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYnJlYWtwb2ludCcsIFtfLCB0cmlnZ2VyQnJlYWtwb2ludF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmNoYW5nZVNsaWRlID0gZnVuY3Rpb24oZXZlbnQsIGRvbnRBbmltYXRlKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCksXHJcbiAgICAgICAgICAgIGluZGV4T2Zmc2V0LCBzbGlkZU9mZnNldCwgdW5ldmVuT2Zmc2V0O1xyXG5cclxuICAgICAgICAvLyBJZiB0YXJnZXQgaXMgYSBsaW5rLCBwcmV2ZW50IGRlZmF1bHQgYWN0aW9uLlxyXG4gICAgICAgIGlmKCR0YXJnZXQuaXMoJ2EnKSkge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIG5vdCB0aGUgPGxpPiBlbGVtZW50IChpZTogYSBjaGlsZCksIGZpbmQgdGhlIDxsaT4uXHJcbiAgICAgICAgaWYoISR0YXJnZXQuaXMoJ2xpJykpIHtcclxuICAgICAgICAgICAgJHRhcmdldCA9ICR0YXJnZXQuY2xvc2VzdCgnbGknKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVuZXZlbk9mZnNldCA9IChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApO1xyXG4gICAgICAgIGluZGV4T2Zmc2V0ID0gdW5ldmVuT2Zmc2V0ID8gMCA6IChfLnNsaWRlQ291bnQgLSBfLmN1cnJlbnRTbGlkZSkgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5tZXNzYWdlKSB7XHJcblxyXG4gICAgICAgICAgICBjYXNlICdwcmV2aW91cyc6XHJcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIGluZGV4T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSAtIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlICduZXh0JzpcclxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBpbmRleE9mZnNldDtcclxuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgKyBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnaW5kZXgnOlxyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZXZlbnQuZGF0YS5pbmRleCA9PT0gMCA/IDAgOlxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXggfHwgJHRhcmdldC5pbmRleCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xyXG5cclxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY2hlY2tOYXZpZ2FibGUoaW5kZXgpLCBmYWxzZSwgZG9udEFuaW1hdGUpO1xyXG4gICAgICAgICAgICAgICAgJHRhcmdldC5jaGlsZHJlbigpLnRyaWdnZXIoJ2ZvY3VzJyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrTmF2aWdhYmxlID0gZnVuY3Rpb24oaW5kZXgpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICBuYXZpZ2FibGVzLCBwcmV2TmF2aWdhYmxlO1xyXG5cclxuICAgICAgICBuYXZpZ2FibGVzID0gXy5nZXROYXZpZ2FibGVJbmRleGVzKCk7XHJcbiAgICAgICAgcHJldk5hdmlnYWJsZSA9IDA7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIG4gaW4gbmF2aWdhYmxlcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgbmF2aWdhYmxlc1tuXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHByZXZOYXZpZ2FibGUgPSBuYXZpZ2FibGVzW25dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzICYmIF8uJGRvdHMgIT09IG51bGwpIHtcclxuXHJcbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSlcclxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcclxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBfLiRkb3RzLm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8uJHNsaWRlci5vZmYoJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcclxuICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xyXG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xyXG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xyXG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xyXG5cclxuICAgICAgICBfLiRsaXN0Lm9mZignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XHJcblxyXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZihfLnZpc2liaWxpdHlDaGFuZ2UsIF8udmlzaWJpbGl0eSk7XHJcblxyXG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLiRsaXN0Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCh3aW5kb3cpLm9mZignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ub3JpZW50YXRpb25DaGFuZ2UpO1xyXG5cclxuICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ucmVzaXplKTtcclxuXHJcbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vZmYoJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xyXG5cclxuICAgICAgICAkKHdpbmRvdykub2ZmKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwU2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcclxuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFJvd3MgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLCBvcmlnaW5hbFNsaWRlcztcclxuXHJcbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAwKSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVzLmNoaWxkcmVuKCkuY2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMucmVtb3ZlQXR0cignc3R5bGUnKTtcclxuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG9yaWdpbmFsU2xpZGVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy5zaG91bGRDbGljayA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24ocmVmcmVzaCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xyXG5cclxuICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XHJcblxyXG4gICAgICAgIF8uY2xlYW5VcEV2ZW50cygpO1xyXG5cclxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5kZXRhY2goKTtcclxuXHJcbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcclxuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5sZW5ndGggKSB7XHJcblxyXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuJylcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JylcclxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggXy5odG1sRXhwci50ZXN0KCBfLm9wdGlvbnMucHJldkFycm93ICkpIHtcclxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKVxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxyXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsJycpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5uZXh0QXJyb3cgKSkge1xyXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKF8uJHNsaWRlcykge1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVzXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zbGljay1pbmRleCcpXHJcbiAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdpbmFsU3R5bGluZycpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5kZXRhY2goKTtcclxuXHJcbiAgICAgICAgICAgIF8uJGxpc3QuZGV0YWNoKCk7XHJcblxyXG4gICAgICAgICAgICBfLiRzbGlkZXIuYXBwZW5kKF8uJHNsaWRlcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfLmNsZWFuVXBSb3dzKCk7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGVyJyk7XHJcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xyXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stZG90dGVkJyk7XHJcblxyXG4gICAgICAgIF8udW5zbGlja2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYoIXJlZnJlc2gpIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2Rlc3Ryb3knLCBbX10pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5kaXNhYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xyXG5cclxuICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gJyc7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZSA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgsIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XHJcblxyXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcclxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbihzbGlkZUluZGV4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xyXG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlT3V0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcclxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcclxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxyXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMlxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0ZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcikge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChmaWx0ZXIgIT09IG51bGwpIHtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xyXG5cclxuICAgICAgICAgICAgXy51bmxvYWQoKTtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmZpbHRlcihmaWx0ZXIpLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xyXG5cclxuICAgICAgICAgICAgXy5yZWluaXQoKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmZvY3VzSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlclxyXG4gICAgICAgICAgICAub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJylcclxuICAgICAgICAgICAgLm9uKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJywgJyonLCBmdW5jdGlvbihldmVudCkge1xyXG5cclxuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIHZhciAkc2YgPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnBhdXNlT25Gb2N1cyApIHtcclxuICAgICAgICAgICAgICAgICAgICBfLmZvY3Vzc2VkID0gJHNmLmlzKCc6Zm9jdXMnKTtcclxuICAgICAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LCAwKTtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRDdXJyZW50ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQ3VycmVudFNsaWRlID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuICAgICAgICByZXR1cm4gXy5jdXJyZW50U2xpZGU7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuZ2V0RG90Q291bnQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICB2YXIgYnJlYWtQb2ludCA9IDA7XHJcbiAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xyXG4gICAgICAgIHZhciBwYWdlclF0eSA9IDA7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgXy5zbGlkZUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcclxuICAgICAgICAgICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcclxuICAgICAgICAgICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgcGFnZXJRdHkgPSBfLnNsaWRlQ291bnQ7XHJcbiAgICAgICAgfSBlbHNlIGlmKCFfLm9wdGlvbnMuYXNOYXZGb3IpIHtcclxuICAgICAgICAgICAgcGFnZXJRdHkgPSAxICsgTWF0aC5jZWlsKChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAvIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XHJcbiAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgKytwYWdlclF0eTtcclxuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xyXG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwYWdlclF0eSAtIDE7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TGVmdCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICB0YXJnZXRMZWZ0LFxyXG4gICAgICAgICAgICB2ZXJ0aWNhbEhlaWdodCxcclxuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwLFxyXG4gICAgICAgICAgICB0YXJnZXRTbGlkZSxcclxuICAgICAgICAgICAgY29lZjtcclxuXHJcbiAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XHJcbiAgICAgICAgdmVydGljYWxIZWlnaHQgPSBfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IChfLnNsaWRlV2lkdGggKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIC0xO1xyXG4gICAgICAgICAgICAgICAgY29lZiA9IC0xXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZWYgPSAtMS41O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2VmID0gLTJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICh2ZXJ0aWNhbEhlaWdodCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogY29lZjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA+IF8uc2xpZGVDb3VudCAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggPiBfLnNsaWRlQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIChzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KSkgKiBfLnNsaWRlV2lkdGgpICogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiBfLnNsaWRlV2lkdGgpICogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogdmVydGljYWxIZWlnaHQpICogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID4gXy5zbGlkZUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogXy5zbGlkZVdpZHRoO1xyXG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiB2ZXJ0aWNhbEhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSkgLyAyKSAtICgoXy5zbGlkZVdpZHRoICogXy5zbGlkZUNvdW50KSAvIDIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgLSBfLnNsaWRlV2lkdGg7XHJcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiBfLnNsaWRlV2lkdGgpICogLTEpICsgXy5zbGlkZU9mZnNldDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKChzbGlkZUluZGV4ICogdmVydGljYWxIZWlnaHQpICogLTEpICsgdmVydGljYWxPZmZzZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gIDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ICs9IChfLiRsaXN0LndpZHRoKCkgLSB0YXJnZXRTbGlkZS5vdXRlcldpZHRoKCkpIC8gMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRhcmdldExlZnQ7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuZ2V0T3B0aW9uID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uID0gZnVuY3Rpb24ob3B0aW9uKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgcmV0dXJuIF8ub3B0aW9uc1tvcHRpb25dO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICBicmVha1BvaW50ID0gMCxcclxuICAgICAgICAgICAgY291bnRlciA9IDAsXHJcbiAgICAgICAgICAgIGluZGV4ZXMgPSBbXSxcclxuICAgICAgICAgICAgbWF4O1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYnJlYWtQb2ludCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xyXG4gICAgICAgICAgICBjb3VudGVyID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XHJcbiAgICAgICAgICAgIG1heCA9IF8uc2xpZGVDb3VudCAqIDI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IG1heCkge1xyXG4gICAgICAgICAgICBpbmRleGVzLnB1c2goYnJlYWtQb2ludCk7XHJcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xyXG4gICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpbmRleGVzO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWNrID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWRlQ291bnQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQsIHN3aXBlZFNsaWRlLCBjZW50ZXJPZmZzZXQ7XHJcblxyXG4gICAgICAgIGNlbnRlck9mZnNldCA9IF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlID8gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgOiAwO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1zbGlkZScpLmVhY2goZnVuY3Rpb24oaW5kZXgsIHNsaWRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGUub2Zmc2V0TGVmdCAtIGNlbnRlck9mZnNldCArICgkKHNsaWRlKS5vdXRlcldpZHRoKCkgLyAyKSA+IChfLnN3aXBlTGVmdCAqIC0xKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCA9IE1hdGguYWJzKCQoc3dpcGVkU2xpZGUpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSAtIF8uY3VycmVudFNsaWRlKSB8fCAxO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNsaWRlc1RyYXZlcnNlZDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuZ29UbyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dvVG8gPSBmdW5jdGlvbihzbGlkZSwgZG9udEFuaW1hdGUpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcclxuICAgICAgICAgICAgICAgIGluZGV4OiBwYXJzZUludChzbGlkZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGRvbnRBbmltYXRlKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oY3JlYXRpb24pIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoISQoXy4kc2xpZGVyKS5oYXNDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKSkge1xyXG5cclxuICAgICAgICAgICAgJChfLiRzbGlkZXIpLmFkZENsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xyXG5cclxuICAgICAgICAgICAgXy5idWlsZFJvd3MoKTtcclxuICAgICAgICAgICAgXy5idWlsZE91dCgpO1xyXG4gICAgICAgICAgICBfLnNldFByb3BzKCk7XHJcbiAgICAgICAgICAgIF8uc3RhcnRMb2FkKCk7XHJcbiAgICAgICAgICAgIF8ubG9hZFNsaWRlcigpO1xyXG4gICAgICAgICAgICBfLmluaXRpYWxpemVFdmVudHMoKTtcclxuICAgICAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcclxuICAgICAgICAgICAgXy51cGRhdGVEb3RzKCk7XHJcbiAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKHRydWUpO1xyXG4gICAgICAgICAgICBfLmZvY3VzSGFuZGxlcigpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjcmVhdGlvbikge1xyXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignaW5pdCcsIFtfXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy5pbml0QURBKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcclxuXHJcbiAgICAgICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBREEgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBudW1Eb3RHcm91cHMgPSBNYXRoLmNlaWwoXy5zbGlkZUNvdW50IC8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyksXHJcbiAgICAgICAgICAgICAgICB0YWJDb250cm9sSW5kZXhlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpLmZpbHRlcihmdW5jdGlvbih2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHZhbCA+PSAwKSAmJiAodmFsIDwgXy5zbGlkZUNvdW50KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXMuYWRkKF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpKS5hdHRyKHtcclxuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxyXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXHJcbiAgICAgICAgfSkuZmluZCgnYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0JykuYXR0cih7XHJcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVzLm5vdChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuZWFjaChmdW5jdGlvbihpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVDb250cm9sSW5kZXggPSB0YWJDb250cm9sSW5kZXhlcy5pbmRleE9mKGkpO1xyXG5cclxuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAndGFicGFuZWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICdpZCc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgaSxcclxuICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAtMVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlQ29udHJvbEluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgdmFyIGFyaWFCdXR0b25Db250cm9sID0gJ3NsaWNrLXNsaWRlLWNvbnRyb2wnICsgXy5pbnN0YW5jZVVpZCArIHNsaWRlQ29udHJvbEluZGV4XHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJCgnIycgKyBhcmlhQnV0dG9uQ29udHJvbCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFCdXR0b25Db250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIF8uJGRvdHMuYXR0cigncm9sZScsICd0YWJsaXN0JykuZmluZCgnbGknKS5lYWNoKGZ1bmN0aW9uKGkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXBwZWRTbGlkZUluZGV4ID0gdGFiQ29udHJvbEluZGV4ZXNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcclxuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICdwcmVzZW50YXRpb24nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJ2J1dHRvbicpLmZpcnN0KCkuYXR0cih7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAndGFiJyxcclxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAnc2xpY2stc2xpZGUtY29udHJvbCcgKyBfLmluc3RhbmNlVWlkICsgaSxcclxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1jb250cm9scyc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgbWFwcGVkU2xpZGVJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbCc6IChpICsgMSkgKyAnIG9mICcgKyBudW1Eb3RHcm91cHMsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSkuZXEoXy5jdXJyZW50U2xpZGUpLmZpbmQoJ2J1dHRvbicpLmF0dHIoe1xyXG4gICAgICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZScsXHJcbiAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnMCdcclxuICAgICAgICAgICAgfSkuZW5kKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBpPV8uY3VycmVudFNsaWRlLCBtYXg9aStfLm9wdGlvbnMuc2xpZGVzVG9TaG93OyBpIDwgbWF4OyBpKyspIHtcclxuICAgICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkge1xyXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoaSkuYXR0cih7J3RhYmluZGV4JzogJzAnfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoaSkucmVtb3ZlQXR0cigndGFiaW5kZXgnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8uYWN0aXZhdGVBREEoKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QXJyb3dFdmVudHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgIF8uJHByZXZBcnJvd1xyXG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXHJcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xyXG4gICAgICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcclxuICAgICAgICAgICAgXy4kbmV4dEFycm93XHJcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcclxuICAgICAgICAgICAgICAgLm9uKCdjbGljay5zbGljaycsIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcclxuICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXREb3RFdmVudHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpLm9uKCdjbGljay5zbGljaycsIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCdcclxuICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIF8uJGRvdHMub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5vcHRpb25zLnBhdXNlT25Eb3RzSG92ZXIgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG5cclxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxyXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpXHJcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKCBfLm9wdGlvbnMucGF1c2VPbkhvdmVyICkge1xyXG5cclxuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcclxuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy5pbml0QXJyb3dFdmVudHMoKTtcclxuXHJcbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XHJcbiAgICAgICAgXy5pbml0U2xpZGVFdmVudHMoKTtcclxuXHJcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCB7XHJcbiAgICAgICAgICAgIGFjdGlvbjogJ3N0YXJ0J1xyXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcclxuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywge1xyXG4gICAgICAgICAgICBhY3Rpb246ICdtb3ZlJ1xyXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcclxuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywge1xyXG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXHJcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xyXG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCB7XHJcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcclxuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XHJcblxyXG4gICAgICAgIF8uJGxpc3Qub24oJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xyXG5cclxuICAgICAgICAkKGRvY3VtZW50KS5vbihfLnZpc2liaWxpdHlDaGFuZ2UsICQucHJveHkoXy52aXNpYmlsaXR5LCBfKSk7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQod2luZG93KS5vbignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsICQucHJveHkoXy5vcmllbnRhdGlvbkNoYW5nZSwgXykpO1xyXG5cclxuICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLnJlc2l6ZSwgXykpO1xyXG5cclxuICAgICAgICAkKCdbZHJhZ2dhYmxlIT10cnVlXScsIF8uJHNsaWRlVHJhY2spLm9uKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcclxuXHJcbiAgICAgICAgJCh3aW5kb3cpLm9uKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcclxuICAgICAgICAkKF8uc2V0UG9zaXRpb24pO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRVSSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuXHJcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5zaG93KCk7XHJcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5zaG93KCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuXHJcbiAgICAgICAgICAgIF8uJGRvdHMuc2hvdygpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUua2V5SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuICAgICAgICAgLy9Eb250IHNsaWRlIGlmIHRoZSBjdXJzb3IgaXMgaW5zaWRlIHRoZSBmb3JtIGZpZWxkcyBhbmQgYXJyb3cga2V5cyBhcmUgcHJlc3NlZFxyXG4gICAgICAgIGlmKCFldmVudC50YXJnZXQudGFnTmFtZS5tYXRjaCgnVEVYVEFSRUF8SU5QVVR8U0VMRUNUJykpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAnbmV4dCcgOiAgJ3ByZXZpb3VzJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM5ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAncHJldmlvdXMnIDogJ25leHQnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUubGF6eUxvYWQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICBsb2FkUmFuZ2UsIGNsb25lUmFuZ2UsIHJhbmdlU3RhcnQsIHJhbmdlRW5kO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsb2FkSW1hZ2VzKGltYWdlc1Njb3BlKSB7XHJcblxyXG4gICAgICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIGltYWdlc1Njb3BlKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtbGF6eScpLFxyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU3JjU2V0ID0gJCh0aGlzKS5hdHRyKCdkYXRhLXNyY3NldCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU2l6ZXMgID0gJCh0aGlzKS5hdHRyKCdkYXRhLXNpemVzJykgfHwgXy4kc2xpZGVyLmF0dHIoJ2RhdGEtc2l6ZXMnKSxcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDAgfSwgMTAwLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Jjc2V0JywgaW1hZ2VTcmNTZXQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU2l6ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgaW1hZ2VTb3VyY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiAxIH0sIDIwMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFtfLCBpbWFnZSwgaW1hZ2VTb3VyY2VdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCAnZGF0YS1sYXp5JyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5jdXJyZW50U2xpZGUgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKTtcclxuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gcmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAyO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IE1hdGgubWF4KDAsIF8uY3VycmVudFNsaWRlIC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSAyICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkgKyBfLmN1cnJlbnRTbGlkZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgXy5jdXJyZW50U2xpZGUgOiBfLmN1cnJlbnRTbGlkZTtcclxuICAgICAgICAgICAgcmFuZ2VFbmQgPSBNYXRoLmNlaWwocmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyYW5nZVN0YXJ0ID4gMCkgcmFuZ2VTdGFydC0tO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlRW5kIDw9IF8uc2xpZGVDb3VudCkgcmFuZ2VFbmQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbG9hZFJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpLnNsaWNlKHJhbmdlU3RhcnQsIHJhbmdlRW5kKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ2FudGljaXBhdGVkJykge1xyXG4gICAgICAgICAgICB2YXIgcHJldlNsaWRlID0gcmFuZ2VTdGFydCAtIDEsXHJcbiAgICAgICAgICAgICAgICBuZXh0U2xpZGUgPSByYW5nZUVuZCxcclxuICAgICAgICAgICAgICAgICRzbGlkZXMgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJyk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJldlNsaWRlIDwgMCkgcHJldlNsaWRlID0gXy5zbGlkZUNvdW50IC0gMTtcclxuICAgICAgICAgICAgICAgIGxvYWRSYW5nZSA9IGxvYWRSYW5nZS5hZGQoJHNsaWRlcy5lcShwcmV2U2xpZGUpKTtcclxuICAgICAgICAgICAgICAgIGxvYWRSYW5nZSA9IGxvYWRSYW5nZS5hZGQoJHNsaWRlcy5lcShuZXh0U2xpZGUpKTtcclxuICAgICAgICAgICAgICAgIHByZXZTbGlkZS0tO1xyXG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxvYWRJbWFnZXMobG9hZFJhbmdlKTtcclxuXHJcbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJyk7XHJcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoMCwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XHJcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xyXG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZShfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICogLTEpO1xyXG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5sb2FkU2xpZGVyID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xyXG5cclxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XHJcblxyXG4gICAgICAgIF8uaW5pdFVJKCk7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdwcm9ncmVzc2l2ZScpIHtcclxuICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLm5leHQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tOZXh0ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICduZXh0J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUub3JpZW50YXRpb25DaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xyXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5wYXVzZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BhdXNlID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XHJcbiAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnBsYXkgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQbGF5ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy5hdXRvUGxheSgpO1xyXG4gICAgICAgIF8ub3B0aW9ucy5hdXRvcGxheSA9IHRydWU7XHJcbiAgICAgICAgXy5wYXVzZWQgPSBmYWxzZTtcclxuICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnBvc3RTbGlkZSA9IGZ1bmN0aW9uKGluZGV4KSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhZnRlckNoYW5nZScsIFtfLCBpbmRleF0pO1xyXG5cclxuICAgICAgICAgICAgXy5hbmltYXRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xyXG4gICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkY3VycmVudFNsaWRlID0gJChfLiRzbGlkZXMuZ2V0KF8uY3VycmVudFNsaWRlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hdHRyKCd0YWJpbmRleCcsIDApLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXYgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQcmV2ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5wcm9ncmVzc2l2ZUxhenlMb2FkID0gZnVuY3Rpb24oIHRyeUNvdW50ICkge1xyXG5cclxuICAgICAgICB0cnlDb3VudCA9IHRyeUNvdW50IHx8IDE7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgJGltZ3NUb0xvYWQgPSAkKCAnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIgKSxcclxuICAgICAgICAgICAgaW1hZ2UsXHJcbiAgICAgICAgICAgIGltYWdlU291cmNlLFxyXG4gICAgICAgICAgICBpbWFnZVNyY1NldCxcclxuICAgICAgICAgICAgaW1hZ2VTaXplcyxcclxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQ7XHJcblxyXG4gICAgICAgIGlmICggJGltZ3NUb0xvYWQubGVuZ3RoICkge1xyXG5cclxuICAgICAgICAgICAgaW1hZ2UgPSAkaW1nc1RvTG9hZC5maXJzdCgpO1xyXG4gICAgICAgICAgICBpbWFnZVNvdXJjZSA9IGltYWdlLmF0dHIoJ2RhdGEtbGF6eScpO1xyXG4gICAgICAgICAgICBpbWFnZVNyY1NldCA9IGltYWdlLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XHJcbiAgICAgICAgICAgIGltYWdlU2l6ZXMgID0gaW1hZ2UuYXR0cignZGF0YS1zaXplcycpIHx8IF8uJHNsaWRlci5hdHRyKCdkYXRhLXNpemVzJyk7XHJcbiAgICAgICAgICAgIGltYWdlVG9Mb2FkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcblxyXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Jjc2V0JywgaW1hZ2VTcmNTZXQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU2l6ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaW1hZ2VcclxuICAgICAgICAgICAgICAgICAgICAuYXR0ciggJ3NyYycsIGltYWdlU291cmNlIClcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICkge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xyXG4gICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggdHJ5Q291bnQgPCAzICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgICAgKiB0cnkgdG8gbG9hZCB0aGUgaW1hZ2UgMyB0aW1lcyxcclxuICAgICAgICAgICAgICAgICAgICAgKiBsZWF2ZSBhIHNsaWdodCBkZWxheSBzbyB3ZSBkb24ndCBnZXRcclxuICAgICAgICAgICAgICAgICAgICAgKiBzZXJ2ZXJzIGJsb2NraW5nIHRoZSByZXF1ZXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoIHRyeUNvdW50ICsgMSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCAnZGF0YS1sYXp5JyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhbGxJbWFnZXNMb2FkZWQnLCBbIF8gXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oIGluaXRpYWxpemluZyApIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLCBjdXJyZW50U2xpZGUsIGxhc3RWaXNpYmxlSW5kZXg7XHJcblxyXG4gICAgICAgIGxhc3RWaXNpYmxlSW5kZXggPSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xyXG5cclxuICAgICAgICAvLyBpbiBub24taW5maW5pdGUgc2xpZGVycywgd2UgZG9uJ3Qgd2FudCB0byBnbyBwYXN0IHRoZVxyXG4gICAgICAgIC8vIGxhc3QgdmlzaWJsZSBpbmRleC5cclxuICAgICAgICBpZiggIV8ub3B0aW9ucy5pbmZpbml0ZSAmJiAoIF8uY3VycmVudFNsaWRlID4gbGFzdFZpc2libGVJbmRleCApKSB7XHJcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gbGFzdFZpc2libGVJbmRleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmIGxlc3Mgc2xpZGVzIHRoYW4gdG8gc2hvdywgZ28gdG8gc3RhcnQuXHJcbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcclxuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xyXG5cclxuICAgICAgICBfLmRlc3Ryb3kodHJ1ZSk7XHJcblxyXG4gICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMsIHsgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUgfSk7XHJcblxyXG4gICAgICAgIF8uaW5pdCgpO1xyXG5cclxuICAgICAgICBpZiggIWluaXRpYWxpemluZyApIHtcclxuXHJcbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xyXG4gICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRTbGlkZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBmYWxzZSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWdpc3RlckJyZWFrcG9pbnRzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcywgYnJlYWtwb2ludCwgY3VycmVudEJyZWFrcG9pbnQsIGwsXHJcbiAgICAgICAgICAgIHJlc3BvbnNpdmVTZXR0aW5ncyA9IF8ub3B0aW9ucy5yZXNwb25zaXZlIHx8IG51bGw7XHJcblxyXG4gICAgICAgIGlmICggJC50eXBlKHJlc3BvbnNpdmVTZXR0aW5ncykgPT09ICdhcnJheScgJiYgcmVzcG9uc2l2ZVNldHRpbmdzLmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gXy5vcHRpb25zLnJlc3BvbmRUbyB8fCAnd2luZG93JztcclxuXHJcbiAgICAgICAgICAgIGZvciAoIGJyZWFrcG9pbnQgaW4gcmVzcG9uc2l2ZVNldHRpbmdzICkge1xyXG5cclxuICAgICAgICAgICAgICAgIGwgPSBfLmJyZWFrcG9pbnRzLmxlbmd0aC0xO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtwb2ludCA9IHJlc3BvbnNpdmVTZXR0aW5nc1ticmVha3BvaW50XS5icmVha3BvaW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGJyZWFrcG9pbnRzIGFuZCBjdXQgb3V0IGFueSBleGlzdGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uZXMgd2l0aCB0aGUgc2FtZSBicmVha3BvaW50IG51bWJlciwgd2UgZG9uJ3Qgd2FudCBkdXBlcy5cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5icmVha3BvaW50c1tsXSAmJiBfLmJyZWFrcG9pbnRzW2xdID09PSBjdXJyZW50QnJlYWtwb2ludCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc3BsaWNlKGwsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5wdXNoKGN1cnJlbnRCcmVha3BvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tjdXJyZW50QnJlYWtwb2ludF0gPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uc2V0dGluZ3M7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgXy5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoIF8ub3B0aW9ucy5tb2JpbGVGaXJzdCApID8gYS1iIDogYi1hO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnJlaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlcyA9XHJcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2tcclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbihfLm9wdGlvbnMuc2xpZGUpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlJyk7XHJcblxyXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgJiYgXy5jdXJyZW50U2xpZGUgIT09IDApIHtcclxuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcclxuXHJcbiAgICAgICAgXy5zZXRQcm9wcygpO1xyXG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xyXG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcclxuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xyXG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XHJcbiAgICAgICAgXy5idWlsZERvdHMoKTtcclxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcclxuICAgICAgICBfLmluaXREb3RFdmVudHMoKTtcclxuICAgICAgICBfLmNsZWFuVXBTbGlkZUV2ZW50cygpO1xyXG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XHJcblxyXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKGZhbHNlLCB0cnVlKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XHJcblxyXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcclxuICAgICAgICBfLmZvY3VzSGFuZGxlcigpO1xyXG5cclxuICAgICAgICBfLnBhdXNlZCA9ICFfLm9wdGlvbnMuYXV0b3BsYXk7XHJcbiAgICAgICAgXy5hdXRvUGxheSgpO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigncmVJbml0JywgW19dKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgIT09IF8ud2luZG93V2lkdGgpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF8ud2luZG93RGVsYXkpO1xyXG4gICAgICAgICAgICBfLndpbmRvd0RlbGF5ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHsgXy5zZXRQb3NpdGlvbigpOyB9XHJcbiAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5yZW1vdmVTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1JlbW92ZSA9IGZ1bmN0aW9uKGluZGV4LCByZW1vdmVCZWZvcmUsIHJlbW92ZUFsbCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgcmVtb3ZlQmVmb3JlID0gaW5kZXg7XHJcbiAgICAgICAgICAgIGluZGV4ID0gcmVtb3ZlQmVmb3JlID09PSB0cnVlID8gMCA6IF8uc2xpZGVDb3VudCAtIDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAtLWluZGV4IDogaW5kZXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDwgMSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBfLnNsaWRlQ291bnQgLSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8udW5sb2FkKCk7XHJcblxyXG4gICAgICAgIGlmIChyZW1vdmVBbGwgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpbmRleCkucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcclxuXHJcbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcclxuXHJcbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XHJcblxyXG4gICAgICAgIF8ucmVpbml0KCk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc2V0Q1NTID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge30sXHJcbiAgICAgICAgICAgIHgsIHk7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uID0gLXBvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICB4ID0gXy5wb3NpdGlvblByb3AgPT0gJ2xlZnQnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcclxuICAgICAgICB5ID0gXy5wb3NpdGlvblByb3AgPT0gJ3RvcCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xyXG5cclxuICAgICAgICBwb3NpdGlvblByb3BzW18ucG9zaXRpb25Qcm9wXSA9IHBvc2l0aW9uO1xyXG5cclxuICAgICAgICBpZiAoXy50cmFuc2Zvcm1zRW5hYmxlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcG9zaXRpb25Qcm9wcyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgKyB4ICsgJywgJyArIHkgKyAnKSc7XHJcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHggKyAnLCAnICsgeSArICcsIDBweCknO1xyXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc2V0RGltZW5zaW9ucyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgXy4kbGlzdC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICgnMHB4ICcgKyBfLm9wdGlvbnMuY2VudGVyUGFkZGluZylcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgXy4kbGlzdC5oZWlnaHQoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcclxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nICsgJyAwcHgnKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8ubGlzdFdpZHRoID0gXy4kbGlzdC53aWR0aCgpO1xyXG4gICAgICAgIF8ubGlzdEhlaWdodCA9IF8uJGxpc3QuaGVpZ2h0KCk7XHJcblxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSAmJiBfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgXy5zbGlkZVdpZHRoID0gTWF0aC5jZWlsKF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XHJcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoTWF0aC5jZWlsKChfLnNsaWRlV2lkdGggKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aCg1MDAwICogXy5zbGlkZUNvdW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGgpO1xyXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmhlaWdodChNYXRoLmNlaWwoKF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9mZnNldCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVyV2lkdGgodHJ1ZSkgLSBfLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO1xyXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLndpZHRoKF8uc2xpZGVXaWR0aCAtIG9mZnNldCk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc2V0RmFkZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIHRhcmdldExlZnQ7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy5zbGlkZVdpZHRoICogaW5kZXgpICogLTE7XHJcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRhcmdldExlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdCxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLmNzcyh7XHJcbiAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDEsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcclxuICAgICAgICAgICAgXy4kbGlzdC5jc3MoJ2hlaWdodCcsIHRhcmdldEhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnNldE9wdGlvbiA9XHJcbiAgICBTbGljay5wcm90b3R5cGUuc2xpY2tTZXRPcHRpb24gPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogYWNjZXB0cyBhcmd1bWVudHMgaW4gZm9ybWF0IG9mOlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2luZ2xlIG9wdGlvbidzIHZhbHVlOlxyXG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgb3B0aW9uLCB2YWx1ZSwgcmVmcmVzaCApXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAgLSBmb3IgY2hhbmdpbmcgYSBzZXQgb2YgcmVzcG9uc2l2ZSBvcHRpb25zOlxyXG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgJ3Jlc3BvbnNpdmUnLCBbe30sIC4uLl0sIHJlZnJlc2ggKVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogIC0gZm9yIHVwZGF0aW5nIG11bHRpcGxlIHZhbHVlcyBhdCBvbmNlIChub3QgcmVzcG9uc2l2ZSlcclxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsIHsgJ29wdGlvbic6IHZhbHVlLCAuLi4gfSwgcmVmcmVzaCApXHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcywgbCwgaXRlbSwgb3B0aW9uLCB2YWx1ZSwgcmVmcmVzaCA9IGZhbHNlLCB0eXBlO1xyXG5cclxuICAgICAgICBpZiggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ29iamVjdCcgKSB7XHJcblxyXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzFdO1xyXG4gICAgICAgICAgICB0eXBlID0gJ211bHRpcGxlJztcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ3N0cmluZycgKSB7XHJcblxyXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICB2YWx1ZSA9IGFyZ3VtZW50c1sxXTtcclxuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1syXTtcclxuXHJcbiAgICAgICAgICAgIGlmICggYXJndW1lbnRzWzBdID09PSAncmVzcG9uc2l2ZScgJiYgJC50eXBlKCBhcmd1bWVudHNbMV0gKSA9PT0gJ2FycmF5JyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ3Jlc3BvbnNpdmUnO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICggdHlwZW9mIGFyZ3VtZW50c1sxXSAhPT0gJ3VuZGVmaW5lZCcgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdzaW5nbGUnO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggdHlwZSA9PT0gJ3NpbmdsZScgKSB7XHJcblxyXG4gICAgICAgICAgICBfLm9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xyXG5cclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ211bHRpcGxlJyApIHtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaCggb3B0aW9uICwgZnVuY3Rpb24oIG9wdCwgdmFsICkge1xyXG5cclxuICAgICAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRdID0gdmFsO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAncmVzcG9uc2l2ZScgKSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKCBpdGVtIGluIHZhbHVlICkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCAkLnR5cGUoIF8ub3B0aW9ucy5yZXNwb25zaXZlICkgIT09ICdhcnJheScgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlID0gWyB2YWx1ZVtpdGVtXSBdO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGwgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgtMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSByZXNwb25zaXZlIG9iamVjdCBhbmQgc3BsaWNlIG91dCBkdXBsaWNhdGVzLlxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnJlc3BvbnNpdmVbbF0uYnJlYWtwb2ludCA9PT0gdmFsdWVbaXRlbV0uYnJlYWtwb2ludCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5zcGxpY2UobCwxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5wdXNoKCB2YWx1ZVtpdGVtXSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIHJlZnJlc2ggKSB7XHJcblxyXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xyXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBfLnNldERpbWVuc2lvbnMoKTtcclxuXHJcbiAgICAgICAgXy5zZXRIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBfLnNldENTUyhfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfLnNldEZhZGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzZXRQb3NpdGlvbicsIFtfXSk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc2V0UHJvcHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xyXG5cclxuICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gdHJ1ZSA/ICd0b3AnIDogJ2xlZnQnO1xyXG5cclxuICAgICAgICBpZiAoXy5wb3NpdGlvblByb3AgPT09ICd0b3AnKSB7XHJcbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stdmVydGljYWwnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYm9keVN0eWxlLldlYmtpdFRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgICBib2R5U3R5bGUuTW96VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgIGJvZHlTdHlsZS5tc1RyYW5zaXRpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnVzZUNTUyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgXy5jc3NUcmFuc2l0aW9ucyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggXy5vcHRpb25zLmZhZGUgKSB7XHJcbiAgICAgICAgICAgIGlmICggdHlwZW9mIF8ub3B0aW9ucy56SW5kZXggPT09ICdudW1iZXInICkge1xyXG4gICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy56SW5kZXggPCAzICkge1xyXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSAzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IF8uZGVmYXVsdHMuekluZGV4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYm9keVN0eWxlLk9UcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ09UcmFuc2Zvcm0nO1xyXG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW8tdHJhbnNmb3JtJztcclxuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdPVHJhbnNpdGlvbic7XHJcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChib2R5U3R5bGUuTW96VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdNb3pUcmFuc2Zvcm0nO1xyXG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1vei10cmFuc2Zvcm0nO1xyXG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ01velRyYW5zaXRpb24nO1xyXG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUuTW96UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYm9keVN0eWxlLndlYmtpdFRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnd2Via2l0VHJhbnNmb3JtJztcclxuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy13ZWJraXQtdHJhbnNmb3JtJztcclxuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd3ZWJraXRUcmFuc2l0aW9uJztcclxuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJvZHlTdHlsZS5tc1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnbXNUcmFuc2Zvcm0nO1xyXG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1zLXRyYW5zZm9ybSc7XHJcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnbXNUcmFuc2l0aW9uJztcclxuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5tc1RyYW5zZm9ybSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChib2R5U3R5bGUudHJhbnNmb3JtICE9PSB1bmRlZmluZWQgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd0cmFuc2Zvcm0nO1xyXG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAndHJhbnNmb3JtJztcclxuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd0cmFuc2l0aW9uJztcclxuICAgICAgICB9XHJcbiAgICAgICAgXy50cmFuc2Zvcm1zRW5hYmxlZCA9IF8ub3B0aW9ucy51c2VUcmFuc2Zvcm0gJiYgKF8uYW5pbVR5cGUgIT09IG51bGwgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFNsaWRlQ2xhc3NlcyA9IGZ1bmN0aW9uKGluZGV4KSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0LCBhbGxTbGlkZXMsIGluZGV4T2Zmc2V0LCByZW1haW5kZXI7XHJcblxyXG4gICAgICAgIGFsbFNsaWRlcyA9IF8uJHNsaWRlclxyXG4gICAgICAgICAgICAuZmluZCgnLnNsaWNrLXNsaWRlJylcclxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLWN1cnJlbnQnKVxyXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXNcclxuICAgICAgICAgICAgLmVxKGluZGV4KVxyXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWN1cnJlbnQnKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZXZlbkNvZWYgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICUgMiA9PT0gMCA/IDEgOiAwO1xyXG5cclxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IGNlbnRlck9mZnNldCAmJiBpbmRleCA8PSAoXy5zbGlkZUNvdW50IC0gMSkgLSBjZW50ZXJPZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4IC0gY2VudGVyT2Zmc2V0ICsgZXZlbkNvZWYsIGluZGV4ICsgY2VudGVyT2Zmc2V0ICsgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gY2VudGVyT2Zmc2V0ICsgMSArIGV2ZW5Db2VmLCBpbmRleE9mZnNldCArIGNlbnRlck9mZnNldCArIDIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKGFsbFNsaWRlcy5sZW5ndGggLSAxIC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBfLnNsaWRlQ291bnQgLSAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfLiRzbGlkZXNcclxuICAgICAgICAgICAgICAgIC5lcShpbmRleClcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8PSAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfLiRzbGlkZXNcclxuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXgsIGluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcclxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsbFNsaWRlcy5sZW5ndGggPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG5cclxuICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVtYWluZGVyID0gXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcclxuICAgICAgICAgICAgICAgIGluZGV4T2Zmc2V0ID0gXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIGluZGV4IDogaW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICYmIChfLnNsaWRlQ291bnQgLSBpbmRleCkgPCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIHJlbWFpbmRlciksIGluZGV4T2Zmc2V0ICsgcmVtYWluZGVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQsIGluZGV4T2Zmc2V0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ29uZGVtYW5kJyB8fCBfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdhbnRpY2lwYXRlZCcpIHtcclxuICAgICAgICAgICAgXy5sYXp5TG9hZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnNldHVwSW5maW5pdGUgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICBpLCBzbGlkZUluZGV4LCBpbmZpbml0ZUNvdW50O1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy5vcHRpb25zLmNlbnRlck1vZGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XHJcblxyXG4gICAgICAgICAgICBzbGlkZUluZGV4ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBfLnNsaWRlQ291bnQ7IGkgPiAoXy5zbGlkZUNvdW50IC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCk7IGkgLT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmZpbml0ZUNvdW50ICArIF8uc2xpZGVDb3VudDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCArIF8uc2xpZGVDb3VudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpLmZpbmQoJ1tpZF0nKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignaWQnLCAnJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmludGVycnVwdCA9IGZ1bmN0aW9uKCB0b2dnbGUgKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYoICF0b2dnbGUgKSB7XHJcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRvZ2dsZTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zZWxlY3RIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9XHJcbiAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5pcygnLnNsaWNrLXNsaWRlJykgP1xyXG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpIDpcclxuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCcuc2xpY2stc2xpZGUnKTtcclxuXHJcbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQodGFyZ2V0RWxlbWVudC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykpO1xyXG5cclxuICAgICAgICBpZiAoIWluZGV4KSBpbmRleCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG5cclxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8uc2xpZGVIYW5kbGVyKGluZGV4KTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlkZUhhbmRsZXIgPSBmdW5jdGlvbihpbmRleCwgc3luYywgZG9udEFuaW1hdGUpIHtcclxuXHJcbiAgICAgICAgdmFyIHRhcmdldFNsaWRlLCBhbmltU2xpZGUsIG9sZFNsaWRlLCBzbGlkZUxlZnQsIHRhcmdldExlZnQgPSBudWxsLFxyXG4gICAgICAgICAgICBfID0gdGhpcywgbmF2VGFyZ2V0O1xyXG5cclxuICAgICAgICBzeW5jID0gc3luYyB8fCBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlICYmIF8ub3B0aW9ucy53YWl0Rm9yQW5pbWF0ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUgJiYgXy5jdXJyZW50U2xpZGUgPT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzeW5jID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBfLmFzTmF2Rm9yKGluZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRhcmdldFNsaWRlID0gaW5kZXg7XHJcbiAgICAgICAgdGFyZ2V0TGVmdCA9IF8uZ2V0TGVmdCh0YXJnZXRTbGlkZSk7XHJcbiAgICAgICAgc2xpZGVMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcclxuXHJcbiAgICAgICAgXy5jdXJyZW50TGVmdCA9IF8uc3dpcGVMZWZ0ID09PSBudWxsID8gc2xpZGVMZWZ0IDogXy5zd2lwZUxlZnQ7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gXy5nZXREb3RDb3VudCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkge1xyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkpIHtcclxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcclxuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoc2xpZGVMZWZ0LCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXRTbGlkZSA8IDApIHtcclxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50IC0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgKyB0YXJnZXRTbGlkZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2xpZGUgPj0gXy5zbGlkZUNvdW50KSB7XHJcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSB0YXJnZXRTbGlkZSAtIF8uc2xpZGVDb3VudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy5hbmltYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYmVmb3JlQ2hhbmdlJywgW18sIF8uY3VycmVudFNsaWRlLCBhbmltU2xpZGVdKTtcclxuXHJcbiAgICAgICAgb2xkU2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcclxuICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGFuaW1TbGlkZTtcclxuXHJcbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xyXG5cclxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hc05hdkZvciApIHtcclxuXHJcbiAgICAgICAgICAgIG5hdlRhcmdldCA9IF8uZ2V0TmF2VGFyZ2V0KCk7XHJcbiAgICAgICAgICAgIG5hdlRhcmdldCA9IG5hdlRhcmdldC5zbGljaygnZ2V0U2xpY2snKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggbmF2VGFyZ2V0LnNsaWRlQ291bnQgPD0gbmF2VGFyZ2V0Lm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xyXG4gICAgICAgICAgICAgICAgbmF2VGFyZ2V0LnNldFNsaWRlQ2xhc3NlcyhfLmN1cnJlbnRTbGlkZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcclxuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGVPdXQob2xkU2xpZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlKGFuaW1TbGlkZSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHRhcmdldExlZnQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc3RhcnRMb2FkID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG5cclxuICAgICAgICAgICAgXy4kcHJldkFycm93LmhpZGUoKTtcclxuICAgICAgICAgICAgXy4kbmV4dEFycm93LmhpZGUoKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG5cclxuICAgICAgICAgICAgXy4kZG90cy5oaWRlKCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVEaXJlY3Rpb24gPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIHhEaXN0LCB5RGlzdCwgciwgc3dpcGVBbmdsZSwgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIHhEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFggLSBfLnRvdWNoT2JqZWN0LmN1clg7XHJcbiAgICAgICAgeURpc3QgPSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSAtIF8udG91Y2hPYmplY3QuY3VyWTtcclxuICAgICAgICByID0gTWF0aC5hdGFuMih5RGlzdCwgeERpc3QpO1xyXG5cclxuICAgICAgICBzd2lwZUFuZ2xlID0gTWF0aC5yb3VuZChyICogMTgwIC8gTWF0aC5QSSk7XHJcbiAgICAgICAgaWYgKHN3aXBlQW5nbGUgPCAwKSB7XHJcbiAgICAgICAgICAgIHN3aXBlQW5nbGUgPSAzNjAgLSBNYXRoLmFicyhzd2lwZUFuZ2xlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA8PSA0NSkgJiYgKHN3aXBlQW5nbGUgPj0gMCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gMzYwKSAmJiAoc3dpcGVBbmdsZSA+PSAzMTUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAnbGVmdCcgOiAncmlnaHQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDEzNSkgJiYgKHN3aXBlQW5nbGUgPD0gMjI1KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ3JpZ2h0JyA6ICdsZWZ0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAzNSkgJiYgKHN3aXBlQW5nbGUgPD0gMTM1KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb3duJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAndXAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJ3ZlcnRpY2FsJztcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgc2xpZGVDb3VudCxcclxuICAgICAgICAgICAgZGlyZWN0aW9uO1xyXG5cclxuICAgICAgICBfLmRyYWdnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgXy5zd2lwaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChfLnNjcm9sbGluZykge1xyXG4gICAgICAgICAgICBfLnNjcm9sbGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XHJcbiAgICAgICAgXy5zaG91bGRDbGljayA9ICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDEwICkgPyBmYWxzZSA6IHRydWU7XHJcblxyXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5jdXJYID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5lZGdlSGl0ID09PSB0cnVlICkge1xyXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZWRnZScsIFtfLCBfLnN3aXBlRGlyZWN0aW9uKCkgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPj0gXy50b3VjaE9iamVjdC5taW5Td2lwZSApIHtcclxuXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IF8uc3dpcGVEaXJlY3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoIGRpcmVjdGlvbiApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rvd24nOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKCBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpICkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50RGlyZWN0aW9uID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAndXAnOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKCBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpICkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50RGlyZWN0aW9uID0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuXHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiggZGlyZWN0aW9uICE9ICd2ZXJ0aWNhbCcgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlQ291bnQgKTtcclxuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcclxuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzd2lwZScsIFtfLCBkaXJlY3Rpb24gXSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3RhcnRYICE9PSBfLnRvdWNoT2JqZWN0LmN1clggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIF8uY3VycmVudFNsaWRlICk7XHJcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICgoXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkgfHwgKCdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudCAmJiBfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuZHJhZ2dhYmxlID09PSBmYWxzZSAmJiBldmVudC50eXBlLmluZGV4T2YoJ21vdXNlJykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgPSBldmVudC5vcmlnaW5hbEV2ZW50ICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkID9cclxuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA6IDE7XHJcblxyXG4gICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RXaWR0aCAvIF8ub3B0aW9uc1xyXG4gICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RIZWlnaHQgLyBfLm9wdGlvbnNcclxuICAgICAgICAgICAgICAgIC50b3VjaFRocmVzaG9sZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5hY3Rpb24pIHtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcclxuICAgICAgICAgICAgICAgIF8uc3dpcGVTdGFydChldmVudCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ21vdmUnOlxyXG4gICAgICAgICAgICAgICAgXy5zd2lwZU1vdmUoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlICdlbmQnOlxyXG4gICAgICAgICAgICAgICAgXy5zd2lwZUVuZChldmVudCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlTW92ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgZWRnZVdhc0hpdCA9IGZhbHNlLFxyXG4gICAgICAgICAgICBjdXJMZWZ0LCBzd2lwZURpcmVjdGlvbiwgc3dpcGVMZW5ndGgsIHBvc2l0aW9uT2Zmc2V0LCB0b3VjaGVzLCB2ZXJ0aWNhbFN3aXBlTGVuZ3RoO1xyXG5cclxuICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkID8gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzIDogbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKCFfLmRyYWdnaW5nIHx8IF8uc2Nyb2xsaW5nIHx8IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggIT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3VyTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XHJcblxyXG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5jbGllbnRYO1xyXG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVkgOiBldmVudC5jbGllbnRZO1xyXG5cclxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXHJcbiAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWCAtIF8udG91Y2hPYmplY3Quc3RhcnRYLCAyKSkpO1xyXG5cclxuICAgICAgICB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXHJcbiAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWSAtIF8udG91Y2hPYmplY3Quc3RhcnRZLCAyKSkpO1xyXG5cclxuICAgICAgICBpZiAoIV8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgJiYgIV8uc3dpcGluZyAmJiB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID4gNCkge1xyXG4gICAgICAgICAgICBfLnNjcm9sbGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSB2ZXJ0aWNhbFN3aXBlTGVuZ3RoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpcGVEaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XHJcblxyXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDQpIHtcclxuICAgICAgICAgICAgXy5zd2lwaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gMSA6IC0xKSAqIChfLnRvdWNoT2JqZWN0LmN1clggPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA/IDEgOiAtMSk7XHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgcG9zaXRpb25PZmZzZXQgPSBfLnRvdWNoT2JqZWN0LmN1clkgPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA/IDEgOiAtMTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg7XHJcblxyXG4gICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBpZiAoKF8uY3VycmVudFNsaWRlID09PSAwICYmIHN3aXBlRGlyZWN0aW9uID09PSAncmlnaHQnKSB8fCAoXy5jdXJyZW50U2xpZGUgPj0gXy5nZXREb3RDb3VudCgpICYmIHN3aXBlRGlyZWN0aW9uID09PSAnbGVmdCcpKSB7XHJcbiAgICAgICAgICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggKiBfLm9wdGlvbnMuZWRnZUZyaWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyAoc3dpcGVMZW5ndGggKiAoXy4kbGlzdC5oZWlnaHQoKSAvIF8ubGlzdFdpZHRoKSkgKiBwb3NpdGlvbk9mZnNldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMudG91Y2hNb3ZlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfLnNldENTUyhfLnN3aXBlTGVmdCk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgdG91Y2hlcztcclxuXHJcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmIChfLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50ICE9PSAxIHx8IF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFggPSBfLnRvdWNoT2JqZWN0LmN1clggPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VYIDogZXZlbnQuY2xpZW50WDtcclxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA9IF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVkgOiBldmVudC5jbGllbnRZO1xyXG5cclxuICAgICAgICBfLmRyYWdnaW5nID0gdHJ1ZTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS51bmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1VuZmlsdGVyID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKF8uJHNsaWRlc0NhY2hlICE9PSBudWxsKSB7XHJcblxyXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XHJcblxyXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUudW5sb2FkID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XHJcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy4kcHJldkFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xyXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy4kbmV4dEFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xyXG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfLiRzbGlkZXNcclxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcclxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxyXG4gICAgICAgICAgICAuY3NzKCd3aWR0aCcsICcnKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS51bnNsaWNrID0gZnVuY3Rpb24oZnJvbUJyZWFrcG9pbnQpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCd1bnNsaWNrJywgW18sIGZyb21CcmVha3BvaW50XSk7XHJcbiAgICAgICAgXy5kZXN0cm95KCk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlQXJyb3dzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0O1xyXG5cclxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcclxuXHJcbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmXHJcbiAgICAgICAgICAgIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJiZcclxuICAgICAgICAgICAgIV8ub3B0aW9ucy5pbmZpbml0ZSApIHtcclxuXHJcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XHJcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcclxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIDEgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlRG90cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChfLiRkb3RzICE9PSBudWxsKSB7XHJcblxyXG4gICAgICAgICAgICBfLiRkb3RzXHJcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICAuZW5kKCk7XHJcblxyXG4gICAgICAgICAgICBfLiRkb3RzXHJcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxyXG4gICAgICAgICAgICAgICAgLmVxKE1hdGguZmxvb3IoXy5jdXJyZW50U2xpZGUgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnZpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcclxuXHJcbiAgICAgICAgICAgIGlmICggZG9jdW1lbnRbXy5oaWRkZW5dICkge1xyXG5cclxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgICQuZm4uc2xpY2sgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIG9wdCA9IGFyZ3VtZW50c1swXSxcclxuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXHJcbiAgICAgICAgICAgIGwgPSBfLmxlbmd0aCxcclxuICAgICAgICAgICAgaSxcclxuICAgICAgICAgICAgcmV0O1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHQgPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9wdCA9PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgIF9baV0uc2xpY2sgPSBuZXcgU2xpY2soX1tpXSwgb3B0KTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0ID0gX1tpXS5zbGlja1tvcHRdLmFwcGx5KF9baV0uc2xpY2ssIGFyZ3MpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPSAndW5kZWZpbmVkJykgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF87XHJcbiAgICB9O1xyXG5cclxufSkpO1xyXG5cclxuLy8gJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbi8vIFx0J3VzZSBzdHJpY3QnXHJcbi8vIFx0JCgnLnNsaWRlcnMnKS5zbGljayh7XHJcbi8vICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxyXG4vLyAgICAgICAgIGRvdHM6IHRydWUsXHJcbi8vIFx0XHRkb3RzQ2xhc3M6IFwic2xpZGVyX19kb3RzXCIsXHJcbi8vIFx0XHRhdXRvcGxheTogdHJ1ZSxcclxuLy8gXHRcdGFkYXB0aXZlSGVpZ2h0OiB0cnVlLFxyXG5cdFx0XHJcbi8vIFx0XHRwcmV2QXJyb3c6ICcuYXJyb3dzX19hcnJvdy0tbmV4dDEnLFxyXG4vLyBcdFx0bmV4dEFycm93OiAnLmFycm93c19fYXJyb3ctLXByZXYxJyxcclxuLy8gXHRcdHJlc3BvbnNpdmU6IFt7XHJcbi8vIFx0XHRcdGJyZWFrcG9pbnQ6IDU3NixcclxuLy8gXHRcdFx0c2V0dGluZ3M6IHtcclxuLy8gXHRcdFx0XHRzbGlkZXNUb1Nob3c6IDEsXHJcbi8vIFx0XHRcdFx0ZG90czogZmFsc2VcclxuLy8gXHRcdFx0fVxyXG4vLyBcdFx0fV1cclxuLy8gXHR9KTtcclxuXHQvLyAkKCcuc2xpZGVyMicpLnNsaWNrKHtcclxuXHQvLyBcdGluZmluaXRlOiB0cnVlLFxyXG5cdC8vIFx0c2xpZGVzVG9TaG93OiAzLFxyXG5cdC8vIFx0c2xpZGVzVG9TY3JvbGw6IDEsXHJcblx0Ly8gXHRhdXRvcGxheTogdHJ1ZSxcclxuXHQvLyBcdGF1dG9wbGF5U3BlZWQ6IDIwMDAsXHJcblx0Ly8gXHRwcmV2QXJyb3c6ICcuYXJyb3dzX19hcnJvdy0tbmV4dDInLFxyXG5cdC8vIFx0bmV4dEFycm93OiAnLmFycm93c19fYXJyb3ctLXByZXYyJyxcclxuXHQvLyBcdHJlc3BvbnNpdmU6IFt7XHJcblx0Ly8gXHRcdGJyZWFrcG9pbnQ6IDEwMjQsXHJcblx0Ly8gXHRcdHNldHRpbmdzOiB7XHJcblx0Ly8gXHRcdFx0c2xpZGVzVG9TaG93OiAyXHJcblx0Ly8gXHRcdH1cclxuXHQvLyBcdH0sIHtcclxuXHQvLyBcdFx0YnJlYWtwb2ludDogNzY4LFxyXG5cdC8vIFx0XHRzZXR0aW5nczoge1xyXG5cdC8vIFx0XHRcdHNsaWRlc1RvU2hvdzogMVxyXG5cdC8vIFx0XHR9XHJcblx0Ly8gXHR9XVxyXG5cdC8vIH0pO1xyXG4vLyB9KTtcclxuLy8gJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbi8vIFx0JChcIiNtZW51XCIpLm9uKFwiY2xpY2tcIiwgXCJhXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbi8vIFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4vLyBcdFx0dmFyIGlkID0gJCh0aGlzKS5hdHRyKCdocmVmJyksXHJcbi8vIFx0XHRcdHRvcCA9ICQoaWQpLm9mZnNldCgpLnRvcDtcclxuLy8gXHRcdCQoJ2JvZHksaHRtbCcpLmFuaW1hdGUoe1xyXG4vLyBcdFx0XHRzY3JvbGxUb3A6IHRvcFxyXG4vLyBcdFx0fSwgMTUwMCk7XHJcbi8vIFx0fSk7XHJcbi8vIH0pO1xyXG5cclxuLy8gZnVuY3Rpb24gaW5pdE1hcCgpIHtcclxuLy8gXHRsZXQgZ2VvID0ge1xyXG4vLyBcdFx0bGF0OiAtNy45NjM5MTksXHJcbi8vIFx0XHRsbmc6IDExMi41ODkzMTFcclxuLy8gXHR9XHJcbi8vIFx0bGV0IG1hcmtlclBvc2l0aW9uID0ge1xyXG4vLyBcdFx0bGF0OiAtNy45NDA3NTEyLFxyXG4vLyBcdFx0bG5nOiAxMTIuNjA1NTU3NlxyXG4vLyBcdH1cclxuLy8gXHRsZXQgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcclxuLy8gXHRcdHpvb206IDEzLFxyXG4vLyBcdFx0Y2VudGVyOiBnZW8sXHJcbi8vIFx0XHRkaXNhYmxlRGVmYXVsdFVJOiB0cnVlXHJcbi8vIFx0fSk7XHJcbi8vIFx0bGV0IG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xyXG4vLyBcdFx0cG9zaXRpb246IG1hcmtlclBvc2l0aW9uLFxyXG4vLyBcdFx0bWFwOiBtYXAsXHJcbi8vIFx0XHRpY29uOiAnLi9pbWcvcGluLnBuZycsXHJcbi8vIFx0XHR0aXRsZTogJ0lrYW4gUGlyYW5oYSBBdGFzIDIyMEMgIE1hbGFuZyAtIEVhc3QgSmF2YSBJbmRvbmVzaWEnXHJcbi8vIFx0fSk7XHJcbi8vIH1cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnXHJcblxyXG5cclxuXHQkKCcuc2xpZGVycycpLnNsaWNrKHtcclxuXHRcdFxyXG5cdFx0YXJyb3dzOiB0cnVlLFxyXG5cdFx0c2xpZGVzVG9TaG93OiAxLFxyXG5cdFx0ZmFkZTogdHJ1ZSxcclxuXHRcdGNzc0Vhc2U6ICdsaW5lYXInLFxyXG5cdFx0YXV0b3BsYXk6IHRydWUsXHJcblx0XHRzd2lwZVRvU2xpZGU6IHRydWUsXHJcblx0XHRpbmZpbml0ZTogdHJ1ZSxcclxuXHRcdGFkYXB0aXZlSGVpZ2h0OiB0cnVlLFxyXG5cdFx0c3BlZWQ6IDEwMDAsXHJcblx0XHRhdXRvcGxheVNwZWVkOiAzMDAwLFxyXG5cdFx0cHJldkFycm93OiAnLmFycm93c19fYXJyb3ctLW5leHQxJyxcclxuXHRcdG5leHRBcnJvdzogJy5hcnJvd3NfX2Fycm93LS1wcmV2MScsXHJcblx0XHRyZXNwb25zaXZlOiBbe1xyXG5cdFx0XHRicmVha3BvaW50OiA1NzYsXHJcblx0XHRcdHNldHRpbmdzOiB7XHJcblx0XHRcdFx0c2xpZGVzVG9TaG93OiAxLFxyXG5cdFx0XHRcdGRvdHM6IGZhbHNlXHJcblx0XHRcdH1cclxuXHRcdH1dXHJcblx0fSk7XHJcblx0fSlcclxuXHJcblx0Y29uc3Qgc2hhZGVyID0ge1xyXG5cdFx0dmVydGV4OiBgXHRcdFx0I2lmZGVmIEdMX0VTXHJcblx0XHRwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcclxuXHRcdCNlbmRpZlxyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8vIFNpbXBsZXggMkQgbm9pc2VcclxuXHRcdC8vXHJcblx0XHR2ZWMzIHBlcm11dGUodmVjMyB4KSB7XHJcblx0XHRyZXR1cm4gbW9kKCgoeCozNC4wKSsxLjApKngsIDI4OS4wKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0ZmxvYXQgc25vaXNlKHZlYzIgdil7XHJcblx0XHRjb25zdCB2ZWM0IEMgPSB2ZWM0KDAuMjExMzI0ODY1NDA1MTg3LCAwLjM2NjAyNTQwMzc4NDQzOSwgLTAuNTc3MzUwMjY5MTg5NjI2LCAwLjAyNDM5MDI0MzkwMjQzOSk7XHJcblx0XHR2ZWMyIGkgID0gZmxvb3IodiArIGRvdCh2LCBDLnl5KSApO1xyXG5cdFx0dmVjMiB4MCA9IHYgLSAgIGkgKyBkb3QoaSwgQy54eCk7XHJcblx0XHR2ZWMyIGkxO1xyXG5cdFx0aTEgPSAoeDAueCA+IHgwLnkpID8gdmVjMigxLjAsIDAuMCkgOiB2ZWMyKDAuMCwgMS4wKTtcclxuXHRcdHZlYzQgeDEyID0geDAueHl4eSArIEMueHh6ejtcclxuXHRcdHgxMi54eSAtPSBpMTtcclxuXHRcdGkgPSBtb2QoaSwgMjg5LjApO1xyXG5cdFx0dmVjMyBwID0gcGVybXV0ZSggcGVybXV0ZSggaS55ICsgdmVjMygwLjAsIGkxLnksIDEuMCApKVxyXG5cdFx0KyBpLnggKyB2ZWMzKDAuMCwgaTEueCwgMS4wICkpO1xyXG5cdFx0dmVjMyBtID0gbWF4KDAuNSAtIHZlYzMoZG90KHgwLHgwKSwgZG90KHgxMi54eSx4MTIueHkpLFxyXG5cdFx0ZG90KHgxMi56dyx4MTIuencpKSwgMC4wKTtcclxuXHRcdG0gPSBtKm0gO1xyXG5cdFx0bSA9IG0qbSA7XHJcblx0XHR2ZWMzIHggPSAyLjAgKiBmcmFjdChwICogQy53d3cpIC0gMS4wO1xyXG5cdFx0dmVjMyBoID0gYWJzKHgpIC0gMC41O1xyXG5cdFx0dmVjMyBveCA9IGZsb29yKHggKyAwLjUpO1xyXG5cdFx0dmVjMyBhMCA9IHggLSBveDtcclxuXHRcdG0gKj0gMS43OTI4NDI5MTQwMDE1OSAtIDAuODUzNzM0NzIwOTUzMTQgKiAoIGEwKmEwICsgaCpoICk7XHJcblx0XHR2ZWMzIGc7XHJcblx0XHRnLnggID0gYTAueCAgKiB4MC54ICArIGgueCAgKiB4MC55O1xyXG5cdFx0Zy55eiA9IGEwLnl6ICogeDEyLnh6ICsgaC55eiAqIHgxMi55dztcclxuXHRcdHJldHVybiAxMzAuMCAqIGRvdChtLCBnKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly8gdGhvc2UgYXJlIHRoZSBtYW5kYXRvcnkgYXR0cmlidXRlcyB0aGF0IHRoZSBsaWIgc2V0c1xyXG5cdFx0YXR0cmlidXRlIHZlYzMgYVZlcnRleFBvc2l0aW9uO1xyXG5cdFx0YXR0cmlidXRlIHZlYzIgYVRleHR1cmVDb29yZDtcclxuXHRcdFxyXG5cdFx0Ly8gdGhvc2UgYXJlIG1hbmRhdG9yeSB1bmlmb3JtcyB0aGF0IHRoZSBsaWIgc2V0cyBhbmQgdGhhdCBjb250YWluIG91ciBtb2RlbCB2aWV3IGFuZCBwcm9qZWN0aW9uIG1hdHJpeFxyXG5cdFx0dW5pZm9ybSBtYXQ0IHVNVk1hdHJpeDtcclxuXHRcdHVuaWZvcm0gbWF0NCB1UE1hdHJpeDtcclxuXHRcdFxyXG5cdFx0dW5pZm9ybSBtYXQ0IHVUZXh0dXJlTWF0cml4MDtcclxuXHRcdFxyXG5cdFx0Ly8gb3VyIHRpbWUgdW5pZm9ybVxyXG5cdFx0dW5pZm9ybSBmbG9hdCB1VGltZTtcclxuXHRcdFxyXG5cdFx0Ly8gaWYgeW91IHdhbnQgdG8gcGFzcyB5b3VyIHZlcnRleCBhbmQgdGV4dHVyZSBjb29yZHMgdG8gdGhlIGZyYWdtZW50IHNoYWRlclxyXG5cdFx0dmFyeWluZyB2ZWMzIHZWZXJ0ZXhQb3NpdGlvbjtcclxuXHRcdHZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xyXG5cdFx0XHJcblx0XHR2b2lkIG1haW4oKSB7XHJcblx0XHR2ZWMzIHZlcnRleFBvc2l0aW9uID0gYVZlcnRleFBvc2l0aW9uO1xyXG5cdFx0XHJcblx0XHR2ZWM0IHBvc2l0aW9uID0gdVBNYXRyaXggKiB1TVZNYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApO1xyXG5cdFx0XHJcblx0XHQvLyBjYWxjdWxhdGUgYSBzY3JlZW4gc3BhY2UgdXZcclxuXHRcdHZlYzIgc2NyZWVuVVYgPSBwb3NpdGlvbi54eSAvIHBvc2l0aW9uLnd3OyAvLyAoZnJvbSAtMSB0byAxKVxyXG5cdFx0c2NyZWVuVVYgPSBzY3JlZW5VViAqIDAuNSArIDAuNTsgLy8gcmVtYXAgdG8gKDAgdG8gMSlcclxuXHRcdFxyXG5cdFx0Ly8gdGhlIGJpZ2dlciB0aGUgbW9yZSB3YXZlc1xyXG5cdFx0ZmxvYXQgbm9pc2VSYXRpbyA9IDIuMDtcclxuXHRcdFxyXG5cdFx0Ly8gYXBwbHkgc2ltcGxleCBub2lzZSBiYXNlZCBvbiB0aW1lXHJcblx0XHR2ZWMzIHNpbXBsZXhOb2lzZSA9IHZlYzMoc25vaXNlKChzY3JlZW5VViAqIG5vaXNlUmF0aW8pIC0gKHVUaW1lIC8gMzYwLjApKSk7XHJcblx0XHRcclxuXHRcdC8vIGRpc3BsYWNlIHZlcnRpY2VzXHJcblx0XHR2ZXJ0ZXhQb3NpdGlvbi56ICs9IHNpbXBsZXhOb2lzZS5yO1xyXG5cdFx0XHJcblx0XHRnbF9Qb3NpdGlvbiA9IHVQTWF0cml4ICogdU1WTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTtcclxuXHRcdFxyXG5cdFx0Ly8gdmFyeWluZ3NcclxuXHRcdHZUZXh0dXJlQ29vcmQgPSAodVRleHR1cmVNYXRyaXgwICogdmVjNChhVGV4dHVyZUNvb3JkLCAwLjAsIDEuMCkpLnh5O1xyXG5cdFx0dlZlcnRleFBvc2l0aW9uID0gdmVydGV4UG9zaXRpb247XHJcblx0XHR9YCxcclxuXHRcdGZyYWdtZW50OiBgXHQjaWZkZWYgR0xfRVNcclxuXHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xyXG5cdFx0I2VuZGlmXHJcblx0XHRcclxuXHRcdC8vIGdldCBvdXIgdmFyeWluZ3NcclxuXHRcdHZhcnlpbmcgdmVjMyB2VmVydGV4UG9zaXRpb247XHJcblx0XHR2YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcclxuXHRcdFxyXG5cdFx0Ly8gb3VyIHRleHR1cmUgc2FtcGxlciAodGhpcyBpcyB0aGUgbGliIGRlZmF1bHQgbmFtZSwgYnV0IGl0IGNvdWxkIGJlIGNoYW5nZWQpXHJcblx0XHR1bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjA7XHJcblx0XHRcclxuXHRcdHZvaWQgbWFpbigpIHtcclxuXHRcdC8vIGdldCBvdXIgdGV4dHVyZSBjb29yZHNcclxuXHRcdHZlYzIgdGV4dHVyZUNvb3JkcyA9IHZUZXh0dXJlQ29vcmQ7XHJcblx0XHRcclxuXHRcdC8vIGFwcGx5IG91ciB0ZXh0dXJlXHJcblx0XHR2ZWM0IGZpbmFsQ29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXIwLCB0ZXh0dXJlQ29vcmRzKTtcclxuXHRcdFxyXG5cdFx0Ly8gdW5jb21tZW50IHRoaXMgbGluZSB0byBnZXQgYSBiJncgdmVyc2lvbiBvZiB3aGF0J3MgaGFwcGVuaW5nXHJcblx0XHQvLyBmaW5hbENvbG9yID0gdmVjNCgwLjMsIDAuMywgMC4zLCAxLjApO1xyXG5cdFx0XHJcblx0XHQvLyBmYWtlIHNoYWRvd3MgYmFzZWQgb24gdmVydGV4IHBvc2l0aW9uIGFsb25nIFogYXhpc1xyXG5cdFx0ZmluYWxDb2xvci5yZ2IgLT0gY2xhbXAoLXZWZXJ0ZXhQb3NpdGlvbi56IC8gNS4wLCAwLjAsIDEuMCk7XHJcblx0XHQvLyBmYWtlIGxpZ2h0cyBiYXNlZCBvbiB2ZXJ0ZXggcG9zaXRpb24gYWxvbmcgWiBheGlzXHJcblx0XHRmaW5hbENvbG9yLnJnYiArPSBjbGFtcCh2VmVydGV4UG9zaXRpb24ueiAvIDUuMCwgMC4wLCAxLjApO1xyXG5cdFx0XHJcblx0XHQvLyBoYW5kbGluZyBwcmVtdWx0aXBsaWVkIGFscGhhICh1c2VmdWwgaWYgd2Ugd2VyZSB1c2luZyBhIHBuZyB3aXRoIHRyYW5zcGFyZW5jeSlcclxuXHRcdGZpbmFsQ29sb3IgPSB2ZWM0KGZpbmFsQ29sb3IucmdiICogZmluYWxDb2xvci5hLCBmaW5hbENvbG9yLmEpO1xyXG5cdFx0XHJcblx0XHRnbF9GcmFnQ29sb3IgPSBmaW5hbENvbG9yO1xyXG5cdFx0fWBcclxuXHR9OyJdfQ==
